{"version":3,"file":"less.min.js","sources":["../lib/less-browser/utils.js","../lib/less-browser/browser.js","../lib/less/data/colors.js","../lib/less/data/unit-conversions.js","../lib/less/data/index.js","../lib/less/tree/node.js","../lib/less/tree/color.js","../lib/less/tree/paren.js","../lib/less/tree/combinator.js","../lib/less/tree/element.js","../lib/less/constants.js","../node_modules/clone/clone.js","../lib/less/utils.js","../lib/less/less-error.js","../lib/less/tree/selector.js","../lib/less/tree/value.js","../lib/less/tree/keyword.js","../lib/less/tree/anonymous.js","../lib/less/tree/declaration.js","../lib/less/tree/debug-info.js","../lib/less/tree/comment.js","../lib/less/contexts.js","../lib/less/functions/function-registry.js","../lib/less/functions/default.js","../lib/less/tree/ruleset.js","../lib/less/tree/atrule.js","../lib/less/tree/detached-ruleset.js","../lib/less/tree/unit.js","../lib/less/tree/dimension.js","../lib/less/tree/operation.js","../lib/less/tree/expression.js","../lib/less/functions/function-caller.js","../lib/less/tree/call.js","../lib/less/tree/variable.js","../lib/less/tree/property.js","../lib/less/tree/attribute.js","../lib/less/tree/quoted.js","../lib/less/tree/url.js","../lib/less/tree/media.js","../lib/less/tree/import.js","../lib/less/tree/js-eval-node.js","../lib/less/tree/javascript.js","../lib/less/tree/assignment.js","../lib/less/tree/condition.js","../lib/less/tree/unicode-descriptor.js","../lib/less/tree/negative.js","../lib/less/tree/extend.js","../lib/less/tree/variable-call.js","../lib/less/tree/namespace-value.js","../lib/less/tree/mixin-definition.js","../lib/less/tree/mixin-call.js","../lib/less/tree/index.js","../lib/less/logger.js","../lib/less/environment/environment.js","../lib/less/environment/abstract-file-manager.js","../lib/less/environment/abstract-plugin-loader.js","../lib/less/visitors/visitor.js","../lib/less/visitors/import-sequencer.js","../lib/less/visitors/import-visitor.js","../lib/less/visitors/set-tree-visibility-visitor.js","../lib/less/visitors/extend-visitor.js","../lib/less/visitors/join-selector-visitor.js","../lib/less/visitors/to-css-visitor.js","../lib/less/visitors/index.js","../lib/less/parser/parser-input.js","../lib/less/parser/chunker.js","../lib/less/parser/parser.js","../lib/less/functions/color.js","../lib/less/functions/boolean.js","../lib/less/functions/color-blending.js","../lib/less/functions/list.js","../lib/less/functions/math-helper.js","../lib/less/functions/math.js","../lib/less/functions/number.js","../lib/less/plugin-manager.js","../lib/less/functions/string.js","../lib/less/functions/types.js","../lib/less/functions/index.js","../lib/less/functions/data-uri.js","../lib/less/functions/svg.js","../lib/less/transform-tree.js","../lib/less/index.js","../lib/less/source-map-output.js","../lib/less/source-map-builder.js","../lib/less/parse-tree.js","../lib/less/import-manager.js","../lib/less/render.js","../lib/less/parse.js","../lib/less-browser/file-manager.js","../lib/less-browser/plugin-loader.js","../lib/less-browser/error-reporting.js","../lib/less-browser/bootstrap.js","../lib/less/default-options.js","../lib/less-browser/add-default-options.js","../lib/less-browser/index.js","../lib/less-browser/log-listener.js","../lib/less-browser/cache.js","../lib/less-browser/image-size.js"],"sourcesContent":["\nexport function extractId(href) {\n    return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '')  // Remove protocol & domain\n        .replace(/[\\?\\&]livereload=\\w+/, '')        // Remove LiveReload cachebuster\n        .replace(/^\\//, '')                         // Remove root /\n        .replace(/\\.[a-zA-Z]+$/, '')                // Remove simple extension\n        .replace(/[^\\.\\w-]+/g, '-')                 // Replace illegal characters\n        .replace(/\\./g, ':');                       // Replace dots with colons(for valid id)\n}\n\nexport function addDataAttr(options, tag) {\n    for (const opt in tag.dataset) {\n        if (tag.dataset.hasOwnProperty(opt)) {\n            if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\n                options[opt] = tag.dataset[opt];\n            } else {\n                try {\n                    options[opt] = JSON.parse(tag.dataset[opt]);\n                }\n                catch (_) {}\n            }\n        }\n    }\n}\n","import * as utils from './utils';\n\nexport default {\n    createCSS: function (document, styles, sheet) {\n        // Strip the query-string\n        const href = sheet.href || '';\n\n        // If there is no title set, use the filename, minus the extension\n        const id = `less:${sheet.title || utils.extractId(href)}`;\n\n        // If this has already been inserted into the DOM, we may need to replace it\n        const oldStyleNode = document.getElementById(id);\n        let keepOldStyleNode = false;\n\n        // Create a new stylesheet node for insertion or (if necessary) replacement\n        const styleNode = document.createElement('style');\n        styleNode.setAttribute('type', 'text/css');\n        if (sheet.media) {\n            styleNode.setAttribute('media', sheet.media);\n        }\n        styleNode.id = id;\n\n        if (!styleNode.styleSheet) {\n            styleNode.appendChild(document.createTextNode(styles));\n\n            // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n            keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\n                oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\n        }\n\n        const head = document.getElementsByTagName('head')[0];\n\n        // If there is no oldStyleNode, just append; otherwise, only append if we need\n        // to replace oldStyleNode with an updated stylesheet\n        if (oldStyleNode === null || keepOldStyleNode === false) {\n            const nextEl = sheet && sheet.nextSibling || null;\n            if (nextEl) {\n                nextEl.parentNode.insertBefore(styleNode, nextEl);\n            } else {\n                head.appendChild(styleNode);\n            }\n        }\n        if (oldStyleNode && keepOldStyleNode === false) {\n            oldStyleNode.parentNode.removeChild(oldStyleNode);\n        }\n\n        // For IE.\n        // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n        // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n        if (styleNode.styleSheet) {\n            try {\n                styleNode.styleSheet.cssText = styles;\n            } catch (e) {\n                throw new Error('Couldn\\'t reassign styleSheet.cssText.');\n            }\n        }\n    },\n    currentScript: function(window) {\n        const document = window.document;\n        return document.currentScript || (() => {\n            const scripts = document.getElementsByTagName('script');\n            return scripts[scripts.length - 1];\n        })();\n    }\n};\n","export default {\n    'aliceblue':'#f0f8ff',\n    'antiquewhite':'#faebd7',\n    'aqua':'#00ffff',\n    'aquamarine':'#7fffd4',\n    'azure':'#f0ffff',\n    'beige':'#f5f5dc',\n    'bisque':'#ffe4c4',\n    'black':'#000000',\n    'blanchedalmond':'#ffebcd',\n    'blue':'#0000ff',\n    'blueviolet':'#8a2be2',\n    'brown':'#a52a2a',\n    'burlywood':'#deb887',\n    'cadetblue':'#5f9ea0',\n    'chartreuse':'#7fff00',\n    'chocolate':'#d2691e',\n    'coral':'#ff7f50',\n    'cornflowerblue':'#6495ed',\n    'cornsilk':'#fff8dc',\n    'crimson':'#dc143c',\n    'cyan':'#00ffff',\n    'darkblue':'#00008b',\n    'darkcyan':'#008b8b',\n    'darkgoldenrod':'#b8860b',\n    'darkgray':'#a9a9a9',\n    'darkgrey':'#a9a9a9',\n    'darkgreen':'#006400',\n    'darkkhaki':'#bdb76b',\n    'darkmagenta':'#8b008b',\n    'darkolivegreen':'#556b2f',\n    'darkorange':'#ff8c00',\n    'darkorchid':'#9932cc',\n    'darkred':'#8b0000',\n    'darksalmon':'#e9967a',\n    'darkseagreen':'#8fbc8f',\n    'darkslateblue':'#483d8b',\n    'darkslategray':'#2f4f4f',\n    'darkslategrey':'#2f4f4f',\n    'darkturquoise':'#00ced1',\n    'darkviolet':'#9400d3',\n    'deeppink':'#ff1493',\n    'deepskyblue':'#00bfff',\n    'dimgray':'#696969',\n    'dimgrey':'#696969',\n    'dodgerblue':'#1e90ff',\n    'firebrick':'#b22222',\n    'floralwhite':'#fffaf0',\n    'forestgreen':'#228b22',\n    'fuchsia':'#ff00ff',\n    'gainsboro':'#dcdcdc',\n    'ghostwhite':'#f8f8ff',\n    'gold':'#ffd700',\n    'goldenrod':'#daa520',\n    'gray':'#808080',\n    'grey':'#808080',\n    'green':'#008000',\n    'greenyellow':'#adff2f',\n    'honeydew':'#f0fff0',\n    'hotpink':'#ff69b4',\n    'indianred':'#cd5c5c',\n    'indigo':'#4b0082',\n    'ivory':'#fffff0',\n    'khaki':'#f0e68c',\n    'lavender':'#e6e6fa',\n    'lavenderblush':'#fff0f5',\n    'lawngreen':'#7cfc00',\n    'lemonchiffon':'#fffacd',\n    'lightblue':'#add8e6',\n    'lightcoral':'#f08080',\n    'lightcyan':'#e0ffff',\n    'lightgoldenrodyellow':'#fafad2',\n    'lightgray':'#d3d3d3',\n    'lightgrey':'#d3d3d3',\n    'lightgreen':'#90ee90',\n    'lightpink':'#ffb6c1',\n    'lightsalmon':'#ffa07a',\n    'lightseagreen':'#20b2aa',\n    'lightskyblue':'#87cefa',\n    'lightslategray':'#778899',\n    'lightslategrey':'#778899',\n    'lightsteelblue':'#b0c4de',\n    'lightyellow':'#ffffe0',\n    'lime':'#00ff00',\n    'limegreen':'#32cd32',\n    'linen':'#faf0e6',\n    'magenta':'#ff00ff',\n    'maroon':'#800000',\n    'mediumaquamarine':'#66cdaa',\n    'mediumblue':'#0000cd',\n    'mediumorchid':'#ba55d3',\n    'mediumpurple':'#9370d8',\n    'mediumseagreen':'#3cb371',\n    'mediumslateblue':'#7b68ee',\n    'mediumspringgreen':'#00fa9a',\n    'mediumturquoise':'#48d1cc',\n    'mediumvioletred':'#c71585',\n    'midnightblue':'#191970',\n    'mintcream':'#f5fffa',\n    'mistyrose':'#ffe4e1',\n    'moccasin':'#ffe4b5',\n    'navajowhite':'#ffdead',\n    'navy':'#000080',\n    'oldlace':'#fdf5e6',\n    'olive':'#808000',\n    'olivedrab':'#6b8e23',\n    'orange':'#ffa500',\n    'orangered':'#ff4500',\n    'orchid':'#da70d6',\n    'palegoldenrod':'#eee8aa',\n    'palegreen':'#98fb98',\n    'paleturquoise':'#afeeee',\n    'palevioletred':'#d87093',\n    'papayawhip':'#ffefd5',\n    'peachpuff':'#ffdab9',\n    'peru':'#cd853f',\n    'pink':'#ffc0cb',\n    'plum':'#dda0dd',\n    'powderblue':'#b0e0e6',\n    'purple':'#800080',\n    'rebeccapurple':'#663399',\n    'red':'#ff0000',\n    'rosybrown':'#bc8f8f',\n    'royalblue':'#4169e1',\n    'saddlebrown':'#8b4513',\n    'salmon':'#fa8072',\n    'sandybrown':'#f4a460',\n    'seagreen':'#2e8b57',\n    'seashell':'#fff5ee',\n    'sienna':'#a0522d',\n    'silver':'#c0c0c0',\n    'skyblue':'#87ceeb',\n    'slateblue':'#6a5acd',\n    'slategray':'#708090',\n    'slategrey':'#708090',\n    'snow':'#fffafa',\n    'springgreen':'#00ff7f',\n    'steelblue':'#4682b4',\n    'tan':'#d2b48c',\n    'teal':'#008080',\n    'thistle':'#d8bfd8',\n    'tomato':'#ff6347',\n    'turquoise':'#40e0d0',\n    'violet':'#ee82ee',\n    'wheat':'#f5deb3',\n    'white':'#ffffff',\n    'whitesmoke':'#f5f5f5',\n    'yellow':'#ffff00',\n    'yellowgreen':'#9acd32'\n};","export default {\n    length: {\n        'm': 1,\n        'cm': 0.01,\n        'mm': 0.001,\n        'in': 0.0254,\n        'px': 0.0254 / 96,\n        'pt': 0.0254 / 72,\n        'pc': 0.0254 / 72 * 12\n    },\n    duration: {\n        's': 1,\n        'ms': 0.001\n    },\n    angle: {\n        'rad': 1 / (2 * Math.PI),\n        'deg': 1 / 360,\n        'grad': 1 / 400,\n        'turn': 1\n    }\n};","import colors from './colors';\nimport unitConversions from './unit-conversions';\n\nexport default { colors, unitConversions };\n","class Node {\n    constructor() {\n        this.parent = null;\n        this.visibilityBlocks = undefined;\n        this.nodeVisible = undefined;\n        this.rootNode = null;\n        this.parsed = null;\n\n        const self = this;\n        Object.defineProperty(this, 'currentFileInfo', {\n            get: function() { return self.fileInfo(); }\n        });\n        Object.defineProperty(this, 'index', {\n            get: function() { return self.getIndex(); }\n        });\n\n    }\n\n    setParent(nodes, parent) {\n        function set(node) {\n            if (node && node instanceof Node) {\n                node.parent = parent;\n            }\n        }\n        if (Array.isArray(nodes)) {\n            nodes.forEach(set);\n        }\n        else {\n            set(nodes);\n        }\n    }\n\n    getIndex() {\n        return this._index || (this.parent && this.parent.getIndex()) || 0;\n    }\n\n    fileInfo() {\n        return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\n    }\n\n    isRulesetLike() {\n        return false;\n    }\n\n    toCSS(context) {\n        const strs = [];\n        this.genCSS(context, {\n            add: function(chunk, fileInfo, index) {\n                strs.push(chunk);\n            },\n            isEmpty: function () {\n                return strs.length === 0;\n            }\n        });\n        return strs.join('');\n    }\n\n    genCSS(context, output) {\n        output.add(this.value);\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    eval() { return this; }\n\n    _operate(context, op, a, b) {\n        switch (op) {\n            case '+': return a + b;\n            case '-': return a - b;\n            case '*': return a * b;\n            case '/': return a / b;\n        }\n    }\n\n    fround(context, value) {\n        const precision = context && context.numPrecision;\n        // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\n        return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\n    }\n\n    // Returns true if this node represents root of ast imported by reference\n    blocksVisibility() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        return this.visibilityBlocks !== 0;\n    }\n\n    addVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks + 1;\n    }\n\n    removeVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks - 1;\n    }\n\n    // Turns on node visibility - if called node will be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureVisibility() {\n        this.nodeVisible = true;\n    }\n\n    // Turns off node visibility - if called node will NOT be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureInvisibility() {\n        this.nodeVisible = false;\n    }\n\n    // return values:\n    // false - the node must not be visible\n    // true - the node must be visible\n    // undefined or null - the node has the same visibility as its parent\n    isVisible() {\n        return this.nodeVisible;\n    }\n\n    visibilityInfo() {\n        return {\n            visibilityBlocks: this.visibilityBlocks,\n            nodeVisible: this.nodeVisible\n        };\n    }\n\n    copyVisibilityInfo(info) {\n        if (!info) {\n            return;\n        }\n        this.visibilityBlocks = info.visibilityBlocks;\n        this.nodeVisible = info.nodeVisible;\n    }\n}\n\nNode.compare = (a, b) => {\n    /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n    if ((a.compare) &&\n        // for \"symmetric results\" force toCSS-based comparison\n        // of Quoted or Anonymous if either value is one of those\n        !(b.type === 'Quoted' || b.type === 'Anonymous')) {\n        return a.compare(b);\n    } else if (b.compare) {\n        return -b.compare(a);\n    } else if (a.type !== b.type) {\n        return undefined;\n    }\n\n    a = a.value;\n    b = b.value;\n    if (!Array.isArray(a)) {\n        return a === b ? 0 : undefined;\n    }\n    if (a.length !== b.length) {\n        return undefined;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (Node.compare(a[i], b[i]) !== 0) {\n            return undefined;\n        }\n    }\n    return 0;\n};\n\nNode.numericCompare = (a, b) => a  <  b ? -1\n    : a === b ?  0\n    : a  >  b ?  1 : undefined;\nexport default Node;\n","import Node from './node';\nimport colors from '../data/colors';\n\n//\n// RGB Colors - #ff0014, #eee\n//\nclass Color extends Node {\n    constructor(rgb, a, originalForm) {\n        const self = this;\n        //\n        // The end goal here, is to parse the arguments\n        // into an integer triplet, such as `128, 255, 0`\n        //\n        // This facilitates operations and conversions.\n        //\n        if (Array.isArray(rgb)) {\n            this.rgb = rgb;\n        } else if (rgb.length >= 6) {\n            this.rgb = [];\n            rgb.match(/.{2}/g).map((c, i) => {\n                if (i < 3) {\n                    self.rgb.push(parseInt(c, 16));\n                } else {\n                    self.alpha = (parseInt(c, 16)) / 255;\n                }\n            });\n        } else {\n            this.rgb = [];\n            rgb.split('').map((c, i) => {\n                if (i < 3) {\n                    self.rgb.push(parseInt(c + c, 16));\n                } else {\n                    self.alpha = (parseInt(c + c, 16)) / 255;\n                }\n            });\n        }\n        this.alpha = this.alpha || (typeof a === 'number' ? a : 1);\n        if (typeof originalForm !== 'undefined') {\n            this.value = originalForm;\n        }\n    }\n\n    luma() {\n        let r = this.rgb[0] / 255;\n        let g = this.rgb[1] / 255;\n        let b = this.rgb[2] / 255;\n\n        r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n        g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n        b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    }\n\n    toCSS(context, doNotCompress) {\n        const compress = context && context.compress && !doNotCompress;\n        let color;\n        let alpha;\n        let colorFunction;\n        let args = [];\n\n        // `value` is set if this color was originally\n        // converted from a named color string so we need\n        // to respect this and try to output named color too.\n        alpha = this.fround(context, this.alpha);\n\n        if (this.value) {\n            if (this.value.indexOf('rgb') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'rgba';\n                }\n            } else if (this.value.indexOf('hsl') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'hsla';\n                } else {\n                    colorFunction = 'hsl';\n                }\n            } else {\n                return this.value;\n            }\n        } else {\n            if (alpha < 1) {\n                colorFunction = 'rgba';\n            }\n        }\n\n        switch (colorFunction) {\n            case 'rgba':\n                args = this.rgb.map(c => clamp(Math.round(c), 255)).concat(clamp(alpha, 1));\n                break;\n            case 'hsla':\n                args.push(clamp(alpha, 1));\n            case 'hsl':\n                color = this.toHSL();\n                args = [\n                    this.fround(context, color.h),\n                    `${this.fround(context, color.s * 100)}%`,\n                    `${this.fround(context, color.l * 100)}%`\n                ].concat(args);\n        }\n\n        if (colorFunction) {\n            // Values are capped between `0` and `255`, rounded and zero-padded.\n            return `${colorFunction}(${args.join(`,${compress ? '' : ' '}`)})`;\n        }\n\n        color = this.toRGB();\n\n        if (compress) {\n            const splitcolor = color.split('');\n\n            // Convert color to short format\n            if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n                color = `#${splitcolor[1]}${splitcolor[3]}${splitcolor[5]}`;\n            }\n        }\n\n        return color;\n    }\n\n    //\n    // Operations have to be done per-channel, if not,\n    // channels will spill onto each other. Once we have\n    // our result, in the form of an integer triplet,\n    // we create a new Color node to hold the result.\n    //\n    operate(context, op, other) {\n        const rgb = new Array(3);\n        const alpha = this.alpha * (1 - other.alpha) + other.alpha;\n        for (let c = 0; c < 3; c++) {\n            rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n        }\n        return new Color(rgb, alpha);\n    }\n\n    toRGB() {\n        return toHex(this.rgb);\n    }\n\n    toHSL() {\n        const r = this.rgb[0] / 255;\n        const g = this.rgb[1] / 255;\n        const b = this.rgb[2] / 255;\n        const a = this.alpha;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h;\n        let s;\n        const l = (max + min) / 2;\n        const d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2;               break;\n                case b: h = (r - g) / d + 4;               break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, l, a };\n    }\n\n    // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n    toHSV() {\n        const r = this.rgb[0] / 255;\n        const g = this.rgb[1] / 255;\n        const b = this.rgb[2] / 255;\n        const a = this.alpha;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h;\n        let s;\n        const v = max;\n\n        const d = max - min;\n        if (max === 0) {\n            s = 0;\n        } else {\n            s = d / max;\n        }\n\n        if (max === min) {\n            h = 0;\n        } else {\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, v, a };\n    }\n\n    toARGB() {\n        return toHex([this.alpha * 255].concat(this.rgb));\n    }\n\n    compare(x) {\n        return (x.rgb &&\n            x.rgb[0] === this.rgb[0] &&\n            x.rgb[1] === this.rgb[1] &&\n            x.rgb[2] === this.rgb[2] &&\n            x.alpha  === this.alpha) ? 0 : undefined;\n    }\n}\n\nColor.prototype.type = 'Color';\n\nfunction clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n}\n\nfunction toHex(v) {\n    return `#${v.map(c => {\n    c = clamp(Math.round(c), 255);\n    return (c < 16 ? '0' : '') + c.toString(16);\n}).join('')}`;\n}\n\nColor.fromKeyword = keyword => {\n    let c;\n    const key = keyword.toLowerCase();\n    if (colors.hasOwnProperty(key)) {\n        c = new Color(colors[key].slice(1));\n    }\n    else if (key === 'transparent') {\n        c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n        c.value = keyword;\n        return c;\n    }\n};\nexport default Color;\n","import Node from './node';\n\nclass Paren extends Node {\n    constructor(node) {\n        this.value = node;\n    }\n\n    genCSS(context, output) {\n        output.add('(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    }\n\n    eval(context) {\n        return new Paren(this.value.eval(context));\n    }\n}\n\nParen.prototype.type = 'Paren';\nexport default Paren;\n","import Node from './node';\n\nclass Combinator extends Node {\n    constructor(value) {\n        if (value === ' ') {\n            this.value = ' ';\n            this.emptyOrWhitespace = true;\n        } else {\n            this.value = value ? value.trim() : '';\n            this.emptyOrWhitespace = this.value === '';\n        }\n    }\n\n    genCSS(context, output) {\n        const spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\n        output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n    }\n}\n\nCombinator.prototype.type = 'Combinator';\nconst _noSpaceCombinators = {\n    '': true,\n    ' ': true,\n    '|': true\n};\nexport default Combinator;\n","import Node from './node';\nimport Paren from './paren';\nimport Combinator from './combinator';\n\nclass Element extends Node {\n    constructor(combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\n        this.combinator = combinator instanceof Combinator ?\n                          combinator : new Combinator(combinator);\n\n        if (typeof value === 'string') {\n            this.value = value.trim();\n        } else if (value) {\n            this.value = value;\n        } else {\n            this.value = '';\n        }\n        this.isVariable = isVariable;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.combinator, this);\n    }\n\n    accept(visitor) {\n        const value = this.value;\n        this.combinator = visitor.visit(this.combinator);\n        if (typeof value === 'object') {\n            this.value = visitor.visit(value);\n        }\n    }\n\n    eval(context) {\n        return new Element(this.combinator,\n                                 this.value.eval ? this.value.eval(context) : this.value,\n                                 this.isVariable,\n                                 this.getIndex(),\n                                 this.fileInfo(), this.visibilityInfo());\n    }\n\n    clone() {\n        return new Element(this.combinator,\n            this.value,\n            this.isVariable,\n            this.getIndex(),\n            this.fileInfo(), this.visibilityInfo());\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\n    }\n\n    toCSS(context = {}) {\n        let value = this.value;\n        const firstSelector = context.firstSelector;\n        if (value instanceof Paren) {\n            // selector in parens should not be affected by outer selector\n            // flags (breaks only interpolated selectors - see #1973)\n            context.firstSelector = true;\n        }\n        value = value.toCSS ? value.toCSS(context) : value;\n        context.firstSelector = firstSelector;\n        if (value === '' && this.combinator.value.charAt(0) === '&') {\n            return '';\n        } else {\n            return this.combinator.toCSS(context) + value;\n        }\n    }\n}\n\nElement.prototype.type = 'Element';\nexport default Element;\n","\nexport const Math = {\n    ALWAYS: 0,\n    PARENS_DIVISION: 1,\n    PARENS: 2,\n    STRICT_LEGACY: 3\n};\n\nexport const RewriteUrls = {\n    OFF: 0,\n    LOCAL: 1,\n    ALL: 2\n};","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","/* jshint proto: true */\nimport * as Constants from './constants';\nimport CloneHelper from 'clone';\n\nexport function getLocation(index, inputStream) {\n    let n = index + 1;\n    let line = null;\n    let column = -1;\n\n    while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n        column++;\n    }\n\n    if (typeof index === 'number') {\n        line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n    }\n\n    return {\n        line,\n        column\n    };\n}\nexport function copyArray(arr) {\n    let i;\n    const length = arr.length;\n    const copy = new Array(length);\n\n    for (i = 0; i < length; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nexport function clone(obj) {\n    const cloned = {};\n    for (const prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            cloned[prop] = obj[prop];\n        }\n    }\n    return cloned;\n}\nexport function copyOptions(obj1, obj2) {\n    if (obj2 && obj2._defaults) {\n        return obj2;\n    }\n    const opts = utils.defaults(obj1, obj2);\n    if (opts.strictMath) {\n        opts.math = Constants.Math.STRICT_LEGACY;\n    }\n    // Back compat with changed relativeUrls option\n    if (opts.relativeUrls) {\n        opts.rewriteUrls = Constants.RewriteUrls.ALL;\n    }\n    if (typeof opts.math === 'string') {\n        switch (opts.math.toLowerCase()) {\n            case 'always':\n                opts.math = Constants.Math.ALWAYS;\n                break;\n            case 'parens-division':\n                opts.math = Constants.Math.PARENS_DIVISION;\n                break;\n            case 'strict':\n            case 'parens':\n                opts.math = Constants.Math.PARENS;\n                break;\n            case 'strict-legacy':\n                opts.math = Constants.Math.STRICT_LEGACY;\n        }\n    }\n    if (typeof opts.rewriteUrls === 'string') {\n        switch (opts.rewriteUrls.toLowerCase()) {\n            case 'off':\n                opts.rewriteUrls = Constants.RewriteUrls.OFF;\n                break;\n            case 'local':\n                opts.rewriteUrls = Constants.RewriteUrls.LOCAL;\n                break;\n            case 'all':\n                opts.rewriteUrls = Constants.RewriteUrls.ALL;\n                break;\n        }\n    }\n    return opts;\n}\nexport function defaults(obj1, obj2) {\n    let newObj = obj2 || {};\n    if (!obj2._defaults) {\n        newObj = {};\n        const defaults = CloneHelper(obj1);\n        newObj._defaults = defaults;\n        const cloned = obj2 ? CloneHelper(obj2) : {};\n        Object.assign(newObj, defaults, cloned);\n    }\n    return newObj;\n}\nexport function merge(obj1, obj2) {\n    for (const prop in obj2) {\n        if (obj2.hasOwnProperty(prop)) {\n            obj1[prop] = obj2[prop];\n        }\n    }\n    return obj1;\n}\nexport function flattenArray(arr, result = []) {\n    for (let i = 0, length = arr.length; i < length; i++) {\n        const value = arr[i];\n        if (Array.isArray(value)) {\n            utils.flattenArray(value, result);\n        } else {\n            if (value !== undefined) {\n                result.push(value);\n            }\n        }\n    }\n    return result;\n}","import * as utils from './utils';\n/**\n * This is a centralized class of any error that could be thrown internally (mostly by the parser).\n * Besides standard .message it keeps some additional data like a path to the file where the error\n * occurred along with line and column numbers.\n *\n * @class\n * @extends Error\n * @type {module.LessError}\n *\n * @prop {string} type\n * @prop {string} filename\n * @prop {number} index\n * @prop {number} line\n * @prop {number} column\n * @prop {number} callLine\n * @prop {number} callExtract\n * @prop {string[]} extract\n *\n * @param {Object} e              - An error object to wrap around or just a descriptive object\n * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\n * @param {string} [currentFilename]\n */\nconst LessError = function LessError(e, fileContentMap, currentFilename) {\n    Error.call(this);\n\n    const filename = e.filename || currentFilename;\n\n    this.message = e.message;\n    this.stack = e.stack;\n\n    if (fileContentMap && filename) {\n        const input = fileContentMap.contents[filename];\n        const loc = utils.getLocation(e.index, input);\n        const line = loc.line;\n        const col  = loc.column;\n        const callLine = e.call && utils.getLocation(e.call, input).line;\n        const lines = input ? input.split('\\n') : '';\n\n        this.type = e.type || 'Syntax';\n        this.filename = filename;\n        this.index = e.index;\n        this.line = typeof line === 'number' ? line + 1 : null;\n        this.column = col;\n\n        if (!this.line && this.stack) {\n            const found = this.stack.match(/(<anonymous>|Function):(\\d+):(\\d+)/);\n\n            if (found) {\n                if (found[2]) {\n                    this.line = parseInt(found[2]) - 2;\n                }\n                if (found[3]) {\n                    this.column = parseInt(found[3]);\n                }\n            }\n        }\n\n        this.callLine = callLine + 1;\n        this.callExtract = lines[callLine];\n\n        this.extract = [\n            lines[this.line - 2],\n            lines[this.line - 1],\n            lines[this.line]\n        ];\n    }\n\n};\n\nif (typeof Object.create === 'undefined') {\n    const F = () => {};\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n} else {\n    LessError.prototype = Object.create(Error.prototype);\n}\n\nLessError.prototype.constructor = LessError;\n\n/**\n * An overridden version of the default Object.prototype.toString\n * which uses additional information to create a helpful message.\n *\n * @param {Object} options\n * @returns {string}\n */\nLessError.prototype.toString = function(options = {}) {\n    let message = '';\n    const extract = this.extract || [];\n    let error = [];\n    let stylize = str => str;\n    if (options.stylize) {\n        const type = typeof options.stylize;\n        if (type !== 'function') {\n            throw Error(`options.stylize should be a function, got a ${type}!`);\n        }\n        stylize = options.stylize;\n    }\n\n    if (this.line !== null) {\n        if (typeof extract[0] === 'string') {\n            error.push(stylize(`${this.line - 1} ${extract[0]}`, 'grey'));\n        }\n\n        if (typeof extract[1] === 'string') {\n            let errorTxt = `${this.line} `;\n            if (extract[1]) {\n                errorTxt += extract[1].slice(0, this.column) +\n                    stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\n                        extract[1].slice(this.column + 1), 'red'), 'inverse');\n            }\n            error.push(errorTxt);\n        }\n\n        if (typeof extract[2] === 'string') {\n            error.push(stylize(`${this.line + 1} ${extract[2]}`, 'grey'));\n        }\n        error = `${error.join('\\n') + stylize('', 'reset')}\\n`;\n    }\n\n    message += stylize(`${this.type}Error: ${this.message}`, 'red');\n    if (this.filename) {\n        message += stylize(' in ', 'red') + this.filename;\n    }\n    if (this.line) {\n        message += stylize(` on line ${this.line}, column ${this.column + 1}:`, 'grey');\n    }\n\n    message += `\\n${error}`;\n\n    if (this.callLine) {\n        message += `${stylize('from ', 'red') + (this.filename || '')}/n`;\n        message += `${stylize(this.callLine, 'grey')} ${this.callExtract}/n`;\n    }\n\n    return message;\n};\n\nexport default LessError;","import Node from './node';\nimport Element from './element';\nimport LessError from '../less-error';\n\nclass Selector extends Node {\n    constructor(elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n        this.extendList = extendList;\n        this.condition = condition;\n        this.evaldCondition = !condition;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.elements = this.getElements(elements);\n        this.mixinElements_ = undefined;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.elements, this);\n    }\n\n    accept(visitor) {\n        if (this.elements) {\n            this.elements = visitor.visitArray(this.elements);\n        }\n        if (this.extendList) {\n            this.extendList = visitor.visitArray(this.extendList);\n        }\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    }\n\n    createDerived(elements, extendList, evaldCondition) {\n        elements = this.getElements(elements);\n        const newSelector = new Selector(elements, extendList || this.extendList,\n            null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n        newSelector.evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\n        newSelector.mediaEmpty = this.mediaEmpty;\n        return newSelector;\n    }\n\n    getElements(els) {\n        if (!els) {\n            return [new Element('', '&', false, this._index, this._fileInfo)];\n        }\n        if (typeof els === 'string') {\n            this.parse.parseNode(\n                els, \n                ['selector'],\n                this._index, \n                this._fileInfo, \n                function(err, result) {\n                    if (err) {\n                        throw new LessError({\n                            index: err.index,\n                            message: err.message\n                        }, this.parse.imports, this._fileInfo.filename);\n                    }\n                    els = result[0].elements;\n                });\n        }\n        return els;\n    }\n\n    createEmptySelectors() {\n        const el = new Element('', '&', false, this._index, this._fileInfo);\n        const sels = [new Selector([el], null, null, this._index, this._fileInfo)];\n        sels[0].mediaEmpty = true;\n        return sels;\n    }\n\n    match(other) {\n        const elements = this.elements;\n        const len = elements.length;\n        let olen;\n        let i;\n\n        other = other.mixinElements();\n        olen = other.length;\n        if (olen === 0 || len < olen) {\n            return 0;\n        } else {\n            for (i = 0; i < olen; i++) {\n                if (elements[i].value !== other[i]) {\n                    return 0;\n                }\n            }\n        }\n\n        return olen; // return number of matched elements\n    }\n\n    mixinElements() {\n        if (this.mixinElements_) {\n            return this.mixinElements_;\n        }\n\n        let elements = this.elements.map( v => v.combinator.value + (v.value.value || v.value)).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\n\n        if (elements) {\n            if (elements[0] === '&') {\n                elements.shift();\n            }\n        } else {\n            elements = [];\n        }\n\n        return (this.mixinElements_ = elements);\n    }\n\n    isJustParentSelector() {\n        return !this.mediaEmpty &&\n            this.elements.length === 1 &&\n            this.elements[0].value === '&' &&\n            (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n    }\n\n    eval(context) {\n        const evaldCondition = this.condition && this.condition.eval(context);\n        let elements = this.elements;\n        let extendList = this.extendList;\n\n        elements = elements && elements.map(e => e.eval(context));\n        extendList = extendList && extendList.map(extend => extend.eval(context));\n\n        return this.createDerived(elements, extendList, evaldCondition);\n    }\n\n    genCSS(context, output) {\n        let i;\n        let element;\n        if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\n            output.add(' ', this.fileInfo(), this.getIndex());\n        }\n        for (i = 0; i < this.elements.length; i++) {\n            element = this.elements[i];\n            element.genCSS(context, output);\n        }\n    }\n\n    getIsOutput() {\n        return this.evaldCondition;\n    }\n}\n\nSelector.prototype.type = 'Selector';\nexport default Selector;\n","import Node from './node';\n\nclass Value extends Node {\n    constructor(value) {\n        if (!value) {\n            throw new Error('Value requires an array argument');\n        }\n        if (!Array.isArray(value)) {\n            this.value = [ value ];\n        }\n        else {\n            this.value = value;\n        }\n    }\n\n    accept(visitor) {\n        if (this.value) {\n            this.value = visitor.visitArray(this.value);\n        }\n    }\n\n    eval(context) {\n        if (this.value.length === 1) {\n            return this.value[0].eval(context);\n        } else {\n            return new Value(this.value.map(v => v.eval(context)));\n        }\n    }\n\n    genCSS(context, output) {\n        let i;\n        for (i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (i + 1 < this.value.length) {\n                output.add((context && context.compress) ? ',' : ', ');\n            }\n        }\n    }\n}\n\nValue.prototype.type = 'Value';\nexport default Value;\n","import Node from './node';\n\nclass Keyword extends Node {\n    constructor(value) { this.value = value; }\n\n    genCSS(context, output) {\n        if (this.value === '%') { throw { type: 'Syntax', message: 'Invalid % without number' }; }\n        output.add(this.value);\n    }\n}\n\nKeyword.prototype.type = 'Keyword';\n\nKeyword.True = new Keyword('true');\nKeyword.False = new Keyword('false');\n\nexport default Keyword;\n","import Node from './node';\n\nclass Anonymous extends Node {\n    constructor(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n        this.value = value;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.mapLines = mapLines;\n        this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n        this.allowRoot = true;\n        this.copyVisibilityInfo(visibilityInfo);\n    }\n\n    eval() {\n        return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n    }\n\n    compare(other) {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    }\n\n    isRulesetLike() {\n        return this.rulesetLike;\n    }\n\n    genCSS(context, output) {\n        this.nodeVisible = Boolean(this.value);\n        if (this.nodeVisible) {\n            output.add(this.value, this._fileInfo, this._index, this.mapLines);\n        }\n    }\n}\n\nAnonymous.prototype.type = 'Anonymous';\nexport default Anonymous;\n","import Node from './node';\nimport Value from './value';\nimport Keyword from './keyword';\nimport Anonymous from './anonymous';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\n\nclass Declaration extends Node {\n    constructor(name, value, important, merge, index, currentFileInfo, inline, variable) {\n        this.name = name;\n        this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\n        this.important = important ? ` ${important.trim()}` : '';\n        this.merge = merge;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.inline = inline || false;\n        this.variable = (variable !== undefined) ? variable\n            : (name.charAt && (name.charAt(0) === '@'));\n        this.allowRoot = true;\n        this.setParent(this.value, this);\n    }\n\n    genCSS(context, output) {\n        output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n        try {\n            this.value.genCSS(context, output);\n        }\n        catch (e) {\n            e.index = this._index;\n            e.filename = this._fileInfo.filename;\n            throw e;\n        }\n        output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\n    }\n\n    eval(context) {\n        let mathBypass = false;\n        let prevMath;\n        let name = this.name;\n        let evaldValue;\n        let variable = this.variable;\n        if (typeof name !== 'string') {\n            // expand 'primitive' name directly to get\n            // things faster (~10% for benchmark.less):\n            name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                    name[0].value : evalName(context, name);\n            variable = false; // never treat expanded interpolation as new variable name\n        }\n\n        // @todo remove when parens-division is default\n        if (name === 'font' && context.math === MATH.ALWAYS) {\n            mathBypass = true;\n            prevMath = context.math;\n            context.math = MATH.PARENS_DIVISION;\n        }\n        try {\n            context.importantScope.push({});\n            evaldValue = this.value.eval(context);\n\n            if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n                throw { message: 'Rulesets cannot be evaluated on a property.',\n                    index: this.getIndex(), filename: this.fileInfo().filename };\n            }\n            let important = this.important;\n            const importantResult = context.importantScope.pop();\n            if (!important && importantResult.important) {\n                important = importantResult.important;\n            }\n\n            return new Declaration(name,\n                              evaldValue,\n                              important,\n                              this.merge,\n                              this.getIndex(), this.fileInfo(), this.inline,\n                                  variable);\n        }\n        catch (e) {\n            if (typeof e.index !== 'number') {\n                e.index = this.getIndex();\n                e.filename = this.fileInfo().filename;\n            }\n            throw e;\n        }\n        finally {\n            if (mathBypass) {\n                context.math = prevMath;\n            }\n        }\n    }\n\n    makeImportant() {\n        return new Declaration(this.name,\n                              this.value,\n                              '!important',\n                              this.merge,\n                              this.getIndex(), this.fileInfo(), this.inline);\n    }\n}\n\nfunction evalName(context, name) {\n    let value = '';\n    let i;\n    const n = name.length;\n    const output = {add: function (s) {value += s;}};\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\n\nDeclaration.prototype.type = 'Declaration';\nexport default Declaration;","const debugInfo = (context, ctx, lineSeparator) => {\n    let result = '';\n    if (context.dumpLineNumbers && !context.compress) {\n        switch (context.dumpLineNumbers) {\n            case 'comments':\n                result = debugInfo.asComment(ctx);\n                break;\n            case 'mediaquery':\n                result = debugInfo.asMediaQuery(ctx);\n                break;\n            case 'all':\n                result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);\n                break;\n        }\n    }\n    return result;\n};\n\ndebugInfo.asComment = ctx => `/* line ${ctx.debugInfo.lineNumber}, ${ctx.debugInfo.fileName} */\\n`;\n\ndebugInfo.asMediaQuery = ctx => {\n    let filenameWithProtocol = ctx.debugInfo.fileName;\n    if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n        filenameWithProtocol = `file://${filenameWithProtocol}`;\n    }\n    return `@media -sass-debug-info{filename{font-family:${filenameWithProtocol.replace(/([.:\\/\\\\])/g, a => {\n    if (a == '\\\\') {\n        a = '\\/';\n    }\n    return `\\\\${a}`;\n})}}line{font-family:\\\\00003${ctx.debugInfo.lineNumber}}}\\n`;\n};\n\nexport default debugInfo;\n","import Node from './node';\nimport getDebugInfo from './debug-info';\n\nclass Comment extends Node {\n    constructor(value, isLineComment, index, currentFileInfo) {\n        this.value = value;\n        this.isLineComment = isLineComment;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.allowRoot = true;\n    }\n\n    genCSS(context, output) {\n        if (this.debugInfo) {\n            output.add(getDebugInfo(context, this), this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n    }\n\n    isSilent(context) {\n        const isCompressed = context.compress && this.value[2] !== '!';\n        return this.isLineComment || isCompressed;\n    }\n}\n\nComment.prototype.type = 'Comment';\nexport default Comment;\n","const contexts = {};\nexport default contexts;\nimport * as Constants from './constants';\n\nconst copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) { return; }\n\n    for (let i = 0; i < propertiesToCopy.length; i++) {\n        if (original.hasOwnProperty(propertiesToCopy[i])) {\n            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n        }\n    }\n};\n\n/*\n parse is used whilst parsing\n */\nconst parseCopyProperties = [\n    // options\n    'paths',            // option - unmodified - paths to search for imports on\n    'rewriteUrls',      // option - whether to adjust URL's to be relative\n    'rootpath',         // option - rootpath to append to URL's\n    'strictImports',    // option -\n    'insecure',         // option - whether to allow imports from insecure ssl hosts\n    'dumpLineNumbers',  // option - whether to dump line numbers\n    'compress',         // option - whether to compress\n    'syncImport',       // option - whether to import synchronously\n    'chunkInput',       // option - whether to chunk input. more performant but causes parse issues.\n    'mime',             // browser only - mime type for sheet import\n    'useFileCache',     // browser only - whether to use the per file session cache\n    // context\n    'processImports',   // option & context - whether to process imports. if false then imports will not be imported.\n                        // Used by the import manager to stop multiple import visitors being created.\n    'pluginManager'     // Used as the plugin manager for the session\n];\n\ncontexts.Parse = function(options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n};\n\nconst evalCopyProperties = [\n    'paths',             // additional include paths\n    'compress',          // whether to compress\n    'ieCompat',          // whether to enforce IE compatibility (IE8 data-uri)\n    'math',              // whether math has to be within parenthesis\n    'strictUnits',       // whether units need to evaluate correctly\n    'sourceMap',         // whether to output a source map\n    'importMultiple',    // whether we are currently importing multiple copies\n    'urlArgs',           // whether to add args into url tokens\n    'javascriptEnabled', // option - whether Inline JavaScript is enabled. if undefined, defaults to false\n    'pluginManager',     // Used as the plugin manager for the session\n    'importantScope',    // used to bubble up !important statements\n    'rewriteUrls'        // option - whether to adjust URL's to be relative\n];\n\ncontexts.Eval = function(options, frames) {\n    copyFromOriginal(options, this, evalCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n\n    this.frames = frames || [];\n    this.importantScope = this.importantScope || [];\n};\n\ncontexts.Eval.prototype.enterCalc = function () {\n    if (!this.calcStack) {\n        this.calcStack = [];\n    }\n    this.calcStack.push(true);\n    this.inCalc = true;\n};\n\ncontexts.Eval.prototype.exitCalc = function () {\n    this.calcStack.pop();\n    if (!this.calcStack) {\n        this.inCalc = false;\n    }\n};\n\ncontexts.Eval.prototype.inParenthesis = function () {\n    if (!this.parensStack) {\n        this.parensStack = [];\n    }\n    this.parensStack.push(true);\n};\n\ncontexts.Eval.prototype.outOfParenthesis = function () {\n    this.parensStack.pop();\n};\n\ncontexts.Eval.prototype.inCalc = false;\ncontexts.Eval.prototype.mathOn = true;\ncontexts.Eval.prototype.isMathOn = function (op) {\n    if (!this.mathOn) {\n        return false;\n    }\n    if (op === '/' && this.math !== Constants.Math.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n        return false;\n    }\n    if (this.math > Constants.Math.PARENS_DIVISION) {\n        return this.parensStack && this.parensStack.length;\n    }\n    return true;\n};\n\ncontexts.Eval.prototype.pathRequiresRewrite = function (path) {\n    const isRelative = this.rewriteUrls === Constants.RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n\n    return isRelative(path);\n};\n\ncontexts.Eval.prototype.rewritePath = function (path, rootpath) {\n    let newPath;\n\n    rootpath = rootpath || '';\n    newPath = this.normalizePath(rootpath + path);\n\n    // If a path was explicit relative and the rootpath was not an absolute path\n    // we must ensure that the new path is also explicit relative.\n    if (isPathLocalRelative(path) &&\n        isPathRelative(rootpath) &&\n        isPathLocalRelative(newPath) === false) {\n        newPath = `./${newPath}`;\n    }\n\n    return newPath;\n};\n\ncontexts.Eval.prototype.normalizePath = path => {\n    const segments = path.split('/').reverse();\n    let segment;\n\n    path = [];\n    while (segments.length !== 0) {\n        segment = segments.pop();\n        switch ( segment ) {\n            case '.':\n                break;\n            case '..':\n                if ((path.length === 0) || (path[path.length - 1] === '..')) {\n                    path.push( segment );\n                } else {\n                    path.pop();\n                }\n                break;\n            default:\n                path.push(segment);\n                break;\n        }\n    }\n\n    return path.join('/');\n};\n\nfunction isPathRelative(path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n}\n\nfunction isPathLocalRelative(path) {\n    return path.charAt(0) === '.';\n}\n\n// todo - do the same for the toCSS ?\n","function makeRegistry( base ) {\n    return {\n        _data: {},\n        add: function(name, func) {\n            // precautionary case conversion, as later querying of\n            // the registry by function-caller uses lower case as well.\n            name = name.toLowerCase();\n\n            if (this._data.hasOwnProperty(name)) {\n                // TODO warn\n            }\n            this._data[name] = func;\n        },\n        addMultiple: function(functions) {\n            Object.keys(functions).forEach(\n                name => {\n                    this.add(name, functions[name]);\n                });\n        },\n        get: function(name) {\n            return this._data[name] || ( base && base.get( name ));\n        },\n        getLocalFunctions: function() {\n            return this._data;\n        },\n        inherit: function() {\n            return makeRegistry( this );\n        },\n        create: function(base) {\n            return makeRegistry(base);\n        }\n    };\n}\n\nexport default makeRegistry( null );","import Keyword from '../tree/keyword';\n\nconst defaultFunc = {\n    eval: function () {\n        const v = this.value_;\n        const e = this.error_;\n        if (e) {\n            throw e;\n        }\n        if (v != null) {\n            return v ? Keyword.True : Keyword.False;\n        }\n    },\n    value: function (v) {\n        this.value_ = v;\n    },\n    error: function (e) {\n        this.error_ = e;\n    },\n    reset: function () {\n        this.value_ = this.error_ = null;\n    }\n};\n\nexport default { 'default': defaultFunc.eval.bind(defaultFunc) };\n","import Node from './node';\nimport Declaration from './declaration';\nimport Keyword from './keyword';\nimport Comment from './comment';\nimport Paren from './paren';\nimport Selector from './selector';\nimport Element from './element';\nimport Anonymous from './anonymous';\nimport contexts from '../contexts';\nimport globalFunctionRegistry from '../functions/function-registry';\nimport defaultFunc from '../functions/default';\nimport getDebugInfo from './debug-info';\nimport * as utils from '../utils';\n\nclass Ruleset extends Node {\n    constructor(selectors, rules, strictImports, visibilityInfo) {\n        this.selectors = selectors;\n        this.rules = rules;\n        this._lookups = {};\n        this._variables = null;\n        this._properties = null;\n        this.strictImports = strictImports;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n\n        this.setParent(this.selectors, this);\n        this.setParent(this.rules, this);\n\n    }\n\n    isRulesetLike() {\n        return true;\n    }\n\n    accept(visitor) {\n        if (this.paths) {\n            this.paths = visitor.visitArray(this.paths, true);\n        } else if (this.selectors) {\n            this.selectors = visitor.visitArray(this.selectors);\n        }\n        if (this.rules && this.rules.length) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    }\n\n    eval(context) {\n        const that = this;\n        let selectors;\n        let selCnt;\n        let selector;\n        let i;\n        let hasVariable;\n        let hasOnePassingSelector = false;\n\n        if (this.selectors && (selCnt = this.selectors.length)) {\n            selectors = new Array(selCnt);\n            defaultFunc.error({\n                type: 'Syntax',\n                message: 'it is currently only allowed in parametric mixin guards,'\n            });\n\n            for (i = 0; i < selCnt; i++) {\n                selector = this.selectors[i].eval(context);\n                for (var j = 0; j < selector.elements.length; j++) {\n                    if (selector.elements[j].isVariable) {\n                        hasVariable = true;\n                        break;\n                    }\n                }\n                selectors[i] = selector;\n                if (selector.evaldCondition) {\n                    hasOnePassingSelector = true;\n                }\n            }\n\n            if (hasVariable) {\n                const toParseSelectors = new Array(selCnt);\n                for (i = 0; i < selCnt; i++) {\n                    selector = selectors[i];\n                    toParseSelectors[i] = selector.toCSS(context);\n                }\n                this.parse.parseNode(\n                    toParseSelectors.join(','),\n                    [\"selectors\"], \n                    selectors[0].getIndex(), \n                    selectors[0].fileInfo(), \n                    (err, result) => {\n                        if (result) {\n                            selectors = utils.flattenArray(result);\n                        }\n                    });\n            }\n\n            defaultFunc.reset();\n        } else {\n            hasOnePassingSelector = true;\n        }\n\n        let rules = this.rules ? utils.copyArray(this.rules) : null;\n        const ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\n        let rule;\n        let subRule;\n\n        ruleset.originalRuleset = this;\n        ruleset.root = this.root;\n        ruleset.firstRoot = this.firstRoot;\n        ruleset.allowImports = this.allowImports;\n\n        if (this.debugInfo) {\n            ruleset.debugInfo = this.debugInfo;\n        }\n\n        if (!hasOnePassingSelector) {\n            rules.length = 0;\n        }\n\n        // inherit a function registry from the frames stack when possible;\n        // otherwise from the global registry\n        ruleset.functionRegistry = (frames => {\n            let i = 0;\n            const n = frames.length;\n            let found;\n            for ( ; i !== n ; ++i ) {\n                found = frames[ i ].functionRegistry;\n                if ( found ) { return found; }\n            }\n            return globalFunctionRegistry;\n        })(context.frames).inherit();\n\n        // push the current ruleset to the frames stack\n        const ctxFrames = context.frames;\n        ctxFrames.unshift(ruleset);\n\n        // currrent selectors\n        let ctxSelectors = context.selectors;\n        if (!ctxSelectors) {\n            context.selectors = ctxSelectors = [];\n        }\n        ctxSelectors.unshift(this.selectors);\n\n        // Evaluate imports\n        if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n            ruleset.evalImports(context);\n        }\n\n        // Store the frames around mixin definitions,\n        // so they can be evaluated like closures when the time comes.\n        const rsRules = ruleset.rules;\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.evalFirst) {\n                rsRules[i] = rule.eval(context);\n            }\n        }\n\n        const mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n\n        // Evaluate mixin calls.\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.type === 'MixinCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).filter(r => {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope if the variable is\n                        // already there. consider returning false here\n                        // but we need a way to \"return\" variable from mixins\n                        return !(ruleset.variable(r.name));\n                    }\n                    return true;\n                });\n                rsRules.splice(...[i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            } else if (rule.type ===  'VariableCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).rules.filter(r => {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope at all\n                        return false;\n                    }\n                    return true;\n                });\n                rsRules.splice(...[i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (!rule.evalFirst) {\n                rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            // for rulesets, check if it is a css guard and can be removed\n            if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n                // check if it can be folded in (e.g. & where)\n                if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                    rsRules.splice(i--, 1);\n\n                    for (var j = 0; (subRule = rule.rules[j]); j++) {\n                        if (subRule instanceof Node) {\n                            subRule.copyVisibilityInfo(rule.visibilityInfo());\n                            if (!(subRule instanceof Declaration) || !subRule.variable) {\n                                rsRules.splice(++i, 0, subRule);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Pop the stack\n        ctxFrames.shift();\n        ctxSelectors.shift();\n\n        if (context.mediaBlocks) {\n            for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n                context.mediaBlocks[i].bubbleSelectors(selectors);\n            }\n        }\n\n        return ruleset;\n    }\n\n    evalImports(context) {\n        const rules = this.rules;\n        let i;\n        let importRules;\n        if (!rules) { return; }\n\n        for (i = 0; i < rules.length; i++) {\n            if (rules[i].type === 'Import') {\n                importRules = rules[i].eval(context);\n                if (importRules && (importRules.length || importRules.length === 0)) {\n                    rules.splice(...[i, 1].concat(importRules));\n                    i += importRules.length - 1;\n                } else {\n                    rules.splice(i, 1, importRules);\n                }\n                this.resetCache();\n            }\n        }\n    }\n\n    makeImportant() {\n        const result = new Ruleset(this.selectors, this.rules.map(r => {\n            if (r.makeImportant) {\n                return r.makeImportant();\n            } else {\n                return r;\n            }\n        }), this.strictImports, this.visibilityInfo());\n\n        return result;\n    }\n\n    matchArgs(args) {\n        return !args || args.length === 0;\n    }\n\n    // lets you call a css selector with a guard\n    matchCondition(args, context) {\n        const lastSelector = this.selectors[this.selectors.length - 1];\n        if (!lastSelector.evaldCondition) {\n            return false;\n        }\n        if (lastSelector.condition &&\n            !lastSelector.condition.eval(\n                new contexts.Eval(context,\n                    context.frames))) {\n            return false;\n        }\n        return true;\n    }\n\n    resetCache() {\n        this._rulesets = null;\n        this._variables = null;\n        this._properties = null;\n        this._lookups = {};\n    }\n\n    variables() {\n        if (!this._variables) {\n            this._variables = !this.rules ? {} : this.rules.reduce((hash, r) => {\n                if (r instanceof Declaration && r.variable === true) {\n                    hash[r.name] = r;\n                }\n                // when evaluating variables in an import statement, imports have not been eval'd\n                // so we need to go inside import statements.\n                // guard against root being a string (in the case of inlined less)\n                if (r.type === 'Import' && r.root && r.root.variables) {\n                    const vars = r.root.variables();\n                    for (const name in vars) {\n                        if (vars.hasOwnProperty(name)) {\n                            hash[name] = r.root.variable(name);\n                        }\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._variables;\n    }\n\n    properties() {\n        if (!this._properties) {\n            this._properties = !this.rules ? {} : this.rules.reduce((hash, r) => {\n                if (r instanceof Declaration && r.variable !== true) {\n                    const name = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\n                        r.name[0].value : r.name;\n                    // Properties don't overwrite as they can merge\n                    if (!hash[`$${name}`]) {\n                        hash[`$${name}`] = [ r ];\n                    }\n                    else {\n                        hash[`$${name}`].push(r);\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._properties;\n    }\n\n    variable(name) {\n        const decl = this.variables()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    }\n\n    property(name) {\n        const decl = this.properties()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    }\n\n    lastDeclaration() {\n        for (let i = this.rules.length; i > 0; i--) {\n            const decl = this.rules[i - 1];\n            if (decl instanceof Declaration) {\n                return this.parseValue(decl);\n            }\n        }\n    }\n\n    parseValue(toParse) {\n        const self = this;\n        function transformDeclaration(decl) {\n            if (decl.value instanceof Anonymous && !decl.parsed) {\n                if (typeof decl.value.value === 'string') {\n                    this.parse.parseNode(\n                        decl.value.value,\n                        ['value', 'important'], \n                        decl.value.getIndex(), \n                        decl.fileInfo(), \n                        (err, result) => {\n                            if (err) {\n                                decl.parsed = true;\n                            }\n                            if (result) {\n                                decl.value = result[0];\n                                decl.important = result[1] || '';\n                                decl.parsed = true;\n                            }\n                        });\n                } else {\n                    decl.parsed = true;\n                }\n\n                return decl;\n            }\n            else {\n                return decl;\n            }\n        }\n        if (!Array.isArray(toParse)) {\n            return transformDeclaration.call(self, toParse);\n        }\n        else {\n            const nodes = [];\n            toParse.forEach(n => {\n                nodes.push(transformDeclaration.call(self, n));\n            });\n            return nodes;\n        }\n    }\n\n    rulesets() {\n        if (!this.rules) { return []; }\n\n        const filtRules = [];\n        const rules = this.rules;\n        let i;\n        let rule;\n\n        for (i = 0; (rule = rules[i]); i++) {\n            if (rule.isRuleset) {\n                filtRules.push(rule);\n            }\n        }\n\n        return filtRules;\n    }\n\n    prependRule(rule) {\n        const rules = this.rules;\n        if (rules) {\n            rules.unshift(rule);\n        } else {\n            this.rules = [ rule ];\n        }\n        this.setParent(rule, this);\n    }\n\n    find(selector, self = this, filter) {\n        const rules = [];\n        let match;\n        let foundMixins;\n        const key = selector.toCSS();\n\n        if (key in this._lookups) { return this._lookups[key]; }\n\n        this.rulesets().forEach(rule => {\n            if (rule !== self) {\n                for (let j = 0; j < rule.selectors.length; j++) {\n                    match = selector.match(rule.selectors[j]);\n                    if (match) {\n                        if (selector.elements.length > match) {\n                            if (!filter || filter(rule)) {\n                                foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                                for (let i = 0; i < foundMixins.length; ++i) {\n                                    foundMixins[i].path.push(rule);\n                                }\n                                Array.prototype.push.apply(rules, foundMixins);\n                            }\n                        } else {\n                            rules.push({ rule, path: []});\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n        this._lookups[key] = rules;\n        return rules;\n    }\n\n    genCSS(context, output) {\n        let i;\n        let j;\n        const charsetRuleNodes = [];\n        let ruleNodes = [];\n\n        let // Line number debugging\n        debugInfo;\n\n        let rule;\n        let path;\n\n        context.tabLevel = (context.tabLevel || 0);\n\n        if (!this.root) {\n            context.tabLevel++;\n        }\n\n        const tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\n        const tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\n        let sep;\n\n        let charsetNodeIndex = 0;\n        let importNodeIndex = 0;\n        for (i = 0; (rule = this.rules[i]); i++) {\n            if (rule instanceof Comment) {\n                if (importNodeIndex === i) {\n                    importNodeIndex++;\n                }\n                ruleNodes.push(rule);\n            } else if (rule.isCharset && rule.isCharset()) {\n                ruleNodes.splice(charsetNodeIndex, 0, rule);\n                charsetNodeIndex++;\n                importNodeIndex++;\n            } else if (rule.type === 'Import') {\n                ruleNodes.splice(importNodeIndex, 0, rule);\n                importNodeIndex++;\n            } else {\n                ruleNodes.push(rule);\n            }\n        }\n        ruleNodes = charsetRuleNodes.concat(ruleNodes);\n\n        // If this is the root node, we don't render\n        // a selector, or {}.\n        if (!this.root) {\n            debugInfo = getDebugInfo(context, this, tabSetStr);\n\n            if (debugInfo) {\n                output.add(debugInfo);\n                output.add(tabSetStr);\n            }\n\n            const paths = this.paths;\n            const pathCnt = paths.length;\n            let pathSubCnt;\n\n            sep = context.compress ? ',' : (`,\\n${tabSetStr}`);\n\n            for (i = 0; i < pathCnt; i++) {\n                path = paths[i];\n                if (!(pathSubCnt = path.length)) { continue; }\n                if (i > 0) { output.add(sep); }\n\n                context.firstSelector = true;\n                path[0].genCSS(context, output);\n\n                context.firstSelector = false;\n                for (j = 1; j < pathSubCnt; j++) {\n                    path[j].genCSS(context, output);\n                }\n            }\n\n            output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n        }\n\n        // Compile rules and rulesets\n        for (i = 0; (rule = ruleNodes[i]); i++) {\n\n            if (i + 1 === ruleNodes.length) {\n                context.lastRule = true;\n            }\n\n            const currentLastRule = context.lastRule;\n            if (rule.isRulesetLike(rule)) {\n                context.lastRule = false;\n            }\n\n            if (rule.genCSS) {\n                rule.genCSS(context, output);\n            } else if (rule.value) {\n                output.add(rule.value.toString());\n            }\n\n            context.lastRule = currentLastRule;\n\n            if (!context.lastRule && rule.isVisible()) {\n                output.add(context.compress ? '' : (`\\n${tabRuleStr}`));\n            } else {\n                context.lastRule = false;\n            }\n        }\n\n        if (!this.root) {\n            output.add((context.compress ? '}' : `\\n${tabSetStr}}`));\n            context.tabLevel--;\n        }\n\n        if (!output.isEmpty() && !context.compress && this.firstRoot) {\n            output.add('\\n');\n        }\n    }\n\n    joinSelectors(paths, context, selectors) {\n        for (let s = 0; s < selectors.length; s++) {\n            this.joinSelector(paths, context, selectors[s]);\n        }\n    }\n\n    joinSelector(paths, context, selector) {\n        function createParenthesis(elementsToPak, originalElement) {\n            let replacementParen;\n            let j;\n            if (elementsToPak.length === 0) {\n                replacementParen = new Paren(elementsToPak[0]);\n            } else {\n                const insideParent = new Array(elementsToPak.length);\n                for (j = 0; j < elementsToPak.length; j++) {\n                    insideParent[j] = new Element(\n                        null,\n                        elementsToPak[j],\n                        originalElement.isVariable,\n                        originalElement._index,\n                        originalElement._fileInfo\n                    );\n                }\n                replacementParen = new Paren(new Selector(insideParent));\n            }\n            return replacementParen;\n        }\n\n        function createSelector(containedElement, originalElement) {\n            let element;\n            let selector;\n            element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n            selector = new Selector([element]);\n            return selector;\n        }\n\n        // joins selector path from `beginningPath` with selector path in `addPath`\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns concatenated path\n        function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n            let newSelectorPath;\n            let lastSelector;\n            let newJoinedSelector;\n            // our new selector path\n            newSelectorPath = [];\n\n            // construct the joined selector - if & is the first thing this will be empty,\n            // if not newJoinedSelector will be the last set of elements in the selector\n            if (beginningPath.length > 0) {\n                newSelectorPath = utils.copyArray(beginningPath);\n                lastSelector = newSelectorPath.pop();\n                newJoinedSelector = originalSelector.createDerived(utils.copyArray(lastSelector.elements));\n            }\n            else {\n                newJoinedSelector = originalSelector.createDerived([]);\n            }\n\n            if (addPath.length > 0) {\n                // /deep/ is a CSS4 selector - (removed, so should deprecate)\n                // that is valid without anything in front of it\n                // so if the & does not have a combinator that is \"\" or \" \" then\n                // and there is a combinator on the parent, then grab that.\n                // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n                let combinator = replacedElement.combinator;\n\n                const parentEl = addPath[0].elements[0];\n                if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                    combinator = parentEl.combinator;\n                }\n                // join the elements so far with the first part of the parent\n                newJoinedSelector.elements.push(new Element(\n                    combinator,\n                    parentEl.value,\n                    replacedElement.isVariable,\n                    replacedElement._index,\n                    replacedElement._fileInfo\n                ));\n                newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n            }\n\n            // now add the joined selector - but only if it is not empty\n            if (newJoinedSelector.elements.length !== 0) {\n                newSelectorPath.push(newJoinedSelector);\n            }\n\n            // put together the parent selectors after the join (e.g. the rest of the parent)\n            if (addPath.length > 1) {\n                let restOfPath = addPath.slice(1);\n                restOfPath = restOfPath.map(selector => selector.createDerived(selector.elements, []));\n                newSelectorPath = newSelectorPath.concat(restOfPath);\n            }\n            return newSelectorPath;\n        }\n\n        // joins selector path from `beginningPath` with every selector path in `addPaths` array\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns array with all concatenated paths\n        function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {\n            let j;\n            for (j = 0; j < beginningPath.length; j++) {\n                const newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n                result.push(newSelectorPath);\n            }\n            return result;\n        }\n\n        function mergeElementsOnToSelectors(elements, selectors) {\n            let i;\n            let sel;\n\n            if (elements.length === 0) {\n                return ;\n            }\n            if (selectors.length === 0) {\n                selectors.push([ new Selector(elements) ]);\n                return;\n            }\n\n            for (i = 0; (sel = selectors[i]); i++) {\n                // if the previous thing in sel is a parent this needs to join on to it\n                if (sel.length > 0) {\n                    sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n                }\n                else {\n                    sel.push(new Selector(elements));\n                }\n            }\n        }\n\n        // replace all parent selectors inside `inSelector` by content of `context` array\n        // resulting selectors are returned inside `paths` array\n        // returns true if `inSelector` contained at least one parent selector\n        function replaceParentSelector(paths, context, inSelector) {\n            // The paths are [[Selector]]\n            // The first list is a list of comma separated selectors\n            // The inner list is a list of inheritance separated selectors\n            // e.g.\n            // .a, .b {\n            //   .c {\n            //   }\n            // }\n            // == [[.a] [.c]] [[.b] [.c]]\n            //\n            let i;\n\n            let j;\n            let k;\n            let currentElements;\n            let newSelectors;\n            let selectorsMultiplied;\n            let sel;\n            let el;\n            let hadParentSelector = false;\n            let length;\n            let lastSelector;\n            function findNestedSelector(element) {\n                let maybeSelector;\n                if (!(element.value instanceof Paren)) {\n                    return null;\n                }\n\n                maybeSelector = element.value.value;\n                if (!(maybeSelector instanceof Selector)) {\n                    return null;\n                }\n\n                return maybeSelector;\n            }\n\n            // the elements from the current selector so far\n            currentElements = [];\n            // the current list of new selectors to add to the path.\n            // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n            // by the parents\n            newSelectors = [\n                []\n            ];\n\n            for (i = 0; (el = inSelector.elements[i]); i++) {\n                // non parent reference elements just get added\n                if (el.value !== '&') {\n                    const nestedSelector = findNestedSelector(el);\n                    if (nestedSelector != null) {\n                        // merge the current list of non parent selector elements\n                        // on to the current list of selectors to add\n                        mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                        const nestedPaths = [];\n                        let replaced;\n                        const replacedNewSelectors = [];\n                        replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                        hadParentSelector = hadParentSelector || replaced;\n                        // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                        for (k = 0; k < nestedPaths.length; k++) {\n                            const replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                            addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                        }\n                        newSelectors = replacedNewSelectors;\n                        currentElements = [];\n                    } else {\n                        currentElements.push(el);\n                    }\n\n                } else {\n                    hadParentSelector = true;\n                    // the new list of selectors to add\n                    selectorsMultiplied = [];\n\n                    // merge the current list of non parent selector elements\n                    // on to the current list of selectors to add\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                    // loop through our current selectors\n                    for (j = 0; j < newSelectors.length; j++) {\n                        sel = newSelectors[j];\n                        // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                        // whether there are parents or not\n                        if (context.length === 0) {\n                            // the combinator used on el should now be applied to the next element instead so that\n                            // it is not lost\n                            if (sel.length > 0) {\n                                sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                            }\n                            selectorsMultiplied.push(sel);\n                        }\n                        else {\n                            // and the parent selectors\n                            for (k = 0; k < context.length; k++) {\n                                // We need to put the current selectors\n                                // then join the last selector's elements on to the parents selectors\n                                const newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                                // add that to our new set of selectors\n                                selectorsMultiplied.push(newSelectorPath);\n                            }\n                        }\n                    }\n\n                    // our new selectors has been multiplied, so reset the state\n                    newSelectors = selectorsMultiplied;\n                    currentElements = [];\n                }\n            }\n\n            // if we have any elements left over (e.g. .a& .b == .b)\n            // add them on to all the current selectors\n            mergeElementsOnToSelectors(currentElements, newSelectors);\n\n            for (i = 0; i < newSelectors.length; i++) {\n                length = newSelectors[i].length;\n                if (length > 0) {\n                    paths.push(newSelectors[i]);\n                    lastSelector = newSelectors[i][length - 1];\n                    newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                }\n            }\n\n            return hadParentSelector;\n        }\n\n        function deriveSelector(visibilityInfo, deriveFrom) {\n            const newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n            newSelector.copyVisibilityInfo(visibilityInfo);\n            return newSelector;\n        }\n\n        // joinSelector code follows\n        let i;\n\n        let newPaths;\n        let hadParentSelector;\n\n        newPaths = [];\n        hadParentSelector = replaceParentSelector(newPaths, context, selector);\n\n        if (!hadParentSelector) {\n            if (context.length > 0) {\n                newPaths = [];\n                for (i = 0; i < context.length; i++) {\n\n                    const concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n\n                    concatenated.push(selector);\n                    newPaths.push(concatenated);\n                }\n            }\n            else {\n                newPaths = [[selector]];\n            }\n        }\n\n        for (i = 0; i < newPaths.length; i++) {\n            paths.push(newPaths[i]);\n        }\n    }\n}\n\nRuleset.prototype.type = 'Ruleset';\nRuleset.prototype.isRuleset = true;\nexport default Ruleset;\n","import Node from './node';\nimport Selector from './selector';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\n\nclass AtRule extends Node {\n    constructor(\n        name,\n        value,\n        rules,\n        index,\n        currentFileInfo,\n        debugInfo,\n        isRooted,\n        visibilityInfo\n    ) {\n        let i;\n\n        this.name  = name;\n        this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\n        if (rules) {\n            if (Array.isArray(rules)) {\n                this.rules = rules;\n            } else {\n                this.rules = [rules];\n                this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\n            }\n            for (i = 0; i < this.rules.length; i++) {\n                this.rules[i].allowImports = true;\n            }\n            this.setParent(this.rules, this);\n        }\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.debugInfo = debugInfo;\n        this.isRooted = isRooted || false;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n    }\n\n    accept(visitor) {\n        const value = this.value;\n        const rules = this.rules;\n        if (rules) {\n            this.rules = visitor.visitArray(rules);\n        }\n        if (value) {\n            this.value = visitor.visit(value);\n        }\n    }\n\n    isRulesetLike() {\n        return this.rules || !this.isCharset();\n    }\n\n    isCharset() {\n        return '@charset' === this.name;\n    }\n\n    genCSS(context, output) {\n        const value = this.value;\n        const rules = this.rules;\n        output.add(this.name, this.fileInfo(), this.getIndex());\n        if (value) {\n            output.add(' ');\n            value.genCSS(context, output);\n        }\n        if (rules) {\n            this.outputRuleset(context, output, rules);\n        } else {\n            output.add(';');\n        }\n    }\n\n    eval(context) {\n        let mediaPathBackup;\n        let mediaBlocksBackup;\n        let value = this.value;\n        let rules = this.rules;\n\n        // media stored inside other atrule should not bubble over it\n        // backpup media bubbling information\n        mediaPathBackup = context.mediaPath;\n        mediaBlocksBackup = context.mediaBlocks;\n        // deleted media bubbling information\n        context.mediaPath = [];\n        context.mediaBlocks = [];\n\n        if (value) {\n            value = value.eval(context);\n        }\n        if (rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            rules = [rules[0].eval(context)];\n            rules[0].root = true;\n        }\n        // restore media bubbling information\n        context.mediaPath = mediaPathBackup;\n        context.mediaBlocks = mediaBlocksBackup;\n\n        return new AtRule(this.name, value, rules,\n            this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\n    }\n\n    variable(name) {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.variable.call(this.rules[0], name);\n        }\n    }\n\n    find(...args) {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.find.apply(this.rules[0], args);\n        }\n    }\n\n    rulesets() {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.rulesets.apply(this.rules[0]);\n        }\n    }\n\n    outputRuleset(context, output, rules) {\n        const ruleCnt = rules.length;\n        let i;\n        context.tabLevel = (context.tabLevel | 0) + 1;\n\n        // Compressed\n        if (context.compress) {\n            output.add('{');\n            for (i = 0; i < ruleCnt; i++) {\n                rules[i].genCSS(context, output);\n            }\n            output.add('}');\n            context.tabLevel--;\n            return;\n        }\n\n        // Non-compressed\n        const tabSetStr = `\\n${Array(context.tabLevel).join('  ')}`;\n\n        const tabRuleStr = `${tabSetStr}  `;\n        if (!ruleCnt) {\n            output.add(` {${tabSetStr}}`);\n        } else {\n            output.add(` {${tabRuleStr}`);\n            rules[0].genCSS(context, output);\n            for (i = 1; i < ruleCnt; i++) {\n                output.add(tabRuleStr);\n                rules[i].genCSS(context, output);\n            }\n            output.add(`${tabSetStr}}`);\n        }\n\n        context.tabLevel--;\n    }\n}\n\nAtRule.prototype.type = 'AtRule';\nexport default AtRule;\n","import Node from './node';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nclass DetachedRuleset extends Node {\n    constructor(ruleset, frames) {\n        this.ruleset = ruleset;\n        this.frames = frames;\n        this.setParent(this.ruleset, this);\n    }\n\n    accept(visitor) {\n        this.ruleset = visitor.visit(this.ruleset);\n    }\n\n    eval(context) {\n        const frames = this.frames || utils.copyArray(context.frames);\n        return new DetachedRuleset(this.ruleset, frames);\n    }\n\n    callEval(context) {\n        return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n    }\n}\n\nDetachedRuleset.prototype.type = 'DetachedRuleset';\nDetachedRuleset.prototype.evalFirst = true;\nexport default DetachedRuleset;\n","import Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport * as utils from '../utils';\n\nclass Unit extends Node {\n    constructor(numerator, denominator, backupUnit) {\n        this.numerator = numerator ? utils.copyArray(numerator).sort() : [];\n        this.denominator = denominator ? utils.copyArray(denominator).sort() : [];\n        if (backupUnit) {\n            this.backupUnit = backupUnit;\n        } else if (numerator && numerator.length) {\n            this.backupUnit = numerator[0];\n        }\n    }\n\n    clone() {\n        return new Unit(utils.copyArray(this.numerator), utils.copyArray(this.denominator), this.backupUnit);\n    }\n\n    genCSS(context, output) {\n        // Dimension checks the unit is singular and throws an error if in strict math mode.\n        const strictUnits = context && context.strictUnits;\n        if (this.numerator.length === 1) {\n            output.add(this.numerator[0]); // the ideal situation\n        } else if (!strictUnits && this.backupUnit) {\n            output.add(this.backupUnit);\n        } else if (!strictUnits && this.denominator.length) {\n            output.add(this.denominator[0]);\n        }\n    }\n\n    toString() {\n        let i;\n        let returnStr = this.numerator.join('*');\n        for (i = 0; i < this.denominator.length; i++) {\n            returnStr += `/${this.denominator[i]}`;\n        }\n        return returnStr;\n    }\n\n    compare(other) {\n        return this.is(other.toString()) ? 0 : undefined;\n    }\n\n    is(unitString) {\n        return this.toString().toUpperCase() === unitString.toUpperCase();\n    }\n\n    isLength() {\n        return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n    }\n\n    isEmpty() {\n        return this.numerator.length === 0 && this.denominator.length === 0;\n    }\n\n    isSingular() {\n        return this.numerator.length <= 1 && this.denominator.length === 0;\n    }\n\n    map(callback) {\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            this.numerator[i] = callback(this.numerator[i], false);\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            this.denominator[i] = callback(this.denominator[i], true);\n        }\n    }\n\n    usedUnits() {\n        let group;\n        const result = {};\n        let mapUnit;\n        let groupName;\n\n        mapUnit = atomicUnit => {\n            /* jshint loopfunc:true */\n            if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n                result[groupName] = atomicUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in unitConversions) {\n            if (unitConversions.hasOwnProperty(groupName)) {\n                group = unitConversions[groupName];\n\n                this.map(mapUnit);\n            }\n        }\n\n        return result;\n    }\n\n    cancel() {\n        const counter = {};\n        let atomicUnit;\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            atomicUnit = this.numerator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            atomicUnit = this.denominator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n        }\n\n        this.numerator = [];\n        this.denominator = [];\n\n        for (atomicUnit in counter) {\n            if (counter.hasOwnProperty(atomicUnit)) {\n                const count = counter[atomicUnit];\n\n                if (count > 0) {\n                    for (i = 0; i < count; i++) {\n                        this.numerator.push(atomicUnit);\n                    }\n                } else if (count < 0) {\n                    for (i = 0; i < -count; i++) {\n                        this.denominator.push(atomicUnit);\n                    }\n                }\n            }\n        }\n\n        this.numerator.sort();\n        this.denominator.sort();\n    }\n}\n\nUnit.prototype.type = 'Unit';\nexport default Unit;\n","import Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport Unit from './unit';\nimport Color from './color';\n\n//\n// A number with a unit\n//\nclass Dimension extends Node {\n    constructor(value, unit) {\n        this.value = parseFloat(value);\n        if (isNaN(this.value)) {\n            throw new Error('Dimension is not a number.');\n        }\n        this.unit = (unit && unit instanceof Unit) ? unit :\n          new Unit(unit ? [unit] : undefined);\n        this.setParent(this.unit, this);\n    }\n\n    accept(visitor) {\n        this.unit = visitor.visit(this.unit);\n    }\n\n    eval(context) {\n        return this;\n    }\n\n    toColor() {\n        return new Color([this.value, this.value, this.value]);\n    }\n\n    genCSS(context, output) {\n        if ((context && context.strictUnits) && !this.unit.isSingular()) {\n            throw new Error(`Multiple units in dimension. Correct the units or use the unit function. Bad unit: ${this.unit.toString()}`);\n        }\n\n        const value = this.fround(context, this.value);\n        let strValue = String(value);\n\n        if (value !== 0 && value < 0.000001 && value > -0.000001) {\n            // would be output 1e-6 etc.\n            strValue = value.toFixed(20).replace(/0+$/, '');\n        }\n\n        if (context && context.compress) {\n            // Zero values doesn't need a unit\n            if (value === 0 && this.unit.isLength()) {\n                output.add(strValue);\n                return;\n            }\n\n            // Float values doesn't need a leading zero\n            if (value > 0 && value < 1) {\n                strValue = (strValue).substr(1);\n            }\n        }\n\n        output.add(strValue);\n        this.unit.genCSS(context, output);\n    }\n\n    // In an operation between two Dimensions,\n    // we default to the first Dimension's unit,\n    // so `1px + 2` will yield `3px`.\n    operate(context, op, other) {\n        /* jshint noempty:false */\n        let value = this._operate(context, op, this.value, other.value);\n\n        let unit = this.unit.clone();\n\n        if (op === '+' || op === '-') {\n            if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n                unit = other.unit.clone();\n                if (this.unit.backupUnit) {\n                    unit.backupUnit = this.unit.backupUnit;\n                }\n            } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n                // do nothing\n            } else {\n                other = other.convertTo(this.unit.usedUnits());\n\n                if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                    throw new Error(`Incompatible units. Change the units or use the unit function. Bad units: '${unit.toString()}' and '${other.unit.toString()}'.`);\n                }\n\n                value = this._operate(context, op, this.value, other.value);\n            }\n        } else if (op === '*') {\n            unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n            unit.cancel();\n        } else if (op === '/') {\n            unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n            unit.cancel();\n        }\n        return new Dimension(value, unit);\n    }\n\n    compare(other) {\n        let a;\n        let b;\n\n        if (!(other instanceof Dimension)) {\n            return undefined;\n        }\n\n        if (this.unit.isEmpty() || other.unit.isEmpty()) {\n            a = this;\n            b = other;\n        } else {\n            a = this.unify();\n            b = other.unify();\n            if (a.unit.compare(b.unit) !== 0) {\n                return undefined;\n            }\n        }\n\n        return Node.numericCompare(a.value, b.value);\n    }\n\n    unify() {\n        return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\n    }\n\n    convertTo(conversions) {\n        let value = this.value;\n        const unit = this.unit.clone();\n        let i;\n        let groupName;\n        let group;\n        let targetUnit;\n        let derivedConversions = {};\n        let applyUnit;\n\n        if (typeof conversions === 'string') {\n            for (i in unitConversions) {\n                if (unitConversions[i].hasOwnProperty(conversions)) {\n                    derivedConversions = {};\n                    derivedConversions[i] = conversions;\n                }\n            }\n            conversions = derivedConversions;\n        }\n        applyUnit = (atomicUnit, denominator) => {\n            /* jshint loopfunc:true */\n            if (group.hasOwnProperty(atomicUnit)) {\n                if (denominator) {\n                    value = value / (group[atomicUnit] / group[targetUnit]);\n                } else {\n                    value = value * (group[atomicUnit] / group[targetUnit]);\n                }\n\n                return targetUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in conversions) {\n            if (conversions.hasOwnProperty(groupName)) {\n                targetUnit = conversions[groupName];\n                group = unitConversions[groupName];\n\n                unit.map(applyUnit);\n            }\n        }\n\n        unit.cancel();\n\n        return new Dimension(value, unit);\n    }\n}\n\nDimension.prototype.type = 'Dimension';\nexport default Dimension;\n","import Node from './node';\nimport Color from './color';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\n\nclass Operation extends Node {\n    constructor(op, operands, isSpaced) {\n        this.op = op.trim();\n        this.operands = operands;\n        this.isSpaced = isSpaced;\n    }\n\n    accept(visitor) {\n        this.operands = visitor.visitArray(this.operands);\n    }\n\n    eval(context) {\n        let a = this.operands[0].eval(context);\n        let b = this.operands[1].eval(context);\n        let op;\n\n        if (context.isMathOn(this.op)) {\n            op = this.op === './' ? '/' : this.op;\n            if (a instanceof Dimension && b instanceof Color) {\n                a = a.toColor();\n            }\n            if (b instanceof Dimension && a instanceof Color) {\n                b = b.toColor();\n            }\n            if (!a.operate) {\n                if (a instanceof Operation && a.op === '/' && context.math === MATH.PARENS_DIVISION) {\n                    return new Operation(this.op, [a, b], this.isSpaced);\n                }\n                throw { type: 'Operation',\n                    message: 'Operation on an invalid type' };\n            }\n\n            return a.operate(context, op, b);\n        } else {\n            return new Operation(this.op, [a, b], this.isSpaced);\n        }\n    }\n\n    genCSS(context, output) {\n        this.operands[0].genCSS(context, output);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        output.add(this.op);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        this.operands[1].genCSS(context, output);\n    }\n}\n\nOperation.prototype.type = 'Operation';\nexport default Operation;\n","import Node from './node';\nimport Paren from './paren';\nimport Comment from './comment';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\nclass Expression extends Node {\n    constructor(value, noSpacing) {\n        this.value = value;\n        this.noSpacing = noSpacing;\n        if (!value) {\n            throw new Error('Expression requires an array parameter');\n        }\n    }\n\n    accept(visitor) {\n        this.value = visitor.visitArray(this.value);\n    }\n\n    eval(context) {\n        let returnValue;\n        const mathOn = context.isMathOn();\n\n        const inParenthesis = this.parens && \n            (context.math !== MATH.STRICT_LEGACY || !this.parensInOp);\n\n        let doubleParen = false;\n        if (inParenthesis) {\n            context.inParenthesis();\n        }\n        if (this.value.length > 1) {\n            returnValue = new Expression(this.value.map(e => {\n                if (!e.eval) {\n                    return e;\n                }\n                return e.eval(context);\n            }), this.noSpacing);\n        } else if (this.value.length === 1) {\n            if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n                doubleParen = true;\n            }\n            returnValue = this.value[0].eval(context);\n        } else {\n            returnValue = this;\n        }\n        if (inParenthesis) {\n            context.outOfParenthesis();\n        }\n        if (this.parens && this.parensInOp && !mathOn && !doubleParen \n            && (!(returnValue instanceof Dimension))) {\n            returnValue = new Paren(returnValue);\n        }\n        return returnValue;\n    }\n\n    genCSS(context, output) {\n        for (let i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (!this.noSpacing && i + 1 < this.value.length) {\n                output.add(' ');\n            }\n        }\n    }\n\n    throwAwayComments() {\n        this.value = this.value.filter(v => !(v instanceof Comment));\n    }\n}\n\nExpression.prototype.type = 'Expression';\nexport default Expression;\n","import Expression from '../tree/expression';\n\nclass functionCaller {\n    constructor(name, context, index, currentFileInfo) {\n        this.name = name.toLowerCase();\n        this.index = index;\n        this.context = context;\n        this.currentFileInfo = currentFileInfo;\n\n        this.func = context.frames[0].functionRegistry.get(this.name);\n    }\n\n    isValid() {\n        return Boolean(this.func);\n    }\n\n    call(args) {\n        // This code is terrible and should be replaced as per this issue...\n        // https://github.com/less/less.js/issues/2477\n        if (Array.isArray(args)) {\n            args = args.filter(item => {\n                if (item.type === 'Comment') {\n                    return false;\n                }\n                return true;\n            })\n            .map(item => {\n                if (item.type === 'Expression') {\n                    const subNodes = item.value.filter(item => {\n                        if (item.type === 'Comment') {\n                            return false;\n                        }\n                        return true;\n                    });\n                    if (subNodes.length === 1) {\n                        return subNodes[0];\n                    } else {\n                        return new Expression(subNodes);\n                    }\n                }\n                return item;\n            });\n        }\n\n        return this.func(...args);\n    }\n}\n\nexport default functionCaller;\n","import Node from './node';\nimport Anonymous from './anonymous';\nimport FunctionCaller from '../functions/function-caller';\n\n//\n// A function call node.\n//\nclass Call extends Node {\n    constructor(name, args, index, currentFileInfo) {\n        this.name = name;\n        this.args = args;\n        this.calc = name === 'calc';\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    accept(visitor) {\n        if (this.args) {\n            this.args = visitor.visitArray(this.args);\n        }\n    }\n\n    //\n    // When evaluating a function call,\n    // we either find the function in the functionRegistry,\n    // in which case we call it, passing the  evaluated arguments,\n    // if this returns null or we cannot find the function, we\n    // simply print it out as it appeared originally [2].\n    //\n    // The reason why we evaluate the arguments, is in the case where\n    // we try to pass a variable to a function, like: `saturate(@color)`.\n    // The function should receive the value, not the variable.\n    //\n    eval(context) {\n        /**\n         * Turn off math for calc(), and switch back on for evaluating nested functions\n         */\n        const currentMathContext = context.mathOn;\n        context.mathOn = !this.calc;\n        if (this.calc || context.inCalc) {\n            context.enterCalc();\n        }\n        const args = this.args.map(a => a.eval(context));\n        if (this.calc || context.inCalc) {\n            context.exitCalc();\n        }\n        context.mathOn = currentMathContext;\n\n        let result;\n        const funcCaller = new FunctionCaller(this.name, context, this.getIndex(), this.fileInfo());\n\n        if (funcCaller.isValid()) {\n            try {\n                result = funcCaller.call(args);\n            } catch (e) {\n                throw { \n                    type: e.type || 'Runtime',\n                    message: `error evaluating function \\`${this.name}\\`${e.message ? `: ${e.message}` : ''}`,\n                    index: this.getIndex(), \n                    filename: this.fileInfo().filename,\n                    line: e.lineNumber,\n                    column: e.columnNumber\n                };\n            }\n\n            if (result !== null && result !== undefined) {\n                // Results that that are not nodes are cast as Anonymous nodes\n                // Falsy values or booleans are returned as empty nodes\n                if (!(result instanceof Node)) {\n                    if (!result || result === true) {\n                        result = new Anonymous(null); \n                    }\n                    else {\n                        result = new Anonymous(result.toString()); \n                    }\n                    \n                }\n                result._index = this._index;\n                result._fileInfo = this._fileInfo;\n                return result;\n            }\n\n        }\n\n        return new Call(this.name, args, this.getIndex(), this.fileInfo());\n    }\n\n    genCSS(context, output) {\n        output.add(`${this.name}(`, this.fileInfo(), this.getIndex());\n\n        for (let i = 0; i < this.args.length; i++) {\n            this.args[i].genCSS(context, output);\n            if (i + 1 < this.args.length) {\n                output.add(', ');\n            }\n        }\n\n        output.add(')');\n    }\n}\n\nCall.prototype.type = 'Call';\nexport default Call;\n","import Node from './node';\nimport Call from './call';\n\nclass Variable extends Node {\n    constructor(name, index, currentFileInfo) {\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        let variable;\n        let name = this.name;\n\n        if (name.indexOf('@@') === 0) {\n            name = `@${new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value}`;\n        }\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive variable definition for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        variable = this.find(context.frames, frame => {\n            const v = frame.variable(name);\n            if (v) {\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                // If in calc, wrap vars in a function call to cascade evaluate args first\n                if (context.inCalc) {\n                    return (new Call('_SELF', [v.value])).eval(context);\n                }\n                else {\n                    return v.value.eval(context);\n                }\n            }\n        });\n        if (variable) {\n            this.evaluating = false;\n            return variable;\n        } else {\n            throw { type: 'Name',\n                message: `variable ${name} is undefined`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n    }\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n}\n\nVariable.prototype.type = 'Variable';\nexport default Variable;\n","import Node from './node';\nimport Declaration from './declaration';\n\nclass Property extends Node {\n    constructor(name, index, currentFileInfo) {\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        let property;\n        const name = this.name;\n        // TODO: shorten this reference\n        const mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive property reference for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        property = this.find(context.frames, frame => {\n            let v;\n            const vArr = frame.property(name);\n            if (vArr) {\n                for (let i = 0; i < vArr.length; i++) {\n                    v = vArr[i];\n\n                    vArr[i] = new Declaration(v.name,\n                        v.value,\n                        v.important,\n                        v.merge,\n                        v.index,\n                        v.currentFileInfo,\n                        v.inline,\n                        v.variable\n                    );\n                }\n                mergeRules(vArr);\n\n                v = vArr[vArr.length - 1];\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                v = v.value.eval(context);\n                return v;\n            }\n        });\n        if (property) {\n            this.evaluating = false;\n            return property;\n        } else {\n            throw { type: 'Name',\n                message: `Property '${name}' is undefined`,\n                filename: this.currentFileInfo.filename,\n                index: this.index };\n        }\n    }\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n}\n\nProperty.prototype.type = 'Property';\nexport default Property;\n","import Node from './node';\n\nclass Attribute extends Node {\n    constructor(key, op, value) {\n        this.key = key;\n        this.op = op;\n        this.value = value;\n    }\n\n    eval(context) {\n        return new Attribute(this.key.eval ? this.key.eval(context) : this.key,\n            this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    }\n\n    toCSS(context) {\n        let value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n\n        if (this.op) {\n            value += this.op;\n            value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\n        }\n\n        return `[${value}]`;\n    }\n}\n\nAttribute.prototype.type = 'Attribute';\nexport default Attribute;\n","import Node from './node';\nimport Variable from './variable';\nimport Property from './property';\n\nclass Quoted extends Node {\n    constructor(str, content, escaped, index, currentFileInfo) {\n        this.escaped = (escaped == null) ? true : escaped;\n        this.value = content || '';\n        this.quote = str.charAt(0);\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.variableRegex = /@\\{([\\w-]+)\\}/g;\n        this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n    }\n\n    genCSS(context, output) {\n        if (!this.escaped) {\n            output.add(this.quote, this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n        if (!this.escaped) {\n            output.add(this.quote);\n        }\n    }\n\n    containsVariables() {\n        return this.value.match(this.variableRegex);\n    }\n\n    eval(context) {\n        const that = this;\n        let value = this.value;\n        const variableReplacement = (_, name) => {\n            const v = new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        const propertyReplacement = (_, name) => {\n            const v = new Property(`$${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        function iterativeReplace(value, regexp, replacementFnc) {\n            let evaluatedValue = value;\n            do {\n                value = evaluatedValue.toString();\n                evaluatedValue = value.replace(regexp, replacementFnc);\n            } while (value !== evaluatedValue);\n            return evaluatedValue;\n        }\n        value = iterativeReplace(value, this.variableRegex, variableReplacement);\n        value = iterativeReplace(value, this.propRegex, propertyReplacement);\n        return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n    }\n\n    compare(other) {\n        // when comparing quoted strings allow the quote to differ\n        if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n            return Node.numericCompare(this.value, other.value);\n        } else {\n            return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n        }\n    }\n}\n\nQuoted.prototype.type = 'Quoted';\nexport default Quoted;\n","import Node from './node';\n\nclass URL extends Node {\n    constructor(val, index, currentFileInfo, isEvald) {\n        this.value = val;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.isEvald = isEvald;\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    genCSS(context, output) {\n        output.add('url(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    }\n\n    eval(context) {\n        const val = this.value.eval(context);\n        let rootpath;\n\n        if (!this.isEvald) {\n            // Add the rootpath if the URL requires a rewrite\n            rootpath = this.fileInfo() && this.fileInfo().rootpath;\n            if (typeof rootpath === 'string' &&\n                typeof val.value === 'string' &&\n                context.pathRequiresRewrite(val.value)) {\n                if (!val.quote) {\n                    rootpath = escapePath(rootpath);\n                }\n                val.value = context.rewritePath(val.value, rootpath);\n            } else {\n                val.value = context.normalizePath(val.value);\n            }\n\n            // Add url args if enabled\n            if (context.urlArgs) {\n                if (!val.value.match(/^\\s*data:/)) {\n                    const delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n                    const urlArgs = delimiter + context.urlArgs;\n                    if (val.value.indexOf('#') !== -1) {\n                        val.value = val.value.replace('#', `${urlArgs}#`);\n                    } else {\n                        val.value += urlArgs;\n                    }\n                }\n            }\n        }\n\n        return new URL(val, this.getIndex(), this.fileInfo(), true);\n    }\n}\n\nURL.prototype.type = 'Url';\n\nfunction escapePath(path) {\n    return path.replace(/[\\(\\)'\"\\s]/g, match => `\\\\${match}`);\n}\n\nexport default URL;\n","import Ruleset from './ruleset';\nimport Value from './value';\nimport Selector from './selector';\nimport Anonymous from './anonymous';\nimport Expression from './expression';\nimport AtRule from './atrule';\nimport * as utils from '../utils';\n\nclass Media extends AtRule {\n    constructor(value, features, index, currentFileInfo, visibilityInfo) {\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n\n        const selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n\n        this.features = new Value(features);\n        this.rules = [new Ruleset(selectors, value)];\n        this.rules[0].allowImports = true;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n        this.setParent(selectors, this);\n        this.setParent(this.features, this);\n        this.setParent(this.rules, this);\n    }\n\n    isRulesetLike() {\n        return true;\n    }\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        if (this.rules) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    }\n\n    genCSS(context, output) {\n        output.add('@media ', this._fileInfo, this._index);\n        this.features.genCSS(context, output);\n        this.outputRuleset(context, output, this.rules);\n    }\n\n    eval(context) {\n        if (!context.mediaBlocks) {\n            context.mediaBlocks = [];\n            context.mediaPath = [];\n        }\n\n        const media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\n        if (this.debugInfo) {\n            this.rules[0].debugInfo = this.debugInfo;\n            media.debugInfo = this.debugInfo;\n        }\n        \n        media.features = this.features.eval(context);\n\n        context.mediaPath.push(media);\n        context.mediaBlocks.push(media);\n\n        this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n        context.frames.unshift(this.rules[0]);\n        media.rules = [this.rules[0].eval(context)];\n        context.frames.shift();\n\n        context.mediaPath.pop();\n\n        return context.mediaPath.length === 0 ? media.evalTop(context) :\n                    media.evalNested(context);\n    }\n\n    evalTop(context) {\n        let result = this;\n\n        // Render all dependent Media blocks.\n        if (context.mediaBlocks.length > 1) {\n            const selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\n            result = new Ruleset(selectors, context.mediaBlocks);\n            result.multiMedia = true;\n            result.copyVisibilityInfo(this.visibilityInfo());\n            this.setParent(result, this);\n        }\n\n        delete context.mediaBlocks;\n        delete context.mediaPath;\n\n        return result;\n    }\n\n    evalNested(context) {\n        let i;\n        let value;\n        const path = context.mediaPath.concat([this]);\n\n        // Extract the media-query conditions separated with `,` (OR).\n        for (i = 0; i < path.length; i++) {\n            value = path[i].features instanceof Value ?\n                        path[i].features.value : path[i].features;\n            path[i] = Array.isArray(value) ? value : [value];\n        }\n\n        // Trace all permutations to generate the resulting media-query.\n        //\n        // (a, b and c) with nested (d, e) ->\n        //    a and d\n        //    a and e\n        //    b and c and d\n        //    b and c and e\n        this.features = new Value(this.permute(path).map(path => {\n            path = path.map(fragment => fragment.toCSS ? fragment : new Anonymous(fragment));\n\n            for (i = path.length - 1; i > 0; i--) {\n                path.splice(i, 0, new Anonymous('and'));\n            }\n\n            return new Expression(path);\n        }));\n        this.setParent(this.features, this);\n\n        // Fake a tree-node that doesn't output anything.\n        return new Ruleset([], []);\n    }\n\n    permute(arr) {\n        if (arr.length === 0) {\n            return [];\n        } else if (arr.length === 1) {\n            return arr[0];\n        } else {\n            const result = [];\n            const rest = this.permute(arr.slice(1));\n            for (let i = 0; i < rest.length; i++) {\n                for (let j = 0; j < arr[0].length; j++) {\n                    result.push([arr[0][j]].concat(rest[i]));\n                }\n            }\n            return result;\n        }\n    }\n\n    bubbleSelectors(selectors) {\n        if (!selectors) {\n            return;\n        }\n        this.rules = [new Ruleset(utils.copyArray(selectors), [this.rules[0]])];\n        this.setParent(this.rules, this);\n    }\n}\n\nMedia.prototype.type = 'Media';\nexport default Media;\n","import Node from './node';\nimport Media from './media';\nimport URL from './url';\nimport Quoted from './quoted';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\nimport * as utils from '../utils';\nimport LessError from '../less-error';\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nclass Import extends Node {\n    constructor(path, features, options, index, currentFileInfo, visibilityInfo) {\n        this.options = options;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.path = path;\n        this.features = features;\n        this.allowRoot = true;\n\n        if (this.options.less !== undefined || this.options.inline) {\n            this.css = !this.options.less || this.options.inline;\n        } else {\n            const pathValue = this.getPath();\n            if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\n                this.css = true;\n            }\n        }\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.features, this);\n        this.setParent(this.path, this);\n    }\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        this.path = visitor.visit(this.path);\n        if (!this.options.isPlugin && !this.options.inline && this.root) {\n            this.root = visitor.visit(this.root);\n        }\n    }\n\n    genCSS(context, output) {\n        if (this.css && this.path._fileInfo.reference === undefined) {\n            output.add('@import ', this._fileInfo, this._index);\n            this.path.genCSS(context, output);\n            if (this.features) {\n                output.add(' ');\n                this.features.genCSS(context, output);\n            }\n            output.add(';');\n        }\n    }\n\n    getPath() {\n        return (this.path instanceof URL) ?\n            this.path.value.value : this.path.value;\n    }\n\n    isVariableImport() {\n        let path = this.path;\n        if (path instanceof URL) {\n            path = path.value;\n        }\n        if (path instanceof Quoted) {\n            return path.containsVariables();\n        }\n\n        return true;\n    }\n\n    evalForImport(context) {\n        let path = this.path;\n\n        if (path instanceof URL) {\n            path = path.value;\n        }\n\n        return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n    }\n\n    evalPath(context) {\n        const path = this.path.eval(context);\n        const fileInfo = this._fileInfo;\n\n        if (!(path instanceof URL)) {\n            // Add the rootpath if the URL requires a rewrite\n            const pathValue = path.value;\n            if (fileInfo &&\n                pathValue &&\n                context.pathRequiresRewrite(pathValue)) {\n                path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n            } else {\n                path.value = context.normalizePath(path.value);\n            }\n        }\n\n        return path;\n    }\n\n    eval(context) {\n        const result = this.doEval(context);\n        if (this.options.reference || this.blocksVisibility()) {\n            if (result.length || result.length === 0) {\n                result.forEach(node => {\n                    node.addVisibilityBlock();\n                }\n                );\n            } else {\n                result.addVisibilityBlock();\n            }\n        }\n        return result;\n    }\n\n    doEval(context) {\n        let ruleset;\n        let registry;\n        const features = this.features && this.features.eval(context);\n\n        if (this.options.isPlugin) {\n            if (this.root && this.root.eval) {\n                try {\n                    this.root.eval(context);\n                }\n                catch (e) {\n                    e.message = 'Plugin error during evaluation';\n                    throw new LessError(e, this.root.imports, this.root.filename);\n                }\n            }\n            registry = context.frames[0] && context.frames[0].functionRegistry;\n            if ( registry && this.root && this.root.functions ) {\n                registry.addMultiple( this.root.functions );\n            }\n\n            return [];\n        }\n\n        if (this.skip) {\n            if (typeof this.skip === 'function') {\n                this.skip = this.skip();\n            }\n            if (this.skip) {\n                return [];\n            }\n        }\n        if (this.options.inline) {\n            const contents = new Anonymous(this.root, 0,\n                {\n                    filename: this.importedFilename,\n                    reference: this.path._fileInfo && this.path._fileInfo.reference\n                }, true, true);\n\n            return this.features ? new Media([contents], this.features.value) : [contents];\n        } else if (this.css) {\n            const newImport = new Import(this.evalPath(context), features, this.options, this._index);\n            if (!newImport.css && this.error) {\n                throw this.error;\n            }\n            return newImport;\n        } else {\n            ruleset = new Ruleset(null, utils.copyArray(this.root.rules));\n            ruleset.evalImports(context);\n\n            return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n        }\n    }\n}\n\nImport.prototype.type = 'Import';\nexport default Import;\n","import Node from './node';\nimport Variable from './variable';\n\nconst JsEvalNode = () => {\n};\nJsEvalNode.prototype = new Node();\n\nJsEvalNode.prototype.evaluateJavaScript = function (expression, context) {\n    let result;\n    const that = this;\n    const evalContext = {};\n\n    if (!context.javascriptEnabled) {\n        throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n\n    expression = expression.replace(/@\\{([\\w-]+)\\}/g, (_, name) => that.jsify(new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context)));\n\n    try {\n        expression = new Function(`return (${expression})`);\n    } catch (e) {\n        throw { message: `JavaScript evaluation error: ${e.message} from \\`${expression}\\`` ,\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n\n    const variables = context.frames[0].variables();\n    for (const k in variables) {\n        if (variables.hasOwnProperty(k)) {\n            /* jshint loopfunc:true */\n            evalContext[k.slice(1)] = {\n                value: variables[k].value,\n                toJS: function () {\n                    return this.value.eval(context).toCSS();\n                }\n            };\n        }\n    }\n\n    try {\n        result = expression.call(evalContext);\n    } catch (e) {\n        throw { message: `JavaScript evaluation error: '${e.name}: ${e.message.replace(/[\"]/g, '\\'')}'` ,\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n    return result;\n};\nJsEvalNode.prototype.jsify = obj => {\n    if (Array.isArray(obj.value) && (obj.value.length > 1)) {\n        return `[${obj.value.map(v => v.toCSS()).join(', ')}]`;\n    } else {\n        return obj.toCSS();\n    }\n};\n\nexport default JsEvalNode;\n","import JsEvalNode from './js-eval-node';\nimport Dimension from './dimension';\nimport Quoted from './quoted';\nimport Anonymous from './anonymous';\n\nclass JavaScript extends JsEvalNode {\n    constructor(string, escaped, index, currentFileInfo) {\n        this.escaped = escaped;\n        this.expression = string;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        const result = this.evaluateJavaScript(this.expression, context);\n        const type = typeof result;\n\n        if (type === 'number' && !isNaN(result)) {\n            return new Dimension(result);\n        } else if (type === 'string') {\n            return new Quoted(`\"${result}\"`, result, this.escaped, this._index);\n        } else if (Array.isArray(result)) {\n            return new Anonymous(result.join(', '));\n        } else {\n            return new Anonymous(result);\n        }\n    }\n}\n\nJavaScript.prototype.type = 'JavaScript';\nexport default JavaScript;\n","import Node from './node';\n\nclass Assignment extends Node {\n    constructor(key, val) {\n        this.key = key;\n        this.value = val;\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    eval(context) {\n        if (this.value.eval) {\n            return new Assignment(this.key, this.value.eval(context));\n        }\n        return this;\n    }\n\n    genCSS(context, output) {\n        output.add(`${this.key}=`);\n        if (this.value.genCSS) {\n            this.value.genCSS(context, output);\n        } else {\n            output.add(this.value);\n        }\n    }\n}\n\nAssignment.prototype.type = 'Assignment';\nexport default Assignment;\n","import Node from './node';\n\nclass Condition extends Node {\n    constructor(op, l, r, i, negate) {\n        this.op = op.trim();\n        this.lvalue = l;\n        this.rvalue = r;\n        this._index = i;\n        this.negate = negate;\n    }\n\n    accept(visitor) {\n        this.lvalue = visitor.visit(this.lvalue);\n        this.rvalue = visitor.visit(this.rvalue);\n    }\n\n    eval(context) {\n        const result = ((op, a, b) => {\n            switch (op) {\n                case 'and': return a && b;\n                case 'or':  return a || b;\n                default:\n                    switch (Node.compare(a, b)) {\n                        case -1:\n                            return op === '<' || op === '=<' || op === '<=';\n                        case 0:\n                            return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                        case 1:\n                            return op === '>' || op === '>=';\n                        default:\n                            return false;\n                    }\n            }\n        })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n        return this.negate ? !result : result;\n    }\n}\n\nCondition.prototype.type = 'Condition';\nexport default Condition;\n","import Node from './node';\n\nclass UnicodeDescriptor extends Node {\n    constructor(value) {\n        this.value = value;\n    }\n}\n\nUnicodeDescriptor.prototype.type = 'UnicodeDescriptor';\n\nexport default UnicodeDescriptor;\n","import Node from './node';\nimport Operation from './operation';\nimport Dimension from './dimension';\n\nclass Negative extends Node {\n    constructor(node) {\n        this.value = node;\n    }\n\n    genCSS(context, output) {\n        output.add('-');\n        this.value.genCSS(context, output);\n    }\n\n    eval(context) {\n        if (context.isMathOn()) {\n            return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\n        }\n        return new Negative(this.value.eval(context));\n    }\n}\n\nNegative.prototype.type = 'Negative';\nexport default Negative;\n","import Node from './node';\nimport Selector from './selector';\n\nclass Extend extends Node {\n    constructor(selector, option, index, currentFileInfo, visibilityInfo) {\n        this.selector = selector;\n        this.option = option;\n        this.object_id = Extend.next_id++;\n        this.parent_ids = [this.object_id];\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n\n        switch (option) {\n            case 'all':\n                this.allowBefore = true;\n                this.allowAfter = true;\n                break;\n            default:\n                this.allowBefore = false;\n                this.allowAfter = false;\n                break;\n        }\n        this.setParent(this.selector, this);\n    }\n\n    accept(visitor) {\n        this.selector = visitor.visit(this.selector);\n    }\n\n    eval(context) {\n        return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    }\n\n    clone(context) {\n        return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    }\n\n    // it concatenates (joins) all selectors in selector array\n    findSelfSelectors(selectors) {\n        let selfElements = [];\n        let i;\n        let selectorElements;\n\n        for (i = 0; i < selectors.length; i++) {\n            selectorElements = selectors[i].elements;\n            // duplicate the logic in genCSS function inside the selector node.\n            // future TODO - move both logics into the selector joiner visitor\n            if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n                selectorElements[0].combinator.value = ' ';\n            }\n            selfElements = selfElements.concat(selectors[i].elements);\n        }\n\n        this.selfSelectors = [new Selector(selfElements)];\n        this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n    }\n}\n\nExtend.next_id = 0;\n\nExtend.prototype.type = 'Extend';\nexport default Extend;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport DetachedRuleset from './detached-ruleset';\nimport LessError from '../less-error';\n\nclass VariableCall extends Node {\n    constructor(variable, index, currentFileInfo) {\n        this.variable = variable;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.allowRoot = true;\n    }\n\n    eval(context) {\n        let rules;\n        let detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\n        const error = new LessError({message: `Could not evaluate variable call ${this.variable}`});\n\n        if (!detachedRuleset.ruleset) {\n            if (detachedRuleset.rules) {\n                rules = detachedRuleset;\n            }\n            else if (Array.isArray(detachedRuleset)) {\n                rules = new Ruleset('', detachedRuleset);\n            }\n            else if (Array.isArray(detachedRuleset.value)) {\n                rules = new Ruleset('', detachedRuleset.value);\n            }\n            else {\n                throw error;\n            }\n            detachedRuleset = new DetachedRuleset(rules);\n        }\n        if (detachedRuleset.ruleset) {\n            return detachedRuleset.callEval(context);\n        }\n        throw error;\n    }\n}\n\nVariableCall.prototype.type = 'VariableCall';\nexport default VariableCall;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport Selector from './selector';\n\nclass NamespaceValue extends Node {\n    constructor(ruleCall, lookups, important, index, fileInfo) {\n        this.value = ruleCall;\n        this.lookups = lookups;\n        this.important = important;\n        this._index = index;\n        this._fileInfo = fileInfo;\n    }\n\n    eval(context) {\n        let i;\n        let j;\n        let name;\n        let rules = this.value.eval(context);\n\n        for (i = 0; i < this.lookups.length; i++) {\n            name = this.lookups[i];\n\n            /**\n             * Eval'd DRs return rulesets.\n             * Eval'd mixins return rules, so let's make a ruleset if we need it.\n             * We need to do this because of late parsing of values\n             */\n            if (Array.isArray(rules)) {\n                rules = new Ruleset([new Selector()], rules);\n            }\n\n            if (name === '') {\n                rules = rules.lastDeclaration();\n            }\n            else if (name.charAt(0) === '@') {\n                if (name.charAt(1) === '@') {\n                    name = `@${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                if (rules.variables) {\n                    rules = rules.variable(name);\n                }\n                \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `variable ${name} not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n            }\n            else {\n                if (name.substring(0, 2) === '$@') {\n                    name = `$${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                else {\n                    name = name.charAt(0) === '$' ? name : `$${name}`;\n                }\n                if (rules.properties) {\n                    rules = rules.property(name);\n                }\n            \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `property \"${name.substr(1)}\" not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n                // Properties are an array of values, since a ruleset can have multiple props.\n                // We pick the last one (the \"cascaded\" value)\n                rules = rules[rules.length - 1];\n            }\n\n            if (rules.value) {\n                rules = rules.eval(context).value;\n            }\n            if (rules.ruleset) {\n                rules = rules.ruleset.eval(context);\n            }\n        }\n        return rules;\n    }\n}\n\nNamespaceValue.prototype.type = 'NamespaceValue';\nexport default NamespaceValue;\n","import Selector from './selector';\nimport Element from './element';\nimport Ruleset from './ruleset';\nimport Declaration from './declaration';\nimport DetachedRuleset from './detached-ruleset';\nimport Expression from './expression';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nclass Definition extends Ruleset {\n    constructor(name, params, rules, condition, variadic, frames, visibilityInfo) {\n        this.name = name || 'anonymous mixin';\n        this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\n        this.params = params;\n        this.condition = condition;\n        this.variadic = variadic;\n        this.arity = params.length;\n        this.rules = rules;\n        this._lookups = {};\n        const optionalParameters = [];\n        this.required = params.reduce((count, p) => {\n            if (!p.name || (p.name && !p.value)) {\n                return count + 1;\n            }\n            else {\n                optionalParameters.push(p.name);\n                return count;\n            }\n        }, 0);\n        this.optionalParameters = optionalParameters;\n        this.frames = frames;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n    }\n\n    accept(visitor) {\n        if (this.params && this.params.length) {\n            this.params = visitor.visitArray(this.params);\n        }\n        this.rules = visitor.visitArray(this.rules);\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    }\n\n    evalParams(context, mixinEnv, args, evaldArguments) {\n        /* jshint boss:true */\n        const frame = new Ruleset(null, null);\n\n        let varargs;\n        let arg;\n        const params = utils.copyArray(this.params);\n        let i;\n        let j;\n        let val;\n        let name;\n        let isNamedFound;\n        let argIndex;\n        let argsLength = 0;\n\n        if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n            frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n        }\n        mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n\n        if (args) {\n            args = utils.copyArray(args);\n            argsLength = args.length;\n\n            for (i = 0; i < argsLength; i++) {\n                arg = args[i];\n                if (name = (arg && arg.name)) {\n                    isNamedFound = false;\n                    for (j = 0; j < params.length; j++) {\n                        if (!evaldArguments[j] && name === params[j].name) {\n                            evaldArguments[j] = arg.value.eval(context);\n                            frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                            isNamedFound = true;\n                            break;\n                        }\n                    }\n                    if (isNamedFound) {\n                        args.splice(i, 1);\n                        i--;\n                        continue;\n                    } else {\n                        throw { type: 'Runtime', message: `Named argument for ${this.name} ${args[i].name} not found` };\n                    }\n                }\n            }\n        }\n        argIndex = 0;\n        for (i = 0; i < params.length; i++) {\n            if (evaldArguments[i]) { continue; }\n\n            arg = args && args[argIndex];\n\n            if (name = params[i].name) {\n                if (params[i].variadic) {\n                    varargs = [];\n                    for (j = argIndex; j < argsLength; j++) {\n                        varargs.push(args[j].value.eval(context));\n                    }\n                    frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n                } else {\n                    val = arg && arg.value;\n                    if (val) {\n                        // This was a mixin call, pass in a detached ruleset of it's eval'd rules\n                        if (Array.isArray(val)) {\n                            val = new DetachedRuleset(new Ruleset('', val));\n                        }\n                        else {\n                            val = val.eval(context);\n                        }\n                    } else if (params[i].value) {\n                        val = params[i].value.eval(mixinEnv);\n                        frame.resetCache();\n                    } else {\n                        throw { type: 'Runtime', message: `wrong number of arguments for ${this.name} (${argsLength} for ${this.arity})` };\n                    }\n\n                    frame.prependRule(new Declaration(name, val));\n                    evaldArguments[i] = val;\n                }\n            }\n\n            if (params[i].variadic && args) {\n                for (j = argIndex; j < argsLength; j++) {\n                    evaldArguments[j] = args[j].value.eval(context);\n                }\n            }\n            argIndex++;\n        }\n\n        return frame;\n    }\n\n    makeImportant() {\n        const rules = !this.rules ? this.rules : this.rules.map(r => {\n            if (r.makeImportant) {\n                return r.makeImportant(true);\n            } else {\n                return r;\n            }\n        });\n        const result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n        return result;\n    }\n\n    eval(context) {\n        return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || utils.copyArray(context.frames));\n    }\n\n    evalCall(context, args, important) {\n        const _arguments = [];\n        const mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\n        const frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\n        let rules;\n        let ruleset;\n\n        frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n\n        rules = utils.copyArray(this.rules);\n\n        ruleset = new Ruleset(null, rules);\n        ruleset.originalRuleset = this;\n        ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n        if (important) {\n            ruleset = ruleset.makeImportant();\n        }\n        return ruleset;\n    }\n\n    matchCondition(args, context) {\n        if (this.condition && !this.condition.eval(\n            new contexts.Eval(context,\n                [this.evalParams(context, /* the parameter variables */\n                    new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\n                .concat(this.frames || []) // the parent namespace/mixin frames\n                .concat(context.frames)))) { // the current environment frames\n            return false;\n        }\n        return true;\n    }\n\n    matchArgs(args, context) {\n        const allArgsCnt = (args && args.length) || 0;\n        let len;\n        const optionalParameters = this.optionalParameters;\n        const requiredArgsCnt = !args ? 0 : args.reduce((count, p) => {\n            if (optionalParameters.indexOf(p.name) < 0) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0);\n\n        if (!this.variadic) {\n            if (requiredArgsCnt < this.required) {\n                return false;\n            }\n            if (allArgsCnt > this.params.length) {\n                return false;\n            }\n        } else {\n            if (requiredArgsCnt < (this.required - 1)) {\n                return false;\n            }\n        }\n\n        // check patterns\n        len = Math.min(requiredArgsCnt, this.arity);\n\n        for (let i = 0; i < len; i++) {\n            if (!this.params[i].name && !this.params[i].variadic) {\n                if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\nDefinition.prototype.type = 'MixinDefinition';\nDefinition.prototype.evalFirst = true;\nexport default Definition;\n","import Node from './node';\nimport Selector from './selector';\nimport MixinDefinition from './mixin-definition';\nimport defaultFunc from '../functions/default';\n\nclass MixinCall extends Node {\n    constructor(elements, args, index, currentFileInfo, important) {\n        this.selector = new Selector(elements);\n        this.arguments = args || [];\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.important = important;\n        this.allowRoot = true;\n        this.setParent(this.selector, this);\n    }\n\n    accept(visitor) {\n        if (this.selector) {\n            this.selector = visitor.visit(this.selector);\n        }\n        if (this.arguments.length) {\n            this.arguments = visitor.visitArray(this.arguments);\n        }\n    }\n\n    eval(context) {\n        let mixins;\n        let mixin;\n        let mixinPath;\n        const args = [];\n        let arg;\n        let argValue;\n        const rules = [];\n        let match = false;\n        let i;\n        let m;\n        let f;\n        let isRecursive;\n        let isOneFound;\n        const candidates = [];\n        let candidate;\n        const conditionResult = [];\n        let defaultResult;\n        const defFalseEitherCase = -1;\n        const defNone = 0;\n        const defTrue = 1;\n        const defFalse = 2;\n        let count;\n        let originalRuleset;\n        let noArgumentsFilter;\n\n        this.selector = this.selector.eval(context);\n\n        function calcDefGroup(mixin, mixinPath) {\n            let f;\n            let p;\n            let namespace;\n\n            for (f = 0; f < 2; f++) {\n                conditionResult[f] = true;\n                defaultFunc.value(f);\n                for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n                    namespace = mixinPath[p];\n                    if (namespace.matchCondition) {\n                        conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n                    }\n                }\n                if (mixin.matchCondition) {\n                    conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n                }\n            }\n            if (conditionResult[0] || conditionResult[1]) {\n                if (conditionResult[0] != conditionResult[1]) {\n                    return conditionResult[1] ?\n                        defTrue : defFalse;\n                }\n\n                return defNone;\n            }\n            return defFalseEitherCase;\n        }\n\n        for (i = 0; i < this.arguments.length; i++) {\n            arg = this.arguments[i];\n            argValue = arg.value.eval(context);\n            if (arg.expand && Array.isArray(argValue.value)) {\n                argValue = argValue.value;\n                for (m = 0; m < argValue.length; m++) {\n                    args.push({value: argValue[m]});\n                }\n            } else {\n                args.push({name: arg.name, value: argValue});\n            }\n        }\n\n        noArgumentsFilter = rule => rule.matchArgs(null, context);\n\n        for (i = 0; i < context.frames.length; i++) {\n            if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n                isOneFound = true;\n\n                // To make `default()` function independent of definition order we have two \"subpasses\" here.\n                // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n                // and build candidate list with corresponding flags. Then, when we know all possible matches,\n                // we make a final decision.\n\n                for (m = 0; m < mixins.length; m++) {\n                    mixin = mixins[m].rule;\n                    mixinPath = mixins[m].path;\n                    isRecursive = false;\n                    for (f = 0; f < context.frames.length; f++) {\n                        if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                            isRecursive = true;\n                            break;\n                        }\n                    }\n                    if (isRecursive) {\n                        continue;\n                    }\n\n                    if (mixin.matchArgs(args, context)) {\n                        candidate = {mixin, group: calcDefGroup(mixin, mixinPath)};\n\n                        if (candidate.group !== defFalseEitherCase) {\n                            candidates.push(candidate);\n                        }\n\n                        match = true;\n                    }\n                }\n\n                defaultFunc.reset();\n\n                count = [0, 0, 0];\n                for (m = 0; m < candidates.length; m++) {\n                    count[candidates[m].group]++;\n                }\n\n                if (count[defNone] > 0) {\n                    defaultResult = defFalse;\n                } else {\n                    defaultResult = defTrue;\n                    if ((count[defTrue] + count[defFalse]) > 1) {\n                        throw { type: 'Runtime',\n                            message: `Ambiguous use of \\`default()\\` found when matching for \\`${this.format(args)}\\``,\n                            index: this.getIndex(), filename: this.fileInfo().filename };\n                    }\n                }\n\n                for (m = 0; m < candidates.length; m++) {\n                    candidate = candidates[m].group;\n                    if ((candidate === defNone) || (candidate === defaultResult)) {\n                        try {\n                            mixin = candidates[m].mixin;\n                            if (!(mixin instanceof MixinDefinition)) {\n                                originalRuleset = mixin.originalRuleset || mixin;\n                                mixin = new MixinDefinition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                                mixin.originalRuleset = originalRuleset;\n                            }\n                            const newRules = mixin.evalCall(context, args, this.important).rules;\n                            this._setVisibilityToReplacement(newRules);\n                            Array.prototype.push.apply(rules, newRules);\n                        } catch (e) {\n                            throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\n                        }\n                    }\n                }\n\n                if (match) {\n                    return rules;\n                }\n            }\n        }\n        if (isOneFound) {\n            throw { type:    'Runtime',\n                message: `No matching definition was found for \\`${this.format(args)}\\``,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        } else {\n            throw { type:    'Name',\n                message: `${this.selector.toCSS().trim()} is undefined`,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        }\n    }\n\n    _setVisibilityToReplacement(replacement) {\n        let i;\n        let rule;\n        if (this.blocksVisibility()) {\n            for (i = 0; i < replacement.length; i++) {\n                rule = replacement[i];\n                rule.addVisibilityBlock();\n            }\n        }\n    }\n\n    format(args) {\n        return `${this.selector.toCSS().trim()}(${args ? args.map(a => {\n        let argValue = '';\n        if (a.name) {\n            argValue += `${a.name}:`;\n        }\n        if (a.value.toCSS) {\n            argValue += a.value.toCSS();\n        } else {\n            argValue += '???';\n        }\n        return argValue;\n    }).join(', ') : ''})`;\n    }\n}\n\nMixinCall.prototype.type = 'MixinCall';\nexport default MixinCall;\n","const tree = Object.create(null);\n\nimport Node from './node';\nimport Color from './color';\nimport AtRule from './atrule';\nimport DetachedRuleset from './detached-ruleset';\nimport Operation from './operation';\nimport Dimension from './dimension';\nimport Unit from './unit';\nimport Keyword from './keyword';\nimport Variable from './variable';\nimport Property from './property';\nimport Ruleset from './ruleset';\nimport Element from './element';\nimport Attribute from './attribute';\nimport Combinator from './combinator';\nimport Selector from './selector';\nimport Quoted from './quoted';\nimport Expression from './expression';\nimport Declaration from './declaration';\nimport Call from './call';\nimport URL from './url';\nimport Import from './import';\nimport Comment from './comment';\nimport Anonymous from './anonymous';\nimport Value from './value';\nimport JavaScript from './javascript';\nimport Assignment from './assignment';\nimport Condition from './condition';\nimport Paren from './paren';\nimport Media from './media';\nimport UnicodeDescriptor from './unicode-descriptor';\nimport Negative from './negative';\nimport Extend from './extend';\nimport VariableCall from './variable-call';\nimport NamespaceValue from './namespace-value';\n\n// mixins\nimport MixinCall from './mixin-call';\nimport MixinDefinition from './mixin-definition';\n\nexport default {\n    Node, Color, AtRule, DetachedRuleset, Operation,\n    Dimension, Unit, Keyword, Variable, Property,\n    Ruleset, Element, Attribute, Combinator, Selector,\n    Quoted, Expression, Declaration, Call, URL, Import,\n    Comment, Anonymous, Value, JavaScript, Assignment,\n    Condition, Paren, Media, UnicodeDescriptor, Negative,\n    Extend, VariableCall, NamespaceValue,\n    mixin: {\n        Call: MixinCall,\n        Definition: MixinDefinition\n    }\n};","export default {\n    error: function(msg) {\n        this._fireEvent('error', msg);\n    },\n    warn: function(msg) {\n        this._fireEvent('warn', msg);\n    },\n    info: function(msg) {\n        this._fireEvent('info', msg);\n    },\n    debug: function(msg) {\n        this._fireEvent('debug', msg);\n    },\n    addListener: function(listener) {\n        this._listeners.push(listener);\n    },\n    removeListener: function(listener) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            if (this._listeners[i] === listener) {\n                this._listeners.splice(i, 1);\n                return;\n            }\n        }\n    },\n    _fireEvent: function(type, msg) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            const logFunction = this._listeners[i][type];\n            if (logFunction) {\n                logFunction(msg);\n            }\n        }\n    },\n    _listeners: []\n};\n","/**\n * @todo Document why this abstraction exists, and the relationship between\n *       environment, file managers, and plugin manager\n */\n\nimport logger from '../logger';\n\nclass environment {\n    constructor(externalEnvironment, fileManagers) {\n        this.fileManagers = fileManagers || [];\n        externalEnvironment = externalEnvironment || {};\n\n        const optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\n        const requiredFunctions = [];\n        const functions = requiredFunctions.concat(optionalFunctions);\n\n        for (let i = 0; i < functions.length; i++) {\n            const propName = functions[i];\n            const environmentFunc = externalEnvironment[propName];\n            if (environmentFunc) {\n                this[propName] = environmentFunc.bind(externalEnvironment);\n            } else if (i < requiredFunctions.length) {\n                this.warn(`missing required function in environment - ${propName}`);\n            }\n        }\n    }\n\n    getFileManager(filename, currentDirectory, options, environment, isSync) {\n\n        if (!filename) {\n            logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n        }\n        if (currentDirectory == null) {\n            logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n        }\n\n        let fileManagers = this.fileManagers;\n        if (options.pluginManager) {\n            fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n        }\n        for (let i = fileManagers.length - 1; i >= 0 ; i--) {\n            const fileManager = fileManagers[i];\n            if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n                return fileManager;\n            }\n        }\n        return null;\n    }\n\n    addFileManager(fileManager) {\n        this.fileManagers.push(fileManager);\n    }\n\n    clearFileManagers() {\n        this.fileManagers = [];\n    }\n}\n\nexport default environment;\n","const abstractFileManager = () => {\n};\n\nabstractFileManager.prototype.getPath = filename => {\n    let j = filename.lastIndexOf('?');\n    if (j > 0) {\n        filename = filename.slice(0, j);\n    }\n    j = filename.lastIndexOf('/');\n    if (j < 0) {\n        j = filename.lastIndexOf('\\\\');\n    }\n    if (j < 0) {\n        return '';\n    }\n    return filename.slice(0, j + 1);\n};\n\nabstractFileManager.prototype.tryAppendExtension = (path, ext) => /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\n\nabstractFileManager.prototype.tryAppendLessExtension = function(path) {\n    return this.tryAppendExtension(path, '.less');\n};\n\nabstractFileManager.prototype.supportsSync = () => false;\n\nabstractFileManager.prototype.alwaysMakePathsAbsolute = () => false;\n\nabstractFileManager.prototype.isPathAbsolute = filename => (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\n// TODO: pull out / replace?\nabstractFileManager.prototype.join = (basePath, laterPath) => {\n    if (!basePath) {\n        return laterPath;\n    }\n    return basePath + laterPath;\n};\n\nabstractFileManager.prototype.pathDiff = function pathDiff(url, baseUrl) {\n    // diff between two paths to create a relative path\n\n    const urlParts = this.extractUrlParts(url);\n\n    const baseUrlParts = this.extractUrlParts(baseUrl);\n    let i;\n    let max;\n    let urlDirectories;\n    let baseUrlDirectories;\n    let diff = '';\n    if (urlParts.hostPart !== baseUrlParts.hostPart) {\n        return '';\n    }\n    max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n    for (i = 0; i < max; i++) {\n        if (baseUrlParts.directories[i] !== urlParts.directories[i]) { break; }\n    }\n    baseUrlDirectories = baseUrlParts.directories.slice(i);\n    urlDirectories = urlParts.directories.slice(i);\n    for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n        diff += '../';\n    }\n    for (i = 0; i < urlDirectories.length - 1; i++) {\n        diff += `${urlDirectories[i]}/`;\n    }\n    return diff;\n};\n// helper function, not part of API\nabstractFileManager.prototype.extractUrlParts = function extractUrlParts(url, baseUrl) {\n    // urlParts[1] = protocol://hostname/ OR /\n    // urlParts[2] = / if path relative to host base\n    // urlParts[3] = directories\n    // urlParts[4] = filename\n    // urlParts[5] = parameters\n\n    const urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i;\n\n    const urlParts = url.match(urlPartsRegex);\n    const returner = {};\n    let rawDirectories = [];\n    const directories = [];\n    let i;\n    let baseUrlParts;\n\n    if (!urlParts) {\n        throw new Error(`Could not parse sheet href - '${url}'`);\n    }\n\n    // Stylesheets in IE don't always return the full path\n    if (baseUrl && (!urlParts[1] || urlParts[2])) {\n        baseUrlParts = baseUrl.match(urlPartsRegex);\n        if (!baseUrlParts) {\n            throw new Error(`Could not parse page url - '${baseUrl}'`);\n        }\n        urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\n        if (!urlParts[2]) {\n            urlParts[3] = baseUrlParts[3] + urlParts[3];\n        }\n    }\n\n    if (urlParts[3]) {\n        rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\n\n        // collapse '..' and skip '.'\n        for (i = 0; i < rawDirectories.length; i++) {\n\n            if (rawDirectories[i] === '..') {\n                directories.pop();\n            }\n            else if (rawDirectories[i] !== '.') {\n                directories.push(rawDirectories[i]);\n            }\n        \n        }\n    }\n\n    returner.hostPart = urlParts[1];\n    returner.directories = directories;\n    returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\n    returner.path = (urlParts[1] || '') + directories.join('/');\n    returner.filename = urlParts[4];\n    returner.fileUrl = returner.path + (urlParts[4] || '');\n    returner.url = returner.fileUrl + (urlParts[5] || '');\n    return returner;\n};\n\nexport default abstractFileManager;\n","import functionRegistry from '../functions/function-registry';\nimport LessError from '../less-error';\n\nclass AbstractPluginLoader {\n    constructor() {\n        // Implemented by Node.js plugin loader\n        this.require = () => null\n    }\n\n    evalPlugin(contents, context, imports, pluginOptions, fileInfo) {\n        let loader;\n        let registry;\n        let pluginObj;\n        let localModule;\n        let pluginManager;\n        let filename;\n        let result;\n\n        pluginManager = context.pluginManager;\n\n        if (fileInfo) {\n            if (typeof fileInfo === 'string') {\n                filename = fileInfo;\n            }\n            else {\n                filename = fileInfo.filename;\n            }\n        }\n        const shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\n\n        if (filename) {\n            pluginObj = pluginManager.get(filename);\n\n            if (pluginObj) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                if (result) {\n                    return result;\n                }\n                try {\n                    if (pluginObj.use) {\n                        pluginObj.use.call(this.context, pluginObj);\n                    }\n                }\n                catch (e) {\n                    e.message = e.message || 'Error during @plugin call';\n                    return new LessError(e, imports, filename);\n                }\n                return pluginObj;\n            }\n        }\n        localModule = {\n            exports: {},\n            pluginManager,\n            fileInfo\n        };\n        registry = functionRegistry.create();\n\n        const registerPlugin = obj => {\n            pluginObj = obj;\n        };\n\n        try {\n            loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n            loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n        }\n        catch (e) {\n            return new LessError(e, imports, filename);\n        }\n\n        if (!pluginObj) {\n            pluginObj = localModule.exports;\n        }\n        pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n\n        if (pluginObj instanceof LessError) {\n            return pluginObj;\n        }\n\n        if (pluginObj) {\n            pluginObj.imports = imports;\n            pluginObj.filename = filename;\n\n            // For < 3.x (or unspecified minVersion) - setOptions() before install()\n            if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n                if (result) {\n                    return result;\n                }\n            }\n\n            // Run on first load\n            pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n            pluginObj.functions = registry.getLocalFunctions();\n\n            // Need to call setOptions again because the pluginObj might have functions\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n            if (result) {\n                return result;\n            }\n\n            // Run every @plugin call\n            try {\n                if (pluginObj.use) {\n                    pluginObj.use.call(this.context, pluginObj);\n                }\n            }\n            catch (e) {\n                e.message = e.message || 'Error during @plugin call';\n                return new LessError(e, imports, filename);\n            }\n\n        }\n        else {\n            return new LessError({ message: 'Not a valid plugin' }, imports, filename);\n        }\n\n        return pluginObj;\n    }\n\n    trySetOptions(plugin, filename, name, options) {\n        if (options && !plugin.setOptions) {\n            return new LessError({\n                message: `Options have been provided but the plugin ${name} does not support any options.`\n            });\n        }\n        try {\n            plugin.setOptions && plugin.setOptions(options);\n        }\n        catch (e) {\n            return new LessError(e);\n        }\n    }\n\n    validatePlugin(plugin, filename, name) {\n        if (plugin) {\n            // support plugins being a function\n            // so that the plugin can be more usable programmatically\n            if (typeof plugin === 'function') {\n                plugin = new plugin();\n            }\n\n            if (plugin.minVersion) {\n                if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n                    return new LessError({\n                        message: `Plugin ${name} requires version ${this.versionToString(plugin.minVersion)}`\n                    });\n                }\n            }\n            return plugin;\n        }\n        return null;\n    }\n\n    compareVersion(aVersion, bVersion) {\n        if (typeof aVersion === 'string') {\n            aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n            aVersion.shift();\n        }\n        for (let i = 0; i < aVersion.length; i++) {\n            if (aVersion[i] !== bVersion[i]) {\n                return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\n            }\n        }\n        return 0;\n    }\n\n    versionToString(version) {\n        let versionString = '';\n        for (let i = 0; i < version.length; i++) {\n            versionString += (versionString ? '.' : '') + version[i];\n        }\n        return versionString;\n    }\n\n    printUsage(plugins) {\n        for (let i = 0; i < plugins.length; i++) {\n            const plugin = plugins[i];\n            if (plugin.printUsage) {\n                plugin.printUsage();\n            }\n        }\n    }\n}\n\nexport default AbstractPluginLoader;\n\n","import tree from '../tree';\nconst _visitArgs = { visitDeeper: true };\nlet _hasIndexed = false;\n\nfunction _noop(node) {\n    return node;\n}\n\nfunction indexNodeTypes(parent, ticker) {\n    // add .typeIndex to tree node types for lookup table\n    let key;\n\n    let child;\n    for (key in parent) { \n        /* eslint guard-for-in: 0 */\n        child = parent[key];\n        switch (typeof child) {\n            case 'function':\n                // ignore bound functions directly on tree which do not have a prototype\n                // or aren't nodes\n                if (child.prototype && child.prototype.type) {\n                    child.prototype.typeIndex = ticker++;\n                }\n                break;\n            case 'object':\n                ticker = indexNodeTypes(child, ticker);\n                break;\n        \n        }\n    }\n    return ticker;\n}\n\nclass Visitor {\n    constructor(implementation) {\n        this._implementation = implementation;\n        this._visitInCache = {};\n        this._visitOutCache = {};\n\n        if (!_hasIndexed) {\n            indexNodeTypes(tree, 1);\n            _hasIndexed = true;\n        }\n    }\n\n    visit(node) {\n        if (!node) {\n            return node;\n        }\n\n        const nodeTypeIndex = node.typeIndex;\n        if (!nodeTypeIndex) {\n            // MixinCall args aren't a node type?\n            if (node.value && node.value.typeIndex) {\n                this.visit(node.value);\n            }\n            return node;\n        }\n\n        const impl = this._implementation;\n        let func = this._visitInCache[nodeTypeIndex];\n        let funcOut = this._visitOutCache[nodeTypeIndex];\n        const visitArgs = _visitArgs;\n        let fnName;\n\n        visitArgs.visitDeeper = true;\n\n        if (!func) {\n            fnName = `visit${node.type}`;\n            func = impl[fnName] || _noop;\n            funcOut = impl[`${fnName}Out`] || _noop;\n            this._visitInCache[nodeTypeIndex] = func;\n            this._visitOutCache[nodeTypeIndex] = funcOut;\n        }\n\n        if (func !== _noop) {\n            const newNode = func.call(impl, node, visitArgs);\n            if (node && impl.isReplacing) {\n                node = newNode;\n            }\n        }\n\n        if (visitArgs.visitDeeper && node && node.accept) {\n            node.accept(this);\n        }\n\n        if (funcOut != _noop) {\n            funcOut.call(impl, node);\n        }\n\n        return node;\n    }\n\n    visitArray(nodes, nonReplacing) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n\n        // Non-replacing\n        if (nonReplacing || !this._implementation.isReplacing) {\n            for (i = 0; i < cnt; i++) {\n                this.visit(nodes[i]);\n            }\n            return nodes;\n        }\n\n        // Replacing\n        const out = [];\n        for (i = 0; i < cnt; i++) {\n            const evald = this.visit(nodes[i]);\n            if (evald === undefined) { continue; }\n            if (!evald.splice) {\n                out.push(evald);\n            } else if (evald.length) {\n                this.flatten(evald, out);\n            }\n        }\n        return out;\n    }\n\n    flatten(arr, out) {\n        if (!out) {\n            out = [];\n        }\n\n        let cnt;\n        let i;\n        let item;\n        let nestedCnt;\n        let j;\n        let nestedItem;\n\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n            item = arr[i];\n            if (item === undefined) {\n                continue;\n            }\n            if (!item.splice) {\n                out.push(item);\n                continue;\n            }\n\n            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                nestedItem = item[j];\n                if (nestedItem === undefined) {\n                    continue;\n                }\n                if (!nestedItem.splice) {\n                    out.push(nestedItem);\n                } else if (nestedItem.length) {\n                    this.flatten(nestedItem, out);\n                }\n            }\n        }\n\n        return out;\n    }\n}\n\nexport default Visitor;\n","class ImportSequencer {\n    constructor(onSequencerEmpty) {\n        this.imports = [];\n        this.variableImports = [];\n        this._onSequencerEmpty = onSequencerEmpty;\n        this._currentDepth = 0;\n    }\n\n    addImport(callback) {\n        const importSequencer = this;\n\n        const importItem = {\n            callback,\n            args: null,\n            isReady: false\n        };\n\n        this.imports.push(importItem);\n        return function(...args) {\n            importItem.args = Array.prototype.slice.call(args, 0);\n            importItem.isReady = true;\n            importSequencer.tryRun();\n        };\n    }\n\n    addVariableImport(callback) {\n        this.variableImports.push(callback);\n    }\n\n    tryRun() {\n        this._currentDepth++;\n        try {\n            while (true) {\n                while (this.imports.length > 0) {\n                    const importItem = this.imports[0];\n                    if (!importItem.isReady) {\n                        return;\n                    }\n                    this.imports = this.imports.slice(1);\n                    importItem.callback.apply(null, importItem.args);\n                }\n                if (this.variableImports.length === 0) {\n                    break;\n                }\n                const variableImport = this.variableImports[0];\n                this.variableImports = this.variableImports.slice(1);\n                variableImport();\n            }\n        } finally {\n            this._currentDepth--;\n        }\n        if (this._currentDepth === 0 && this._onSequencerEmpty) {\n            this._onSequencerEmpty();\n        }\n    }\n}\n\nexport default ImportSequencer;\n","import contexts from '../contexts';\nimport Visitor from './visitor';\nimport ImportSequencer from './import-sequencer';\nimport * as utils from '../utils';\n\nconst ImportVisitor = function(importer, finish) {\n\n    this._visitor = new Visitor(this);\n    this._importer = importer;\n    this._finish = finish;\n    this.context = new contexts.Eval();\n    this.importCount = 0;\n    this.onceFileDetectionMap = {};\n    this.recursionDetector = {};\n    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n};\n\nImportVisitor.prototype = {\n    isReplacing: false,\n    run: function (root) {\n        try {\n            // process the contents\n            this._visitor.visit(root);\n        }\n        catch (e) {\n            this.error = e;\n        }\n\n        this.isFinished = true;\n        this._sequencer.tryRun();\n    },\n    _onSequencerEmpty: function() {\n        if (!this.isFinished) {\n            return;\n        }\n        this._finish(this.error);\n    },\n    visitImport: function (importNode, visitArgs) {\n        const inlineCSS = importNode.options.inline;\n\n        if (!importNode.css || inlineCSS) {\n\n            const context = new contexts.Eval(this.context, utils.copyArray(this.context.frames));\n            const importParent = context.frames[0];\n\n            this.importCount++;\n            if (importNode.isVariableImport()) {\n                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n            } else {\n                this.processImportNode(importNode, context, importParent);\n            }\n        }\n        visitArgs.visitDeeper = false;\n    },\n    processImportNode: function(importNode, context, importParent) {\n        let evaldImportNode;\n        const inlineCSS = importNode.options.inline;\n\n        try {\n            evaldImportNode = importNode.evalForImport(context);\n        } catch (e) {\n            if (!e.filename) { e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename; }\n            // attempt to eval properly and treat as css\n            importNode.css = true;\n            // if that fails, this error will be thrown\n            importNode.error = e;\n        }\n\n        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n            if (evaldImportNode.options.multiple) {\n                context.importMultiple = true;\n            }\n\n            // try appending if we haven't determined if it is css or not\n            const tryAppendLessExtension = evaldImportNode.css === undefined;\n\n            for (let i = 0; i < importParent.rules.length; i++) {\n                if (importParent.rules[i] === importNode) {\n                    importParent.rules[i] = evaldImportNode;\n                    break;\n                }\n            }\n\n            const onImported = this.onImported.bind(this, evaldImportNode, context);\n            const sequencedOnImported = this._sequencer.addImport(onImported);\n\n            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(),\n                evaldImportNode.options, sequencedOnImported);\n        } else {\n            this.importCount--;\n            if (this.isFinished) {\n                this._sequencer.tryRun();\n            }\n        }\n    },\n    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\n        if (e) {\n            if (!e.filename) {\n                e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename;\n            }\n            this.error = e;\n        }\n\n        const importVisitor = this;\n        const inlineCSS = importNode.options.inline;\n        const isPlugin = importNode.options.isPlugin;\n        const isOptional = importNode.options.optional;\n        const duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n\n        if (!context.importMultiple) {\n            if (duplicateImport) {\n                importNode.skip = true;\n            } else {\n                importNode.skip = () => {\n                    if (fullPath in importVisitor.onceFileDetectionMap) {\n                        return true;\n                    }\n                    importVisitor.onceFileDetectionMap[fullPath] = true;\n                    return false;\n                };\n            }\n        }\n\n        if (!fullPath && isOptional) {\n            importNode.skip = true;\n        }\n\n        if (root) {\n            importNode.root = root;\n            importNode.importedFilename = fullPath;\n\n            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n                importVisitor.recursionDetector[fullPath] = true;\n\n                const oldContext = this.context;\n                this.context = context;\n                try {\n                    this._visitor.visit(root);\n                } catch (e) {\n                    this.error = e;\n                }\n                this.context = oldContext;\n            }\n        }\n\n        importVisitor.importCount--;\n\n        if (importVisitor.isFinished) {\n            importVisitor._sequencer.tryRun();\n        }\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.unshift(declNode);\n        } else {\n            visitArgs.visitDeeper = false;\n        }\n    },\n    visitDeclarationOut: function(declNode) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.shift();\n        }\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        this.context.frames.unshift(atRuleNode);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        this.context.frames.shift();\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        this.context.frames.unshift(mixinDefinitionNode);\n    },\n    visitMixinDefinitionOut: function (mixinDefinitionNode) {\n        this.context.frames.shift();\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        this.context.frames.unshift(rulesetNode);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.context.frames.shift();\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        this.context.frames.unshift(mediaNode.rules[0]);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.context.frames.shift();\n    }\n};\nexport default ImportVisitor;\n","class SetTreeVisibilityVisitor {\n    constructor(visible) {\n        this.visible = visible;\n    }\n\n    run(root) {\n        this.visit(root);\n    }\n\n    visitArray(nodes) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n        for (i = 0; i < cnt; i++) {\n            this.visit(nodes[i]);\n        }\n        return nodes;\n    }\n\n    visit(node) {\n        if (!node) {\n            return node;\n        }\n        if (node.constructor === Array) {\n            return this.visitArray(node);\n        }\n\n        if (!node.blocksVisibility || node.blocksVisibility()) {\n            return node;\n        }\n        if (this.visible) {\n            node.ensureVisibility();\n        } else {\n            node.ensureInvisibility();\n        }\n\n        node.accept(this);\n        return node;\n    }\n}\n\nexport default SetTreeVisibilityVisitor;","import tree from '../tree';\nimport Visitor from './visitor';\nimport logger from '../logger';\nimport * as utils from '../utils';\n\n/* jshint loopfunc:true */\n\nclass ExtendFinderVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n        this.contexts = [];\n        this.allExtendsStack = [[]];\n    }\n\n    run(root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n\n        let i;\n        let j;\n        let extend;\n        const allSelectorsExtendList = [];\n        let extendList;\n\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\n        const rules = rulesetNode.rules;\n\n        const ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n\n        // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n        const paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            const selectorPath = paths[i];\n            const selector = selectorPath[selectorPath.length - 1];\n            const selExtendList = selector.extendList;\n\n            extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList)\n                                       : allSelectorsExtendList;\n\n            if (extendList) {\n                extendList = extendList.map(allSelectorsExtend => allSelectorsExtend.clone());\n            }\n\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n    }\n\n    visitRulesetOut(rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        atRuleNode.allExtends = [];\n        this.allExtendsStack.push(atRuleNode.allExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n}\n\nclass ProcessExtendsVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        const extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) { return root; }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        const newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    }\n\n    checkExtendsForNonMatched(extendList) {\n        const indices = this.extendIndices;\n        extendList.filter(extend => !extend.hasFoundMatches && extend.parent_ids.length == 1).forEach(extend => {\n            let selector = '_unknown_';\n            try {\n                selector = extend.selector.toCSS({});\n            }\n            catch (_) {}\n\n            if (!indices[`${extend.index} ${selector}`]) {\n                indices[`${extend.index} ${selector}`] = true;\n                logger.warn(`extend '${selector}' has no matches`);\n            }\n        });\n    }\n\n    doExtendChaining(extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n\n        let extendIndex;\n\n        let targetExtendIndex;\n        let matches;\n        const extendsToAdd = [];\n        let newSelector;\n        const extendVisitor = this;\n        let selectorPath;\n        let extend;\n        let targetExtend;\n        let newExtend;\n\n        iterationCount = iterationCount || 0;\n\n        // loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n\n                // look for circular references\n                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }\n\n                // find a match in the target extends self selector (the bit before :extend)\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n\n                    // we found a match, so for each self selector..\n                    extend.selfSelectors.forEach(selfSelector => {\n                        const info = targetExtend.visibilityInfo();\n\n                        // process the extend as usual\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n\n                        // but now we create a new extend from it\n                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                        newExtend.selfSelectors = newSelector;\n\n                        // add the extend onto the list of extends for that selector\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n\n                        // record that we need to add it.\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n\n                        // remember its parents for circular references\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\n                        // extends will look at the same selector path, so when extending\n                        // we know that any others will be duplicates in terms of what is added to the css\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n\n        if (extendsToAdd.length) {\n            // try to detect circular references to stop a stack overflow.\n            // may no longer be needed.\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                let selectorOne = '{unable to calculate}';\n                let selectorTwo = '{unable to calculate}';\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                }\n                catch (e) {}\n                throw { message: `extend circular reference detected. One of the circular extends is currently:${selectorOne}:extend(${selectorTwo})`};\n            }\n\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n            // d extending e...\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    }\n\n    visitDeclaration(ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitSelector(selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        let matches;\n        let pathIndex;\n        let extendIndex;\n        const allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\n        const selectorsToAdd = [];\n        const extendVisitor = this;\n        let selectorPath;\n\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n\n                // extending extends happens initially, before the main pass\n                if (rulesetNode.extendOnEveryPath) { continue; }\n                const extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) { continue; }\n\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n\n                    allExtends[extendIndex].selfSelectors.forEach(selfSelector => {\n                        let extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    }\n\n    findMatch(extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        let haystackSelectorIndex;\n\n        let hackstackSelector;\n        let hackstackElementIndex;\n        let haystackElement;\n        let targetCombinator;\n        let i;\n        const extendVisitor = this;\n        const needleElements = extend.selector.elements;\n        const potentialMatches = [];\n        let potentialMatch;\n        const matches = [];\n\n        // loop through the haystack elements\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                        initialCombinator: haystackElement.combinator});\n                }\n\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                    // work out what the resulting combinator will be\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n\n                    // if we don't match, null our match to indicate failure\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished &&\n                            (!extend.allowAfter &&\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n\n    isElementValuesEqual(elementValue1, elementValue2) {\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (let i = 0; i  < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    extendSelector(matches, selectorPath, replacementSelector, isVisible) {\n        // for a set of matches, replace each match with the replacement selector\n\n        let currentSelectorPathIndex = 0;\n\n        let currentSelectorPathElementIndex = 0;\n        let path = [];\n        let matchIndex;\n        let selector;\n        let firstElement;\n        let match;\n        let newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(\n                match.initialCombinator,\n                replacementSelector.elements[0].value,\n                replacementSelector.elements[0].isVariable,\n                replacementSelector.elements[0].getIndex(),\n                replacementSelector.elements[0].fileInfo()\n            );\n\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1]\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n\n            newElements = selector.elements\n                .slice(currentSelectorPathElementIndex, match.index)\n                .concat([firstElement])\n                .concat(replacementSelector.elements.slice(1));\n\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements =\n                    path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n\n                path.push(new tree.Selector(\n                    newElements\n                ));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1]\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(currentValue => {\n            // we can re-use elements here, because the visibility property matters only for selectors\n            const derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        let newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        let newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n}\n\nexport default ProcessExtendsVisitor;\n","import Visitor from './visitor';\n\nclass JoinSelectorVisitor {\n    constructor() {\n        this.contexts = [[]];\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        return this._visitor.visit(root);\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        const paths = [];\n        let selectors;\n\n        this.contexts.push(paths);\n\n        if (!rulesetNode.root) {\n            selectors = rulesetNode.selectors;\n            if (selectors) {\n                selectors = selectors.filter(selector => selector.getIsOutput());\n                rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\n                if (selectors) { rulesetNode.joinSelectors(paths, context, selectors); }\n            }\n            if (!selectors) { rulesetNode.rules = null; }\n            rulesetNode.paths = paths;\n        }\n    }\n\n    visitRulesetOut(rulesetNode) {\n        this.contexts.length = this.contexts.length - 1;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\n        }\n    }\n}\n\nexport default JoinSelectorVisitor;\n","import tree from '../tree';\nimport Visitor from './visitor';\n\nclass CSSVisitorUtils {\n    constructor(context) {\n        this._visitor = new Visitor(this);\n        this._context = context;\n    }\n\n    containsSilentNonBlockedChild(bodyRules) {\n        let rule;\n        if (!bodyRules) {\n            return false;\n        }\n        for (let r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                // the atrule contains something that was referenced (likely by extend)\n                // therefore it needs to be shown in output too\n                return true;\n            }\n        }\n        return false;\n    }\n\n    keepOnlyVisibleChilds(owner) {\n        if (owner && owner.rules) {\n            owner.rules = owner.rules.filter(thing => thing.isVisible());\n        }\n    }\n\n    isEmpty(owner) {\n        return (owner && owner.rules) \n            ? (owner.rules.length === 0) : true;\n    }\n\n    hasVisibleSelector(rulesetNode) {\n        return (rulesetNode && rulesetNode.paths)\n            ? (rulesetNode.paths.length > 0) : false;\n    }\n\n    resolveVisibility(node, originalRules) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                return ;\n            }\n\n            return node;\n        }\n\n        const compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n            return ;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n\n        return node;\n    }\n\n    isVisibleRuleset(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\nconst ToCSSVisitor = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\n\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.blocksVisibility() || declNode.variable) {\n            return;\n        }\n        return declNode;\n    },\n\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        // mixin definitions do not get eval'd - this means they keep state\n        // so we have to clear that state here so it isn't used if toCSS is called twice\n        mixinNode.frames = [];\n    },\n\n    visitExtend: function (extendNode, visitArgs) {\n    },\n\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n\n    visitMedia: function(mediaNode, visitArgs) {\n        const originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return ;\n        }\n        return importNode;\n    },\n\n    visitAtRule: function(atRuleNode, visitArgs) {\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n        } else {\n            return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n        }\n    },\n\n    visitAnonymous: function(anonymousNode, visitArgs) {\n        if (!anonymousNode.blocksVisibility()) {\n            anonymousNode.accept(this._visitor);\n            return anonymousNode;\n        }\n    },\n\n    visitAtRuleWithBody: function(atRuleNode, visitArgs) {\n        // if there is only one nested ruleset and that one has no path, then it is\n        // just fake ruleset\n        function hasFakeRuleset(atRuleNode) {\n            const bodyRules = atRuleNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(atRuleNode) {\n            const nodeRules = atRuleNode.rules;\n            if (hasFakeRuleset(atRuleNode)) {\n                return nodeRules[0].rules;\n            }\n\n            return nodeRules;\n        }\n        // it is still true that it is only one ruleset in array\n        // this is last such moment\n        // process childs\n        const originalRules = getBodyRules(atRuleNode);\n        atRuleNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        if (!this.utils.isEmpty(atRuleNode)) {\n            this._mergeRules(atRuleNode.rules[0].rules);\n        }\n\n        return this.utils.resolveVisibility(atRuleNode, originalRules);\n    },\n\n    visitAtRuleWithoutBody: function(atRuleNode, visitArgs) {\n        if (atRuleNode.blocksVisibility()) {\n            return;\n        }\n\n        if (atRuleNode.name === '@charset') {\n            // Only output the debug info together with subsequent @charset definitions\n            // a comment (or @media statement) before the actual @charset atrule would\n            // be considered illegal css as it has to be on the first line\n            if (this.charset) {\n                if (atRuleNode.debugInfo) {\n                    const comment = new tree.Comment(`/* ${atRuleNode.toCSS(this._context).replace(/\\n/g, '')} */\\n`);\n                    comment.debugInfo = atRuleNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n\n        return atRuleNode;\n    },\n\n    checkValidNodes: function(rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n\n        for (let i = 0; i < rules.length; i++) {\n            const ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                throw { message: 'Properties must be inside selector blocks. They cannot be in the root',\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw { message: `Function '${ruleNode.name}' is undefined`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw { message: `${ruleNode.type} node returned by a function is not valid here`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n        }\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        // at this point rulesets are nested into each other\n        let rule;\n\n        const rulesets = [];\n\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n        if (!rulesetNode.root) {\n            // remove invisible paths\n            this._compileRulesetPaths(rulesetNode);\n\n            // remove rulesets from this ruleset body and compile them separately\n            const nodeRules = rulesetNode.rules;\n\n            let nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (let i = 0; i < nodeRuleCnt; ) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    // visit because we are moving them out from being a child\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            // accept the visitor to remove rules and refactor itself\n            // then we can decide nogw whether we want it or not\n            // compile body\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n        } else { // if (! rulesetNode.root) {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n\n        // now decide whether we keep the ruleset\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n\n    _compileRulesetPaths: function(rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths\n                .filter(p => {\n                    let i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new(tree.Combinator)('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n        }\n    },\n\n    _removeDuplicateRules: function(rules) {\n        if (!rules) { return; }\n\n        // remove duplicates\n        const ruleCache = {};\n\n        let ruleList;\n        let rule;\n        let i;\n\n        for (i = rules.length - 1; i >= 0 ; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Declaration) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Declaration) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    const ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n\n    _mergeRules: function(rules) {\n        if (!rules) {\n            return; \n        }\n\n        const groups    = {};\n        const groupsArr = [];\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n            if (rule.merge) {\n                const key = rule.name;\n                groups[key] ? rules.splice(i--, 1) : \n                    groupsArr.push(groups[key] = []);\n                groups[key].push(rule);\n            }\n        }\n\n        groupsArr.forEach(group => {\n            if (group.length > 0) {\n                const result = group[0];\n                let space  = [];\n                const comma  = [new tree.Expression(space)];\n                group.forEach(rule => {\n                    if ((rule.merge === '+') && (space.length > 0)) {\n                        comma.push(new tree.Expression(space = []));\n                    }\n                    space.push(rule.value);\n                    result.important = result.important || rule.important;\n                });\n                result.value = new tree.Value(comma);\n            }\n        });\n    }\n};\n\nexport default ToCSSVisitor;\n","import Visitor from './visitor';\nimport ImportVisitor from './import-visitor';\nimport MarkVisibleSelectorsVisitor from './set-tree-visibility-visitor';\nimport ExtendVisitor from './extend-visitor';\nimport JoinSelectorVisitor from './join-selector-visitor';\nimport ToCSSVisitor from './to-css-visitor';\n\nexport default {\n    Visitor,\n    ImportVisitor,\n    MarkVisibleSelectorsVisitor,\n    ExtendVisitor,\n    JoinSelectorVisitor,\n    ToCSSVisitor\n};\n","import chunker from './chunker';\n\nexport default () => {\n    let // Less input string\n    input;\n\n    let // current chunk\n    j;\n\n    const // holds state for backtracking\n    saveStack = [];\n\n    let // furthest index the parser has gone to\n    furthest;\n\n    let // if this is furthest we got to, this is the probably cause\n    furthestPossibleErrorMessage;\n\n    let // chunkified input\n    chunks;\n\n    let // current chunk\n    current;\n\n    let // index of current chunk, in `input`\n    currentPos;\n\n    const parserInput = {};\n    const CHARCODE_SPACE = 32;\n    const CHARCODE_TAB = 9;\n    const CHARCODE_LF = 10;\n    const CHARCODE_CR = 13;\n    const CHARCODE_PLUS = 43;\n    const CHARCODE_COMMA = 44;\n    const CHARCODE_FORWARD_SLASH = 47;\n    const CHARCODE_9 = 57;\n\n    function skipWhitespace(length) {\n        const oldi = parserInput.i;\n        const oldj = j;\n        const curr = parserInput.i - currentPos;\n        const endIndex = parserInput.i + current.length - curr;\n        const mem = (parserInput.i += length);\n        const inp = input;\n        let c;\n        let nextChar;\n        let comment;\n\n        for (; parserInput.i < endIndex; parserInput.i++) {\n            c = inp.charCodeAt(parserInput.i);\n\n            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n                nextChar = inp.charAt(parserInput.i + 1);\n                if (nextChar === '/') {\n                    comment = {index: parserInput.i, isLineComment: true};\n                    let nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\n                    if (nextNewLine < 0) {\n                        nextNewLine = endIndex;\n                    }\n                    parserInput.i = nextNewLine;\n                    comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n                    parserInput.commentStore.push(comment);\n                    continue;\n                } else if (nextChar === '*') {\n                    const nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\n                    if (nextStarSlash >= 0) {\n                        comment = {\n                            index: parserInput.i,\n                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                            isLineComment: false\n                        };\n                        parserInput.i += comment.text.length - 1;\n                        parserInput.commentStore.push(comment);\n                        continue;\n                    }\n                }\n                break;\n            }\n\n            if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\n                break;\n            }\n        }\n\n        current = current.slice(length + parserInput.i - mem + curr);\n        currentPos = parserInput.i;\n\n        if (!current.length) {\n            if (j < chunks.length - 1) {\n                current = chunks[++j];\n                skipWhitespace(0); // skip space at the beginning of a chunk\n                return true; // things changed\n            }\n            parserInput.finished = true;\n        }\n\n        return oldi !== parserInput.i || oldj !== j;\n    }\n\n    parserInput.save = () => {\n        currentPos = parserInput.i;\n        saveStack.push( { current, i: parserInput.i, j });\n    };\n    parserInput.restore = possibleErrorMessage => {\n\n        if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\n            furthest = parserInput.i;\n            furthestPossibleErrorMessage = possibleErrorMessage;\n        }\n        const state = saveStack.pop();\n        current = state.current;\n        currentPos = parserInput.i = state.i;\n        j = state.j;\n    };\n    parserInput.forget = () => {\n        saveStack.pop();\n    };\n    parserInput.isWhitespace = offset => {\n        const pos = parserInput.i + (offset || 0);\n        const code = input.charCodeAt(pos);\n        return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\n    };\n\n    // Specialization of $(tok)\n    parserInput.$re = tok => {\n        if (parserInput.i > currentPos) {\n            current = current.slice(parserInput.i - currentPos);\n            currentPos = parserInput.i;\n        }\n\n        const m = tok.exec(current);\n        if (!m) {\n            return null;\n        }\n\n        skipWhitespace(m[0].length);\n        if (typeof m === 'string') {\n            return m;\n        }\n\n        return m.length === 1 ? m[0] : m;\n    };\n\n    parserInput.$char = tok => {\n        if (input.charAt(parserInput.i) !== tok) {\n            return null;\n        }\n        skipWhitespace(1);\n        return tok;\n    };\n\n    parserInput.$str = tok => {\n        const tokLength = tok.length;\n\n        // https://jsperf.com/string-startswith/21\n        for (let i = 0; i < tokLength; i++) {\n            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                return null;\n            }\n        }\n\n        skipWhitespace(tokLength);\n        return tok;\n    };\n\n    parserInput.$quoted = loc => {\n        const pos = loc || parserInput.i;\n        const startChar = input.charAt(pos);\n\n        if (startChar !== '\\'' && startChar !== '\"') {\n            return;\n        }\n        const length = input.length;\n        const currentPosition = pos;\n\n        for (let i = 1; i + currentPosition < length; i++) {\n            const nextChar = input.charAt(i + currentPosition);\n            switch (nextChar) {\n                case '\\\\':\n                    i++;\n                    continue;\n                case '\\r':\n                case '\\n':\n                    break;\n                case startChar:\n                    const str = input.substr(currentPosition, i + 1);\n                    if (!loc && loc !== 0) {\n                        skipWhitespace(i + 1);\n                        return str\n                    }\n                    return [startChar, str];\n                default:\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Permissive parsing. Ignores everything except matching {} [] () and quotes\n     * until matching token (outside of blocks)\n     */\n    parserInput.$parseUntil = tok => {\n        let quote = '';\n        let returnVal = null;\n        let inComment = false;\n        let blockDepth = 0;\n        const blockStack = [];\n        const parseGroups = [];\n        const length = input.length;\n        const startPos = parserInput.i;\n        let lastPos = parserInput.i;\n        let i = parserInput.i;\n        let loop = true;\n        let testChar;\n\n        if (typeof tok === 'string') {\n            testChar = char => char === tok\n        } else {\n            testChar = char => tok.test(char)\n        }\n\n        do {\n            let prevChar;\n            let nextChar = input.charAt(i);\n            if (blockDepth === 0 && testChar(nextChar)) {\n                returnVal = input.substr(lastPos, i - lastPos);\n                if (returnVal) {\n                    parseGroups.push(returnVal);\n                }\n                else {\n                    parseGroups.push(' ');\n                }\n                returnVal = parseGroups;\n                skipWhitespace(i - startPos);\n                loop = false\n            } else {\n                if (inComment) {\n                    if (nextChar === '*' && \n                        input.charAt(i + 1) === '/') {\n                        i++;\n                        blockDepth--;\n                        inComment = false;\n                    }\n                    i++;\n                    continue;\n                }\n                switch (nextChar) {\n                    case '\\\\':\n                        i++;\n                        nextChar = input.charAt(i);\n                        parseGroups.push(input.substr(lastPos, i - lastPos + 1));\n                        lastPos = i + 1;\n                        break;\n                    case '/':\n                        if (input.charAt(i + 1) === '*') {\n                            i++;\n                            inComment = true;\n                            blockDepth++;\n                        }\n                        break;\n                    case '\\'':\n                    case '\"':\n                        quote = parserInput.$quoted(i);\n                        if (quote) {\n                            parseGroups.push(input.substr(lastPos, i - lastPos), quote);\n                            i += quote[1].length - 1;\n                            lastPos = i + 1;\n                        }\n                        else {\n                            skipWhitespace(i - startPos);\n                            returnVal = nextChar;\n                            loop = false;\n                        }\n                        break;\n                    case '{':\n                        blockStack.push('}');\n                        blockDepth++;\n                        break;\n                    case '(':\n                        blockStack.push(')');\n                        blockDepth++;\n                        break;\n                    case '[':\n                        blockStack.push(']');\n                        blockDepth++;\n                        break;\n                    case '}':\n                    case ')':\n                    case ']':\n                        const expected = blockStack.pop();\n                        if (nextChar === expected) {\n                            blockDepth--;\n                        } else {\n                            // move the parser to the error and return expected\n                            skipWhitespace(i - startPos);\n                            returnVal = expected;\n                            loop = false;\n                        }\n                }\n                i++;\n                if (i > length) {\n                    loop = false;\n                }\n            }\n            prevChar = nextChar;\n        } while (loop);\n\n        return returnVal ? returnVal : null;\n    }\n\n    parserInput.autoCommentAbsorb = true;\n    parserInput.commentStore = [];\n    parserInput.finished = false;\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    parserInput.peek = tok => {\n        if (typeof tok === 'string') {\n            // https://jsperf.com/string-startswith/21\n            for (let i = 0; i < tok.length; i++) {\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return tok.test(current);\n        }\n    };\n\n    // Specialization of peek()\n    // TODO remove or change some currentChar calls to peekChar\n    parserInput.peekChar = tok => input.charAt(parserInput.i) === tok;\n\n    parserInput.currentChar = () => input.charAt(parserInput.i);\n\n    parserInput.prevChar = () => input.charAt(parserInput.i - 1);\n\n    parserInput.getInput = () => input;\n\n    parserInput.peekNotNumeric = () => {\n        const c = input.charCodeAt(parserInput.i);\n        // Is the first char of the dimension 0-9, '.', '+' or '-'\n        return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n    };\n\n    parserInput.start = (str, chunkInput, failFunction) => {\n        input = str;\n        parserInput.i = j = currentPos = furthest = 0;\n\n        // chunking apparently makes things quicker (but my tests indicate\n        // it might actually make things slower in node at least)\n        // and it is a non-perfect parse - it can't recognise\n        // unquoted urls, meaning it can't distinguish comments\n        // meaning comments with quotes or {}() in them get 'counted'\n        // and then lead to parse errors.\n        // In addition if the chunking chunks in the wrong place we might\n        // not be able to parse a parser statement in one go\n        // this is officially deprecated but can be switched on via an option\n        // in the case it causes too much performance issues.\n        if (chunkInput) {\n            chunks = chunker(str, failFunction);\n        } else {\n            chunks = [str];\n        }\n\n        current = chunks[0];\n\n        skipWhitespace(0);\n    };\n\n    parserInput.end = () => {\n        let message;\n        const isFinished = parserInput.i >= input.length;\n\n        if (parserInput.i < furthest) {\n            message = furthestPossibleErrorMessage;\n            parserInput.i = furthest;\n        }\n        return {\n            isFinished,\n            furthest: parserInput.i,\n            furthestPossibleErrorMessage: message,\n            furthestReachedEnd: parserInput.i >= input.length - 1,\n            furthestChar: input[parserInput.i]\n        };\n    };\n\n    return parserInput;\n};\n","// Split the input into chunks.\nexport default (input, fail) => {\n    const len = input.length;\n    let level = 0;\n    let parenLevel = 0;\n    let lastOpening;\n    let lastOpeningParen;\n    let lastMultiComment;\n    let lastMultiCommentEndBrace;\n    const chunks = [];\n    let emitFrom = 0;\n    let chunkerCurrentIndex;\n    let currentChunkStartIndex;\n    let cc;\n    let cc2;\n    let matched;\n\n    function emitChunk(force) {\n        const len = chunkerCurrentIndex - emitFrom;\n        if (((len < 512) && !force) || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n            // a-z or whitespace\n            continue;\n        }\n\n        switch (cc) {\n            case 40:                        // (\n                parenLevel++;\n                lastOpeningParen = chunkerCurrentIndex;\n                continue;\n            case 41:                        // )\n                if (--parenLevel < 0) {\n                    return fail('missing opening `(`', chunkerCurrentIndex);\n                }\n                continue;\n            case 59:                        // ;\n                if (!parenLevel) { emitChunk(); }\n                continue;\n            case 123:                       // {\n                level++;\n                lastOpening = chunkerCurrentIndex;\n                continue;\n            case 125:                       // }\n                if (--level < 0) {\n                    return fail('missing opening `{`', chunkerCurrentIndex);\n                }\n                if (!level && !parenLevel) { emitChunk(); }\n                continue;\n            case 92:                        // \\\n                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }\n                return fail('unescaped `\\\\`', chunkerCurrentIndex);\n            case 34:\n            case 39:\n            case 96:                        // \", ' and `\n                matched = 0;\n                currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 > 96) { continue; }\n                    if (cc2 == cc) { matched = 1; break; }\n                    if (cc2 == 92) {        // \\\n                        if (chunkerCurrentIndex == len - 1) {\n                            return fail('unescaped `\\\\`', chunkerCurrentIndex);\n                        }\n                        chunkerCurrentIndex++;\n                    }\n                }\n                if (matched) { continue; }\n                return fail(`unmatched \\`${String.fromCharCode(cc)}\\``, currentChunkStartIndex);\n            case 47:                        // /, check for comment\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                if (cc2 == 47) {\n                    // //, find lnfeed\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }\n                    }\n                } else if (cc2 == 42) {\n                    // /*, find */\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }\n                        if (cc2 != 42) { continue; }\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }\n                    }\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail('missing closing `*/`', currentChunkStartIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n                continue;\n            case 42:                       // *, check for unmatched */\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                    return fail('unmatched `/*`', chunkerCurrentIndex);\n                }\n                continue;\n        }\n    }\n\n    if (level !== 0) {\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n            return fail('missing closing `}` or `*/`', lastOpening);\n        } else {\n            return fail('missing closing `}`', lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail('missing closing `)`', lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n};\n","import LessError from '../less-error';\nimport tree from '../tree';\nimport visitors from '../visitors';\nimport getParserInput from './parser-input';\nimport * as utils from '../utils';\nimport functionRegistry from '../functions/function-registry';\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//\n\nconst Parser = function Parser(context, imports, fileInfo) {\n    let parsers;\n    const parserInput = getParserInput();\n\n    function error(msg, type) {\n        throw new LessError(\n            {\n                index: parserInput.i,\n                filename: fileInfo.filename,\n                type: type || 'Syntax',\n                message: msg\n            },\n            imports\n        );\n    }\n\n    function expect(arg, msg) {\n        // some older browsers return typeof 'function' for RegExp\n        const result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\n        if (result) {\n            return result;\n        }\n        \n        error(msg || (typeof arg === 'string'\n            ? `expected '${arg}' got '${parserInput.currentChar()}'`\n            : 'unexpected token'));\n    }\n\n    // Specialization of expect()\n    function expectChar(arg, msg) {\n        if (parserInput.$char(arg)) {\n            return arg;\n        }\n        error(msg || `expected '${arg}' got '${parserInput.currentChar()}'`);\n    }\n\n    function getDebugInfo(index) {\n        const filename = fileInfo.filename;\n\n        return {\n            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n            fileName: filename\n        };\n    }\n\n    /**\n     *  Used after initial parsing to create nodes on the fly\n     * \n     *  @param {String} str          - string to parse \n     *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\n     *  @param {Number} currentIndex - start number to begin indexing\n     *  @param {Object} fileInfo     - fileInfo to attach to created nodes\n     */\n    function parseNode(str, parseList, currentIndex, fileInfo, callback) {\n        let result;\n        const returnNodes = [];\n        const parser = parserInput;\n\n        try {\n            parser.start(str, false, function fail(msg, index) {\n                callback({\n                    message: msg,\n                    index: index + currentIndex\n                });\n            });\n            for (let x = 0, p, i; (p = parseList[x]); x++) {\n                i = parser.i;\n                result = parsers[p]();\n                if (result) {\n                    result._index = i + currentIndex;\n                    result._fileInfo = fileInfo;\n                    returnNodes.push(result);\n                }\n                else {\n                    returnNodes.push(null);\n                }\n            }\n\n            const endInfo = parser.end();\n            if (endInfo.isFinished) {\n                callback(null, returnNodes);\n            }\n            else {\n                callback(true, null);\n            }\n        } catch (e) {\n            throw new LessError({\n                index: e.index + currentIndex,\n                message: e.message\n            }, imports, fileInfo.filename);\n        }\n    }\n\n    //\n    // The Parser\n    //\n    return {\n        parserInput,\n        imports,\n        fileInfo,\n        parseNode,\n        //\n        // Parse an input string into an abstract syntax tree,\n        // @param str A string containing 'less' markup\n        // @param callback call `callback` when done.\n        // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n        //\n        parse: function (str, callback, additionalData) {\n            let root;\n            let error = null;\n            let globalVars;\n            let modifyVars;\n            let ignored;\n            let preText = '';\n\n            globalVars = (additionalData && additionalData.globalVars) ? `${Parser.serializeVars(additionalData.globalVars)}\\n` : '';\n            modifyVars = (additionalData && additionalData.modifyVars) ? `\\n${Parser.serializeVars(additionalData.modifyVars)}` : '';\n\n            if (context.pluginManager) {\n                const preProcessors = context.pluginManager.getPreProcessors();\n                for (let i = 0; i < preProcessors.length; i++) {\n                    str = preProcessors[i].process(str, { context, imports, fileInfo });\n                }\n            }\n\n            if (globalVars || (additionalData && additionalData.banner)) {\n                preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\n                ignored = imports.contentsIgnoredChars;\n                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n                ignored[fileInfo.filename] += preText.length;\n            }\n\n            str = str.replace(/\\r\\n?/g, '\\n');\n            // Remove potential UTF Byte Order Mark\n            str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n            imports.contents[fileInfo.filename] = str;\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output. The callback is called when the input is parsed.\n            try {\n                parserInput.start(str, context.chunkInput, function fail(msg, index) {\n                    throw new LessError({\n                        index,\n                        type: 'Parse',\n                        message: msg,\n                        filename: fileInfo.filename\n                    }, imports);\n                });\n\n                tree.Node.prototype.parse = this;\n                root = new tree.Ruleset(null, this.parsers.primary());\n                tree.Node.prototype.rootNode = root;\n                root.root = true;\n                root.firstRoot = true;\n                root.functionRegistry = functionRegistry.inherit();\n                \n            } catch (e) {\n                return callback(new LessError(e, imports, fileInfo.filename));\n            }\n\n            // If `i` is smaller than the `input.length - 1`,\n            // it means the parser wasn't able to parse the whole\n            // string, so we've got a parsing error.\n            //\n            // We try to extract a \\n delimited string,\n            // showing the line where the parse error occurred.\n            // We split it up into two parts (the part which parsed,\n            // and the part which didn't), so we can color them differently.\n            const endInfo = parserInput.end();\n            if (!endInfo.isFinished) {\n\n                let message = endInfo.furthestPossibleErrorMessage;\n\n                if (!message) {\n                    message = 'Unrecognised input';\n                    if (endInfo.furthestChar === '}') {\n                        message += '. Possibly missing opening \\'{\\'';\n                    } else if (endInfo.furthestChar === ')') {\n                        message += '. Possibly missing opening \\'(\\'';\n                    } else if (endInfo.furthestReachedEnd) {\n                        message += '. Possibly missing something';\n                    }\n                }\n\n                error = new LessError({\n                    type: 'Parse',\n                    message,\n                    index: endInfo.furthest,\n                    filename: fileInfo.filename\n                }, imports);\n            }\n\n            const finish = e => {\n                e = error || e || imports.error;\n\n                if (e) {\n                    if (!(e instanceof LessError)) {\n                        e = new LessError(e, imports, fileInfo.filename);\n                    }\n\n                    return callback(e);\n                }\n                else {\n                    return callback(null, root);\n                }\n            };\n\n            if (context.processImports !== false) {\n                new visitors.ImportVisitor(imports, finish)\n                    .run(root);\n            } else {\n                return finish();\n            }\n        },\n\n        //\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Declaration -> Value -> Expression -> Entity\n        //\n        // Here's some Less code:\n        //\n        //    .class {\n        //      color: #fff;\n        //      border: 1px solid #000;\n        //      width: @w + 4px;\n        //      > .child {...}\n        //    }\n        //\n        // And here's what the parse tree might look like:\n        //\n        //     Ruleset (Selector '.class', [\n        //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\n        //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n        //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n        //         Ruleset (Selector [Element '>', '.child'], [...])\n        //     ])\n        //\n        //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        //\n        parsers: parsers = {\n            //\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | declaration)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            //\n            primary: function () {\n                const mixin = this.mixin;\n                let root = [];\n                let node;\n\n                while (true) {\n                    while (true) {\n                        node = this.comment();\n                        if (!node) { break; }\n                        root.push(node);\n                    }\n                    // always process comments before deciding if finished\n                    if (parserInput.finished) {\n                        break;\n                    }\n                    if (parserInput.peek('}')) {\n                        break;\n                    }\n\n                    node = this.extendRule();\n                    if (node) {\n                        root = root.concat(node);\n                        continue;\n                    }\n\n                    node = mixin.definition() || this.declaration() || this.ruleset() ||\n                        mixin.call(false, false) || this.variableCall() || this.entities.call() || this.atrule();\n                    if (node) {\n                        root.push(node);\n                    } else {\n                        let foundSemiColon = false;\n                        while (parserInput.$char(';')) {\n                            foundSemiColon = true;\n                        }\n                        if (!foundSemiColon) {\n                            break;\n                        }\n                    }\n                }\n\n                return root;\n            },\n\n            // comments are collected by the main parsing mechanism and then assigned to nodes\n            // where the current structure allows it\n            comment: function () {\n                if (parserInput.commentStore.length) {\n                    const comment = parserInput.commentStore.shift();\n                    return new(tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\n                }\n            },\n\n            //\n            // Entities are tokens which can be found inside an Expression\n            //\n            entities: {\n                mixinLookup: function() {\n                    return parsers.mixin.call(true, true);\n                },\n                //\n                // A string, which supports escaping \" and '\n                //\n                //     \"milky way\" 'he\\'s the one!'\n                //\n                quoted: function (forceEscaped) {\n                    let str;\n                    const index = parserInput.i;\n                    let isEscaped = false;\n\n                    parserInput.save();\n                    if (parserInput.$char('~')) {\n                        isEscaped = true;\n                    } else if (forceEscaped) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    str = parserInput.$quoted();\n                    if (!str) {\n                        parserInput.restore();\n                        return;\n                    }\n                    parserInput.forget();\n\n                    return new(tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\n                },\n\n                //\n                // A catch-all word, such as:\n                //\n                //     black border-collapse\n                //\n                keyword: function () {\n                    const k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\n                    if (k) {\n                        return tree.Color.fromKeyword(k) || new(tree.Keyword)(k);\n                    }\n                },\n\n                //\n                // A function call\n                //\n                //     rgb(255, 0, 255)\n                //\n                // The arguments are parsed with the `entities.arguments` parser.\n                //\n                call: function () {\n                    let name;\n                    let args;\n                    let func;\n                    const index = parserInput.i;\n\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                    if (parserInput.peek(/^url\\(/i)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/);\n                    if (!name) {\n                        parserInput.forget(); \n                        return;\n                    }\n\n                    name = name[1];\n                    func = this.customFuncCall(name);\n                    if (func) {\n                        args = func.parse();\n                        if (args && func.stop) {\n                            parserInput.forget();\n                            return args;\n                        }\n                    }\n\n                    args = this.arguments(args);\n\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore('Could not parse call arguments or missing \\')\\'');\n                        return;\n                    }\n\n                    parserInput.forget();\n\n                    return new(tree.Call)(name, args, index, fileInfo);\n                },\n                \n                //\n                // Parsing rules for functions with non-standard args, e.g.:\n                //\n                //     boolean(not(2 > 1))\n                //\n                //     This is a quick prototype, to be modified/improved when\n                //     more custom-parsed funcs come (e.g. `selector(...)`)\n                //\n\n                customFuncCall: function (name) {\n                    /* Ideally the table is to be moved out of here for faster perf.,\n                       but it's quite tricky since it relies on all these `parsers`\n                       and `expect` available only here */\n                    return {\n                        alpha:   f(parsers.ieAlpha, true),\n                        boolean: f(condition),\n                        'if':    f(condition)\n                    }[name.toLowerCase()];\n\n                    function f(parse, stop) {\n                        return {\n                            parse, // parsing function\n                            stop   // when true - stop after parse() and return its result, \n                                          // otherwise continue for plain args\n                        };\n                    }\n                \n                    function condition() {\n                        return [expect(parsers.condition, 'expected condition')];\n                    }\n                },\n\n                arguments: function (prevArgs) {\n                    let argsComma = prevArgs || [];\n                    const argsSemiColon = [];\n                    let isSemiColonSeparated;\n                    let value;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (prevArgs) {\n                            prevArgs = false;\n                        } else {\n                            value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n                            if (!value) {\n                                break;\n                            }\n\n                            if (value.value && value.value.length == 1) {\n                                value = value.value[0];\n                            }\n\n                            argsComma.push(value);\n                        }\n\n                        if (parserInput.$char(',')) {\n                            continue;\n                        }\n\n                        if (parserInput.$char(';') || isSemiColonSeparated) {\n                            isSemiColonSeparated = true;\n                            value = (argsComma.length < 1) ? argsComma[0]\n                                : new tree.Value(argsComma);\n                            argsSemiColon.push(value);\n                            argsComma = [];\n                        }\n                    }\n\n                    parserInput.forget();\n                    return isSemiColonSeparated ? argsSemiColon : argsComma;\n                },\n                literal: function () {\n                    return this.dimension() ||\n                           this.color() ||\n                           this.quoted() ||\n                           this.unicodeDescriptor();\n                },\n\n                // Assignments are argument entities for calls.\n                // They are present in ie filter properties as shown below.\n                //\n                //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n                //\n\n                assignment: function () {\n                    let key;\n                    let value;\n                    parserInput.save();\n                    key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n                    if (!key) {\n                        parserInput.restore();\n                        return;\n                    }\n                    if (!parserInput.$char('=')) {\n                        parserInput.restore();\n                        return;\n                    }\n                    value = parsers.entity();\n                    if (value) {\n                        parserInput.forget();\n                        return new(tree.Assignment)(key, value);\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n\n                //\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                //\n                url: function () {\n                    let value;\n                    const index = parserInput.i;\n\n                    parserInput.autoCommentAbsorb = false;\n\n                    if (!parserInput.$str('url(')) {\n                        parserInput.autoCommentAbsorb = true;\n                        return;\n                    }\n\n                    value = this.quoted() || this.variable() || this.property() ||\n                            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\n\n                    parserInput.autoCommentAbsorb = true;\n\n                    expectChar(')');\n\n                    return new(tree.URL)((value.value != null || \n                        value instanceof tree.Variable || \n                        value instanceof tree.Property) ?\n                        value : new(tree.Anonymous)(value, index), index, fileInfo);\n                },\n\n                //\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                //\n                variable: function () {\n                    let ch;\n                    let name;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n                        ch = parserInput.currentChar();\n                        if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\n                            // this may be a VariableCall lookup\n                            const result = parsers.variableCall(name);\n                            if (result) {\n                                parserInput.forget();\n                                return result;\n                            }\n                        }\n                        parserInput.forget();\n                        return new(tree.Variable)(name, index, fileInfo);\n                    }\n                    parserInput.restore();\n                },\n\n                // A variable entity using the protective {} e.g. @{var}\n                variableCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n                        return new(tree.Variable)(`@${curly[1]}`, index, fileInfo);\n                    }\n                },\n                //\n                // A Property accessor, such as `$color`, in\n                //\n                //     background-color: $color\n                //\n                property: function () {\n                    let name;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\n                        return new(tree.Property)(name, index, fileInfo);\n                    }\n                },\n\n                // A property entity useing the protective {} e.g. ${prop}\n                propertyCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\n                        return new(tree.Property)(`$${curly[1]}`, index, fileInfo);\n                    }\n                },\n                //\n                // A Hexadecimal color\n                //\n                //     #4F3C2F\n                //\n                // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n                //\n                color: function () {\n                    let rgb;\n                    parserInput.save();\n\n                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#\\[])?/))) {\n                        if (!rgb[2]) {\n                            parserInput.forget();\n                            return new(tree.Color)(rgb[1], undefined, rgb[0]);\n                        } \n                    }\n                    parserInput.restore();\n                },\n\n                colorKeyword: function () {\n                    parserInput.save();\n                    const autoCommentAbsorb = parserInput.autoCommentAbsorb;\n                    parserInput.autoCommentAbsorb = false;\n                    const k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n                    parserInput.autoCommentAbsorb = autoCommentAbsorb;\n                    if (!k) {\n                        parserInput.forget();\n                        return;\n                    }\n                    parserInput.restore();\n                    const color = tree.Color.fromKeyword(k);\n                    if (color) {\n                        parserInput.$str(k);\n                        return color;\n                    }\n                },\n\n                //\n                // A Dimension, that is, a number and a unit\n                //\n                //     0.5em 95%\n                //\n                dimension: function () {\n                    if (parserInput.peekNotNumeric()) {\n                        return;\n                    }\n\n                    const value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n                    if (value) {\n                        return new(tree.Dimension)(value[1], value[2]);\n                    }\n                },\n\n                //\n                // A unicode descriptor, as is used in unicode-range\n                //\n                // U+0??  or U+00A1-00A9\n                //\n                unicodeDescriptor: function () {\n                    let ud;\n\n                    ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\n                    if (ud) {\n                        return new(tree.UnicodeDescriptor)(ud[0]);\n                    }\n                },\n\n                //\n                // JavaScript code to be evaluated\n                //\n                //     `window.location.href`\n                //\n                javascript: function () {\n                    let js;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n\n                    const escape = parserInput.$char('~');\n                    const jsQuote = parserInput.$char('`');\n\n                    if (!jsQuote) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    js = parserInput.$re(/^[^`]*`/);\n                    if (js) {\n                        parserInput.forget();\n                        return new(tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\n                    }\n                    parserInput.restore('invalid javascript definition');\n                }\n            },\n\n            //\n            // The variable part of a variable definition. Used in the `rule` parser\n            //\n            //     @fink:\n            //\n            variable: function () {\n                let name;\n\n                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) { return name[1]; }\n            },\n\n            //\n            // Call a variable value to retrieve a detached ruleset\n            // or a value from a detached ruleset's rules.\n            //\n            //     @fink();\n            //     @fink;\n            //     color: @fink[@color];\n            //\n            variableCall: function (parsedName) {\n                let lookups;\n                let important;\n                const i = parserInput.i;\n                const inValue = !!parsedName;\n                let name = parsedName;\n\n                parserInput.save();\n\n                if (name || (parserInput.currentChar() === '@'\n                    && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\n\n                    lookups = this.mixin.ruleLookups();\n\n                    if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\n                        parserInput.restore('Missing \\'[...]\\' lookup in variable call');\n                        return;\n                    }\n\n                    if (!inValue) {\n                        name = name[1];\n                    }\n\n                    if (lookups && parsers.important()) {\n                        important = true;\n                    }\n\n                    const call = new tree.VariableCall(name, i, fileInfo);\n                    if (!inValue && parsers.end()) {\n                        parserInput.forget();\n                        return call;\n                    }\n                    else {\n                        parserInput.forget();\n                        return new tree.NamespaceValue(call, lookups, important, i, fileInfo);\n                    }\n                }\n\n                parserInput.restore();\n            },\n\n            //\n            // extend syntax - used to extend selectors\n            //\n            extend: function(isRule) {\n                let elements;\n                let e;\n                const index = parserInput.i;\n                let option;\n                let extendList;\n                let extend;\n\n                if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n                    return;\n                }\n\n                do {\n                    option = null;\n                    elements = null;\n                    while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n                        e = this.element();\n                        if (!e) {\n                            break;\n                        }\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                    }\n\n                    option = option && option[1];\n                    if (!elements) {\n                        error('Missing target selector for :extend().');\n                    }\n                    extend = new(tree.Extend)(new(tree.Selector)(elements), option, index, fileInfo);\n                    if (extendList) {\n                        extendList.push(extend);\n                    } else {\n                        extendList = [ extend ];\n                    }\n                } while (parserInput.$char(','));\n\n                expect(/^\\)/);\n\n                if (isRule) {\n                    expect(/^;/);\n                }\n\n                return extendList;\n            },\n\n            //\n            // extendRule - used in a rule to extend all the parent selectors\n            //\n            extendRule: function() {\n                return this.extend(true);\n            },\n\n            //\n            // Mixins\n            //\n            mixin: {\n                //\n                // A Mixin call, with an optional argument list\n                //\n                //     #mixins > .square(#fff);\n                //     #mixins.square(#fff);\n                //     .rounded(4px, black);\n                //     .button;\n                //\n                // We can lookup / return a value using the lookup syntax:\n                //\n                //     color: #mixin.square(#fff)[@color];\n                //\n                // The `while` loop is there because mixins can be\n                // namespaced, but we only support the child and descendant\n                // selector for now.\n                //\n                call: function (inValue, getLookup) {\n                    const s = parserInput.currentChar();\n                    let important = false;\n                    let lookups;\n                    const index = parserInput.i;\n                    let elements;\n                    let args;\n                    let hasParens;\n\n                    if (s !== '.' && s !== '#') { return; }\n\n                    parserInput.save(); // stop us absorbing part of an invalid selector\n\n                    elements = this.elements();\n\n                    if (elements) {\n                        if (parserInput.$char('(')) {\n                            args = this.args(true).args;\n                            expectChar(')');\n                            hasParens = true;\n                        }\n\n                        if (getLookup !== false) {\n                            lookups = this.ruleLookups();\n                        }\n                        if (getLookup === true && !lookups) {\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (inValue && !lookups && !hasParens) {\n                            // This isn't a valid in-value mixin call\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (!inValue && parsers.important()) {\n                            important = true;\n                        }\n\n                        if (inValue || parsers.end()) {\n                            parserInput.forget();\n                            const mixin = new(tree.mixin.Call)(elements, args, index, fileInfo, !lookups && important);\n                            if (lookups) {\n                                return new tree.NamespaceValue(mixin, lookups, important);\n                            }\n                            else {\n                                return mixin;\n                            }\n                        }\n                    }\n\n                    parserInput.restore();\n                },\n                /**\n                 * Matching elements for mixins\n                 * (Start with . or # and can have > )\n                 */\n                elements: function() {\n                    let elements;\n                    let e;\n                    let c;\n                    let elem;\n                    let elemIndex;\n                    const re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\n                    while (true) {\n                        elemIndex = parserInput.i;\n                        e = parserInput.$re(re);\n                        \n                        if (!e) {\n                            break;\n                        }\n                        elem = new(tree.Element)(c, e, false, elemIndex, fileInfo);\n                        if (elements) {\n                            elements.push(elem);\n                        } else {\n                            elements = [ elem ];\n                        }\n                        c = parserInput.$char('>');\n                    }\n                    return elements;\n                },\n                args: function (isCall) {\n                    const entities = parsers.entities;\n                    const returner = { args:null, variadic: false };\n                    let expressions = [];\n                    const argsSemiColon = [];\n                    const argsComma = [];\n                    let isSemiColonSeparated;\n                    let expressionContainsNamed;\n                    let name;\n                    let nameLoop;\n                    let value;\n                    let arg;\n                    let expand;\n                    let hasSep = true;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (isCall) {\n                            arg = parsers.detachedRuleset() || parsers.expression();\n                        } else {\n                            parserInput.commentStore.length = 0;\n                            if (parserInput.$str('...')) {\n                                returner.variadic = true;\n                                if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                    isSemiColonSeparated = true;\n                                }\n                                (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                    .push({ variadic: true });\n                                break;\n                            }\n                            arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\n                        }\n\n                        if (!arg || !hasSep) {\n                            break;\n                        }\n\n                        nameLoop = null;\n                        if (arg.throwAwayComments) {\n                            arg.throwAwayComments();\n                        }\n                        value = arg;\n                        let val = null;\n\n                        if (isCall) {\n                            // Variable\n                            if (arg.value && arg.value.length == 1) {\n                                val = arg.value[0];\n                            }\n                        } else {\n                            val = arg;\n                        }\n\n                        if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\n                            if (parserInput.$char(':')) {\n                                if (expressions.length > 0) {\n                                    if (isSemiColonSeparated) {\n                                        error('Cannot mix ; and , as delimiter types');\n                                    }\n                                    expressionContainsNamed = true;\n                                }\n\n                                value = parsers.detachedRuleset() || parsers.expression();\n\n                                if (!value) {\n                                    if (isCall) {\n                                        error('could not understand value for named argument');\n                                    } else {\n                                        parserInput.restore();\n                                        returner.args = [];\n                                        return returner;\n                                    }\n                                }\n                                nameLoop = (name = val.name);\n                            } else if (parserInput.$str('...')) {\n                                if (!isCall) {\n                                    returner.variadic = true;\n                                    if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                        isSemiColonSeparated = true;\n                                    }\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                        .push({ name: arg.name, variadic: true });\n                                    break;\n                                } else {\n                                    expand = true;\n                                }\n                            } else if (!isCall) {\n                                name = nameLoop = val.name;\n                                value = null;\n                            }\n                        }\n\n                        if (value) {\n                            expressions.push(value);\n                        }\n\n                        argsComma.push({ name:nameLoop, value, expand });\n\n                        if (parserInput.$char(',')) {\n                            hasSep = true;\n                            continue;\n                        }\n                        hasSep = parserInput.$char(';') === ';';\n\n                        if (hasSep || isSemiColonSeparated) {\n\n                            if (expressionContainsNamed) {\n                                error('Cannot mix ; and , as delimiter types');\n                            }\n\n                            isSemiColonSeparated = true;\n\n                            if (expressions.length > 1) {\n                                value = new(tree.Value)(expressions);\n                            }\n                            argsSemiColon.push({ name, value, expand });\n\n                            name = null;\n                            expressions = [];\n                            expressionContainsNamed = false;\n                        }\n                    }\n\n                    parserInput.forget();\n                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n                    return returner;\n                },\n                //\n                // A Mixin definition, with a list of parameters\n                //\n                //     .rounded (@radius: 2px, @color) {\n                //        ...\n                //     }\n                //\n                // Until we have a finer grained state-machine, we have to\n                // do a look-ahead, to make sure we don't have a mixin call.\n                // See the `rule` function for more information.\n                //\n                // We start by matching `.rounded (`, and then proceed on to\n                // the argument list, which has optional default values.\n                // We store the parameters in `params`, with a `value` key,\n                // if there is a value, such as in the case of `@radius`.\n                //\n                // Once we've got our params list, and a closing `)`, we parse\n                // the `{...}` block.\n                //\n                definition: function () {\n                    let name;\n                    let params = [];\n                    let match;\n                    let ruleset;\n                    let cond;\n                    let variadic = false;\n                    if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\n                        parserInput.peek(/^[^{]*\\}/)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n                    if (match) {\n                        name = match[1];\n\n                        const argInfo = this.args(false);\n                        params = argInfo.args;\n                        variadic = argInfo.variadic;\n\n                        // .mixincall(\"@{a}\");\n                        // looks a bit like a mixin definition..\n                        // also\n                        // .mixincall(@a: {rule: set;});\n                        // so we have to be nice and restore\n                        if (!parserInput.$char(')')) {\n                            parserInput.restore('Missing closing \\')\\'');\n                            return;\n                        }\n\n                        parserInput.commentStore.length = 0;\n\n                        if (parserInput.$str('when')) { // Guard\n                            cond = expect(parsers.conditions, 'expected condition');\n                        }\n\n                        ruleset = parsers.block();\n\n                        if (ruleset) {\n                            parserInput.forget();\n                            return new(tree.mixin.Definition)(name, params, ruleset, cond, variadic);\n                        } else {\n                            parserInput.restore();\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                },\n            \n                ruleLookups: function() {\n                    let rule;\n                    let args;\n                    const lookups = [];\n\n                    if (parserInput.currentChar() !== '[') { \n                        return;\n                    }\n\n                    while (true) {\n                        parserInput.save();\n                        args = null;\n                        rule = this.lookupValue();\n                        if (!rule && rule !== '') {\n                            parserInput.restore();\n                            break;\n                        }\n                        lookups.push(rule);\n                        parserInput.forget();\n                    }\n                    if (lookups.length > 0) {\n                        return lookups;\n                    }\n                },\n    \n                lookupValue: function() {\n                    parserInput.save();\n    \n                    if (!parserInput.$char('[')) { \n                        parserInput.restore();\n                        return;\n                    }\n    \n                    const name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\n    \n                    if (!parserInput.$char(']')) {\n                        parserInput.restore();\n                        return;\n                    } \n\n                    if (name || name === '') {\n                        parserInput.forget();\n                        return name;\n                    }\n    \n                    parserInput.restore();\n                }\n            },\n            //\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            //\n            entity: function () {\n                const entities = this.entities;\n\n                return this.comment() || entities.literal() || entities.variable() || entities.url() ||\n                    entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\n                    entities.javascript();\n            },\n\n            //\n            // A Declaration terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was omitted.\n            //\n            end: function () {\n                return parserInput.$char(';') || parserInput.peek('}');\n            },\n\n            //\n            // IE's alpha function\n            //\n            //     alpha(opacity=88)\n            //\n            ieAlpha: function () {\n                let value;\n\n                // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                if (!parserInput.$re(/^opacity=/i)) { return; }\n                value = parserInput.$re(/^\\d+/);\n                if (!value) {\n                    value = expect(parsers.entities.variable, 'Could not parse alpha');\n                    value = `@{${value.name.slice(1)}}`;\n                }\n                expectChar(')');\n                return new tree.Quoted('', `alpha(opacity=${value})`);\n            },\n\n            //\n            // A Selector Element\n            //\n            //     div\n            //     + h1\n            //     #socks\n            //     input[type=\"text\"]\n            //\n            // Elements are the building blocks for Selectors,\n            // they are made out of a `Combinator` (see combinator rule),\n            // and an element name, such as a tag a class, or `*`.\n            //\n            element: function () {\n                let e;\n                let c;\n                let v;\n                const index = parserInput.i;\n\n                c = this.combinator();\n\n                e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n                    parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\n                    parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\n                    parserInput.$re(/^\\([^&()@]+\\)/) ||  parserInput.$re(/^[\\.#:](?=@)/) ||\n                    this.entities.variableCurly();\n\n                if (!e) {\n                    parserInput.save();\n                    if (parserInput.$char('(')) {\n                        if ((v = this.selector(false)) && parserInput.$char(')')) {\n                            e = new(tree.Paren)(v);\n                            parserInput.forget();\n                        } else {\n                            parserInput.restore('Missing closing \\')\\'');\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                }\n\n                if (e) { return new(tree.Element)(c, e, e instanceof tree.Variable, index, fileInfo); }\n            },\n\n            //\n            // Combinators combine elements together, in a Selector.\n            //\n            // Because our parser isn't white-space sensitive, special care\n            // has to be taken, when parsing the descendant combinator, ` `,\n            // as it's an empty space. We have to check the previous character\n            // in the input, to see if it's a ` ` character. More info on how\n            // we deal with this in *combinator.js*.\n            //\n            combinator: function () {\n                let c = parserInput.currentChar();\n\n                if (c === '/') {\n                    parserInput.save();\n                    const slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n                    if (slashedCombinator) {\n                        parserInput.forget();\n                        return new(tree.Combinator)(slashedCombinator);\n                    }\n                    parserInput.restore();\n                }\n\n                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n                    parserInput.i++;\n                    if (c === '^' && parserInput.currentChar() === '^') {\n                        c = '^^';\n                        parserInput.i++;\n                    }\n                    while (parserInput.isWhitespace()) { parserInput.i++; }\n                    return new(tree.Combinator)(c);\n                } else if (parserInput.isWhitespace(-1)) {\n                    return new(tree.Combinator)(' ');\n                } else {\n                    return new(tree.Combinator)(null);\n                }\n            },\n            //\n            // A CSS Selector\n            // with less extensions e.g. the ability to extend and guard\n            //\n            //     .class > div + h1\n            //     li a:hover\n            //\n            // Selectors are made out of one or more Elements, see above.\n            //\n            selector: function (isLess) {\n                const index = parserInput.i;\n                let elements;\n                let extendList;\n                let c;\n                let e;\n                let allExtends;\n                let when;\n                let condition;\n                isLess = isLess !== false;\n                while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\n                    if (when) {\n                        condition = expect(this.conditions, 'expected condition');\n                    } else if (condition) {\n                        error('CSS guard can only be used at the end of selector');\n                    } else if (extendList) {\n                        if (allExtends) {\n                            allExtends = allExtends.concat(extendList);\n                        } else {\n                            allExtends = extendList;\n                        }\n                    } else {\n                        if (allExtends) { error('Extend can only be used at the end of selector'); }\n                        c = parserInput.currentChar();\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                        e = null;\n                    }\n                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n                        break;\n                    }\n                }\n\n                if (elements) { return new(tree.Selector)(elements, allExtends, condition, index, fileInfo); }\n                if (allExtends) { error('Extend must be used to extend a selector, it cannot be used on its own'); }\n            },\n            selectors: function () {\n                let s;\n                let selectors;\n                while (true) {\n                    s = this.selector();\n                    if (!s) {\n                        break;\n                    }\n                    if (selectors) {\n                        selectors.push(s);\n                    } else {\n                        selectors = [ s ];\n                    }\n                    parserInput.commentStore.length = 0;\n                    if (s.condition && selectors.length > 1) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    if (!parserInput.$char(',')) { break; }\n                    if (s.condition) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    parserInput.commentStore.length = 0;\n                }\n                return selectors;\n            },\n            attribute: function () {\n                if (!parserInput.$char('[')) { return; }\n\n                const entities = this.entities;\n                let key;\n                let val;\n                let op;\n\n                if (!(key = entities.variableCurly())) {\n                    key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n                }\n\n                op = parserInput.$re(/^[|~*$^]?=/);\n                if (op) {\n                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n                }\n\n                expectChar(']');\n\n                return new(tree.Attribute)(key, op, val);\n            },\n\n            //\n            // The `block` rule is used by `ruleset` and `mixin.definition`.\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            //\n            block: function () {\n                let content;\n                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n                    return content;\n                }\n            },\n\n            blockRuleset: function() {\n                let block = this.block();\n\n                if (block) {\n                    block = new tree.Ruleset(null, block);\n                }\n                return block;\n            },\n\n            detachedRuleset: function() {\n                let argInfo;\n                let params;\n                let variadic;\n\n                parserInput.save();\n                if (parserInput.$re(/^[.#]\\(/)) {\n                    /**\n                     * DR args currently only implemented for each() function, and not \n                     * yet settable as `@dr: #(@arg) {}`\n                     * This should be done when DRs are merged with mixins.\n                     * See: https://github.com/less/less-meta/issues/16\n                     */\n                    argInfo = this.mixin.args(false);\n                    params = argInfo.args;\n                    variadic = argInfo.variadic;\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return;\n                    }\n                }\n                const blockRuleset = this.blockRuleset();\n                if (blockRuleset) {\n                    parserInput.forget();\n                    if (params) {\n                        return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\n                    }\n                    return new tree.DetachedRuleset(blockRuleset);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // div, .class, body > p {...}\n            //\n            ruleset: function () {\n                let selectors;\n                let rules;\n                let debugInfo;\n\n                parserInput.save();\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(parserInput.i);\n                }\n\n                selectors = this.selectors();\n\n                if (selectors && (rules = this.block())) {\n                    parserInput.forget();\n                    const ruleset = new(tree.Ruleset)(selectors, rules, context.strictImports);\n                    if (context.dumpLineNumbers) {\n                        ruleset.debugInfo = debugInfo;\n                    }\n                    return ruleset;\n                } else {\n                    parserInput.restore();\n                }\n            },\n            declaration: function () {\n                let name;\n                let value;\n                const index = parserInput.i;\n                let hasDR;\n                const c = parserInput.currentChar();\n                let important;\n                let merge;\n                let isVariable;\n\n                if (c === '.' || c === '#' || c === '&' || c === ':') { return; }\n\n                parserInput.save();\n\n                name = this.variable() || this.ruleProperty();\n                if (name) {\n                    isVariable = typeof name === 'string';\n\n                    if (isVariable) {\n                        value = this.detachedRuleset();\n                        if (value) {\n                            hasDR = true;\n                        }\n                    }\n\n                    parserInput.commentStore.length = 0;\n                    if (!value) {\n                        // a name returned by this.ruleProperty() is always an array of the form:\n                        // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n                        // where each item is a tree.Keyword or tree.Variable\n                        merge = !isVariable && name.length > 1 && name.pop().value;\n\n                        // Custom property values get permissive parsing\n                        if (name[0].value && name[0].value.slice(0, 2) === '--') {\n                            value = this.permissiveValue();\n                        }\n                        // Try to store values as anonymous\n                        // If we need the value later we'll re-parse it in ruleset.parseValue\n                        else {\n                            value = this.anonymousValue();\n                        }\n                        if (value) {\n                            parserInput.forget();\n                            // anonymous values absorb the end ';' which is required for them to work\n                            return new (tree.Declaration)(name, value, false, merge, index, fileInfo);\n                        }\n\n                        if (!value) {\n                            value = this.value();\n                        }\n\n                        if (value) {\n                            important = this.important();\n                        } else if (isVariable) {\n                            // As a last resort, try permissiveValue\n                            value = this.permissiveValue();\n                        }\n                    }\n\n                    if (value && (this.end() || hasDR)) {\n                        parserInput.forget();\n                        return new (tree.Declaration)(name, value, important, merge, index, fileInfo);\n                    }\n                    else {\n                        parserInput.restore();\n                    }\n                } else {\n                    parserInput.restore();\n                }\n            },\n            anonymousValue: function () {\n                const index = parserInput.i;\n                const match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\n                if (match) {\n                    return new(tree.Anonymous)(match[1], index);\n                }\n            },\n            /**\n             * Used for custom properties, at-rules, and variables (as fallback)\n             * Parses almost anything inside of {} [] () \"\" blocks\n             * until it reaches outer-most tokens.\n             * \n             * First, it will try to parse comments and entities to reach\n             * the end. This is mostly like the Expression parser except no\n             * math is allowed.\n             */\n            permissiveValue: function (untilTokens) {\n                let i;\n                let e;\n                let done;\n                let value;\n                const tok = untilTokens || ';';\n                const index = parserInput.i;\n                const result = [];\n\n                function testCurrentChar() {\n                    const char = parserInput.currentChar();\n                    if (typeof tok === 'string') {\n                        return char === tok;\n                    } else {\n                        return tok.test(char);\n                    }\n                }\n                if (testCurrentChar()) {\n                    return;\n                }\n                value = [];\n                do {\n                    e = this.comment();\n                    if (e) {\n                        value.push(e);\n                        continue;\n                    }\n                    e = this.entity();\n                    if (e) {\n                        value.push(e);\n                    }\n                } while (e);\n\n                done = testCurrentChar();\n\n                if (value.length > 0) {\n                    value = new(tree.Expression)(value);\n                    if (done) {\n                        return value;\n                    }\n                    else {\n                        result.push(value);\n                    }\n                    // Preserve space before $parseUntil as it will not\n                    if (parserInput.prevChar() === ' ') {\n                        result.push(new tree.Anonymous(' ', index));\n                    }\n                }\n                parserInput.save();\n\n                value = parserInput.$parseUntil(tok);\n\n                if (value) {\n                    if (typeof value === 'string') {\n                        error(`Expected '${value}'`, 'Parse');\n                    }\n                    if (value.length === 1 && value[0] === ' ') {\n                        parserInput.forget();\n                        return new tree.Anonymous('', index);\n                    }\n                    let item;\n                    for (i = 0; i < value.length; i++) {\n                        item = value[i];\n                        if (Array.isArray(item)) {\n                            // Treat actual quotes as normal quoted values\n                            result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\n                        }\n                        else {\n                            if (i === value.length - 1) {\n                                item = item.trim();\n                            }\n                            // Treat like quoted values, but replace vars like unquoted expressions\n                            const quote = new tree.Quoted('\\'', item, true, index, fileInfo);\n                            quote.variableRegex = /@([\\w-]+)/g;\n                            quote.propRegex = /\\$([\\w-]+)/g;\n                            result.push(quote);\n                        }\n                    }\n                    parserInput.forget();\n                    return new tree.Expression(result, true);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // An @import atrule\n            //\n            //     @import \"lib\";\n            //\n            // Depending on our environment, importing is done differently:\n            // In the browser, it's an XHR request, in Node, it would be a\n            // file-system operation. The function used for importing is\n            // stored in `import`, which we pass to the Import constructor.\n            //\n            'import': function () {\n                let path;\n                let features;\n                const index = parserInput.i;\n\n                const dir = parserInput.$re(/^@import?\\s+/);\n\n                if (dir) {\n                    const options = (dir ? this.importOptions() : null) || {};\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n                        features = this.mediaFeatures();\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon or unrecognised media features on import');\n                        }\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed import statement');\n                    }\n                }\n            },\n\n            importOptions: function() {\n                let o;\n                const options = {};\n                let optionName;\n                let value;\n\n                // list of options, surrounded by parens\n                if (!parserInput.$char('(')) { return null; }\n                do {\n                    o = this.importOption();\n                    if (o) {\n                        optionName = o;\n                        value = true;\n                        switch (optionName) {\n                            case 'css':\n                                optionName = 'less';\n                                value = false;\n                                break;\n                            case 'once':\n                                optionName = 'multiple';\n                                value = false;\n                                break;\n                        }\n                        options[optionName] = value;\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (o);\n                expectChar(')');\n                return options;\n            },\n\n            importOption: function() {\n                const opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n                if (opt) {\n                    return opt[1];\n                }\n            },\n\n            mediaFeature: function () {\n                const entities = this.entities;\n                const nodes = [];\n                let e;\n                let p;\n                parserInput.save();\n                do {\n                    e = entities.keyword() || entities.variable() || entities.mixinLookup();\n                    if (e) {\n                        nodes.push(e);\n                    } else if (parserInput.$char('(')) {\n                        p = this.property();\n                        e = this.value();\n                        if (parserInput.$char(')')) {\n                            if (p && e) {\n                                nodes.push(new(tree.Paren)(new(tree.Declaration)(p, e, null, null, parserInput.i, fileInfo, true)));\n                            } else if (e) {\n                                nodes.push(new(tree.Paren)(e));\n                            } else {\n                                error('badly formed media feature definition');\n                            }\n                        } else {\n                            error('Missing closing \\')\\'', 'Parse');\n                        }\n                    }\n                } while (e);\n\n                parserInput.forget();\n                if (nodes.length > 0) {\n                    return new(tree.Expression)(nodes);\n                }\n            },\n\n            mediaFeatures: function () {\n                const entities = this.entities;\n                const features = [];\n                let e;\n                do {\n                    e = this.mediaFeature();\n                    if (e) {\n                        features.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    } else {\n                        e = entities.variable() || entities.mixinLookup();\n                        if (e) {\n                            features.push(e);\n                            if (!parserInput.$char(',')) { break; }\n                        }\n                    }\n                } while (e);\n\n                return features.length > 0 ? features : null;\n            },\n\n            media: function () {\n                let features;\n                let rules;\n                let media;\n                let debugInfo;\n                const index = parserInput.i;\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(index);\n                }\n\n                parserInput.save();\n\n                if (parserInput.$str('@media')) {\n                    features = this.mediaFeatures();\n\n                    rules = this.block();\n\n                    if (!rules) {\n                        error('media definitions require block statements after any features');\n                    }\n\n                    parserInput.forget();\n\n                    media = new(tree.Media)(rules, features, index, fileInfo);\n                    if (context.dumpLineNumbers) {\n                        media.debugInfo = debugInfo;\n                    }\n\n                    return media;\n                }\n\n                parserInput.restore();\n            },\n\n            //\n\n            // A @plugin directive, used to import plugins dynamically.\n            //\n            //     @plugin (args) \"lib\";\n            //\n            plugin: function () {\n                let path;\n                let args;\n                let options;\n                const index = parserInput.i;\n                const dir   = parserInput.$re(/^@plugin?\\s+/);\n\n                if (dir) {\n                    args = this.pluginArgs();\n\n                    if (args) {\n                        options = {\n                            pluginArgs: args,\n                            isPlugin: true\n                        };\n                    }\n                    else {\n                        options = { isPlugin: true };\n                    }\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon on @plugin');\n                        }\n                        return new(tree.Import)(path, null, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed @plugin statement');\n                    }\n                }\n            },\n\n            pluginArgs: function() {\n                // list of options, surrounded by parens\n                parserInput.save();\n                if (!parserInput.$char('(')) {\n                    parserInput.restore();\n                    return null;\n                }\n                const args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\n                if (args[1]) {\n                    parserInput.forget();\n                    return args[1].trim();\n                }\n                else { \n                    parserInput.restore();\n                    return null;\n                }\n            },\n\n            //\n            // A CSS AtRule\n            //\n            //     @charset \"utf-8\";\n            //\n            atrule: function () {\n                const index = parserInput.i;\n                let name;\n                let value;\n                let rules;\n                let nonVendorSpecificName;\n                let hasIdentifier;\n                let hasExpression;\n                let hasUnknown;\n                let hasBlock = true;\n                let isRooted = true;\n\n                if (parserInput.currentChar() !== '@') { return; }\n\n                value = this['import']() || this.plugin() || this.media();\n                if (value) {\n                    return value;\n                }\n\n                parserInput.save();\n\n                name = parserInput.$re(/^@[a-z-]+/);\n\n                if (!name) { return; }\n\n                nonVendorSpecificName = name;\n                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n                    nonVendorSpecificName = `@${name.slice(name.indexOf('-', 2) + 1)}`;\n                }\n\n                switch (nonVendorSpecificName) {\n                    case '@charset':\n                        hasIdentifier = true;\n                        hasBlock = false;\n                        break;\n                    case '@namespace':\n                        hasExpression = true;\n                        hasBlock = false;\n                        break;\n                    case '@keyframes':\n                    case '@counter-style':\n                        hasIdentifier = true;\n                        break;\n                    case '@document':\n                    case '@supports':\n                        hasUnknown = true;\n                        isRooted = false;\n                        break;\n                    default:\n                        hasUnknown = true;\n                        break;\n                }\n\n                parserInput.commentStore.length = 0;\n\n                if (hasIdentifier) {\n                    value = this.entity();\n                    if (!value) {\n                        error(`expected ${name} identifier`);\n                    }\n                } else if (hasExpression) {\n                    value = this.expression();\n                    if (!value) {\n                        error(`expected ${name} expression`);\n                    }\n                } else if (hasUnknown) {\n                    value = this.permissiveValue(/^[{;]/);\n                    hasBlock = (parserInput.currentChar() === '{');\n                    if (!value) {\n                        if (!hasBlock && parserInput.currentChar() !== ';') {\n                            error(`${name} rule is missing block or ending semi-colon`);\n                        }\n                    }\n                    else if (!value.value) {\n                        value = null;\n                    }\n                }\n\n                if (hasBlock) {\n                    rules = this.blockRuleset();\n                }\n\n                if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n                    parserInput.forget();\n                    return new (tree.AtRule)(name, value, rules, index, fileInfo,\n                        context.dumpLineNumbers ? getDebugInfo(index) : null,\n                        isRooted\n                    );\n                }\n\n                parserInput.restore('at-rule options not recognised');\n            },\n\n            //\n            // A Value is a comma-delimited list of Expressions\n            //\n            //     font-family: Baskerville, Georgia, serif;\n            //\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            //\n            value: function () {\n                let e;\n                const expressions = [];\n                const index = parserInput.i;\n\n                do {\n                    e = this.expression();\n                    if (e) {\n                        expressions.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (e);\n\n                if (expressions.length > 0) {\n                    return new(tree.Value)(expressions, index);\n                }\n            },\n            important: function () {\n                if (parserInput.currentChar() === '!') {\n                    return parserInput.$re(/^! *important/);\n                }\n            },\n            sub: function () {\n                let a;\n                let e;\n\n                parserInput.save();\n                if (parserInput.$char('(')) {\n                    a = this.addition();\n                    if (a && parserInput.$char(')')) {\n                        parserInput.forget();\n                        e = new(tree.Expression)([a]);\n                        e.parens = true;\n                        return e;\n                    }\n                    parserInput.restore('Expected \\')\\'');\n                    return;\n                }\n                parserInput.restore();\n            },\n            multiplication: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.operand();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        if (parserInput.peek(/^\\/[*\\/]/)) {\n                            break;\n                        }\n\n                        parserInput.save();\n\n                        op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\n\n                        if (!op) { parserInput.forget(); break; }\n\n                        a = this.operand();\n\n                        if (!a) { parserInput.restore(); break; }\n                        parserInput.forget();\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.multiplication();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\n                        if (!op) {\n                            break;\n                        }\n                        a = this.multiplication();\n                        if (!a) {\n                            break;\n                        }\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            conditions: function () {\n                let a;\n                let b;\n                const index = parserInput.i;\n                let condition;\n\n                a = this.condition(true);\n                if (a) {\n                    while (true) {\n                        if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                            break;\n                        }\n                        b = this.condition(true);\n                        if (!b) {\n                            break;\n                        }\n                        condition = new(tree.Condition)('or', condition || a, b, index);\n                    }\n                    return condition || a;\n                }\n            },\n            condition: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                function or() {\n                    return parserInput.$str('or');\n                }\n\n                result = this.conditionAnd(needsParens);\n                if (!result) {\n                    return ;\n                }\n                logical = or();\n                if (logical) {\n                    next = this.condition(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            conditionAnd: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                const self = this;\n                function insideCondition() {\n                    const cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\n                    if (!cond && !needsParens) {\n                        return self.atomicCondition(needsParens);\n                    }\n                    return cond;\n                }\n                function and() {\n                    return parserInput.$str('and');\n                }\n\n                result = insideCondition();\n                if (!result) {\n                    return ;\n                }\n                logical = and();\n                if (logical) {\n                    next = this.conditionAnd(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            negatedCondition: function (needsParens) {\n                if (parserInput.$str('not')) {\n                    const result = this.parenthesisCondition(needsParens);\n                    if (result) {\n                        result.negate = !result.negate;\n                    }\n                    return result;\n                }\n            },\n            parenthesisCondition: function (needsParens) {\n                function tryConditionFollowedByParenthesis(me) {\n                    let body;\n                    parserInput.save();\n                    body = me.condition(needsParens);\n                    if (!body) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    parserInput.forget();\n                    return body;\n                }\n\n                let body;\n                parserInput.save();\n                if (!parserInput.$str('(')) {\n                    parserInput.restore();\n                    return ;\n                }\n                body = tryConditionFollowedByParenthesis(this);\n                if (body) {\n                    parserInput.forget();\n                    return body;\n                }\n\n                body = this.atomicCondition(needsParens);\n                if (!body) {\n                    parserInput.restore();\n                    return ;\n                }\n                if (!parserInput.$char(')')) {\n                    parserInput.restore(`expected ')' got '${parserInput.currentChar()}'`);\n                    return ;\n                }\n                parserInput.forget();\n                return body;\n            },\n            atomicCondition: function (needsParens) {\n                const entities = this.entities;\n                const index = parserInput.i;\n                let a;\n                let b;\n                let c;\n                let op;\n\n                function cond() {\n                    return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\n                }\n                cond = cond.bind(this);\n\n                a = cond();\n                if (a) {\n                    if (parserInput.$char('>')) {\n                        if (parserInput.$char('=')) {\n                            op = '>=';\n                        } else {\n                            op = '>';\n                        }\n                    } else\n                    if (parserInput.$char('<')) {\n                        if (parserInput.$char('=')) {\n                            op = '<=';\n                        } else {\n                            op = '<';\n                        }\n                    } else\n                    if (parserInput.$char('=')) {\n                        if (parserInput.$char('>')) {\n                            op = '=>';\n                        } else if (parserInput.$char('<')) {\n                            op = '=<';\n                        } else {\n                            op = '=';\n                        }\n                    }\n                    if (op) {\n                        b = cond();\n                        if (b) {\n                            c = new(tree.Condition)(op, a, b, index, false);\n                        } else {\n                            error('expected expression');\n                        }\n                    } else {\n                        c = new(tree.Condition)('=', a, new(tree.Keyword)('true'), index, false);\n                    }\n                    return c;\n                }\n            },\n\n            //\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            //\n            operand: function () {\n                const entities = this.entities;\n                let negate;\n\n                if (parserInput.peek(/^-[@\\$\\(]/)) {\n                    negate = parserInput.$char('-');\n                }\n\n                let o = this.sub() || entities.dimension() ||\n                        entities.color() || entities.variable() ||\n                        entities.property() || entities.call() ||\n                        entities.quoted(true) || entities.colorKeyword() ||\n                        entities.mixinLookup();\n\n                if (negate) {\n                    o.parensInOp = true;\n                    o = new(tree.Negative)(o);\n                }\n\n                return o;\n            },\n\n            //\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.\n            //\n            //     1px solid black\n            //     @var * 2\n            //\n            expression: function () {\n                const entities = [];\n                let e;\n                let delim;\n                const index = parserInput.i;\n\n                do {\n                    e = this.comment();\n                    if (e) {\n                        entities.push(e);\n                        continue;\n                    }\n                    e = this.addition() || this.entity();\n                    if (e) {\n                        entities.push(e);\n                        // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n                        if (!parserInput.peek(/^\\/[\\/*]/)) {\n                            delim = parserInput.$char('/');\n                            if (delim) {\n                                entities.push(new(tree.Anonymous)(delim, index));\n                            }\n                        }\n                    }\n                } while (e);\n                if (entities.length > 0) {\n                    return new(tree.Expression)(entities);\n                }\n            },\n            property: function () {\n                const name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n                if (name) {\n                    return name[1];\n                }\n            },\n            ruleProperty: function () {\n                let name = [];\n                const index = [];\n                let s;\n                let k;\n\n                parserInput.save();\n\n                const simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n                if (simpleProperty) {\n                    name = [new(tree.Keyword)(simpleProperty[1])];\n                    parserInput.forget();\n                    return name;\n                }\n\n                function match(re) {\n                    const i = parserInput.i;\n                    const chunk = parserInput.$re(re);\n                    if (chunk) {\n                        index.push(i);\n                        return name.push(chunk[1]);\n                    }\n                }\n\n                match(/^(\\*?)/);\n                while (true) {\n                    if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\n                        break;\n                    }\n                }\n\n                if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n                    parserInput.forget();\n\n                    // at last, we have the complete match now. move forward,\n                    // convert name particles to tree objects and return:\n                    if (name[0] === '') {\n                        name.shift();\n                        index.shift();\n                    }\n                    for (k = 0; k < name.length; k++) {\n                        s = name[k];\n                        name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\n                            new(tree.Keyword)(s) :\n                            (s.charAt(0) === '@' ?\n                                new(tree.Variable)(`@${s.slice(2, -1)}`, index[k], fileInfo) :\n                                new(tree.Property)(`$${s.slice(2, -1)}`, index[k], fileInfo));\n                    }\n                    return name;\n                }\n                parserInput.restore();\n            }\n        }\n    };\n};\nParser.serializeVars = vars => {\n    let s = '';\n\n    for (const name in vars) {\n        if (Object.hasOwnProperty.call(vars, name)) {\n            const value = vars[name];\n            s += `${((name[0] === '@') ? '' : '@') + name}: ${value}${(String(value).slice(-1) === ';') ? '' : ';'}`;\n        }\n    }\n\n    return s;\n};\n\nexport default Parser;\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nlet colorFunctions;\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\nfunction hsla(origColor, hsl) {\n    const color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n    if (color) {\n        if (origColor.value && \n            /^(rgb|hsl)/.test(origColor.value)) {\n            color.value = origColor.value;\n        } else {\n            color.value = 'rgb';\n        }\n        return color;\n    }\n}\nfunction toHSL(color) {\n    if (color.toHSL) {\n        return color.toHSL();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction toHSV(color) {\n    if (color.toHSV) {\n        return color.toHSV();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction number(n) {\n    if (n instanceof Dimension) {\n        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n        return n;\n    } else {\n        throw {\n            type: 'Argument',\n            message: 'color functions take numbers as parameters'\n        };\n    }\n}\nfunction scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n        return parseFloat(n.value * size / 100);\n    } else {\n        return number(n);\n    }\n}\ncolorFunctions = {\n    rgb: function (r, g, b) {\n        const color = colorFunctions.rgba(r, g, b, 1.0);\n        if (color) {\n            color.value = 'rgb';\n            return color;\n        }\n    },\n    rgba: function (r, g, b, a) {\n        try {\n            if (r instanceof Color) {\n                if (g) {\n                    a = number(g);\n                } else {\n                    a = r.alpha;\n                }\n                return new Color(r.rgb, a, 'rgba');\n            }\n            const rgb = [r, g, b].map(c => scaled(c, 255));\n            a = number(a);\n            return new Color(rgb, a, 'rgba');\n        }\n        catch (e) {}\n    },\n    hsl: function (h, s, l) {\n        const color = colorFunctions.hsla(h, s, l, 1.0);\n        if (color) {\n            color.value = 'hsl';\n            return color;\n        }\n    },\n    hsla: function (h, s, l, a) {\n        try {\n            if (h instanceof Color) {\n                if (s) {\n                    a = number(s);\n                } else {\n                    a = h.alpha;\n                }\n                return new Color(h.rgb, a, 'hsla');\n            }\n\n            let m1;\n            let m2;\n\n            function hue(h) {\n                h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n                if (h * 6 < 1) {\n                    return m1 + (m2 - m1) * h * 6;\n                }\n                else if (h * 2 < 1) {\n                    return m2;\n                }\n                else if (h * 3 < 2) {\n                    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n                }\n                else {\n                    return m1;\n                }\n            }\n\n            h = (number(h) % 360) / 360;\n            s = clamp(number(s));l = clamp(number(l));a = clamp(number(a));\n\n            m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n            m1 = l * 2 - m2;\n\n            const rgb = [\n                hue(h + 1 / 3) * 255,\n                hue(h)       * 255,\n                hue(h - 1 / 3) * 255\n            ];\n            a = number(a);\n            return new Color(rgb, a, 'hsla');\n        }\n        catch (e) {}\n    },\n\n    hsv: function(h, s, v) {\n        return colorFunctions.hsva(h, s, v, 1.0);\n    },\n\n    hsva: function(h, s, v, a) {\n        h = ((number(h) % 360) / 360) * 360;\n        s = number(s);v = number(v);a = number(a);\n\n        let i;\n        let f;\n        i = Math.floor((h / 60) % 6);\n        f = (h / 60) - i;\n\n        const vs = [v,\n            v * (1 - s),\n            v * (1 - f * s),\n            v * (1 - (1 - f) * s)];\n        const perm = [[0, 3, 1],\n            [2, 0, 1],\n            [1, 0, 3],\n            [1, 2, 0],\n            [3, 1, 0],\n            [0, 1, 2]];\n\n        return colorFunctions.rgba(vs[perm[i][0]] * 255,\n            vs[perm[i][1]] * 255,\n            vs[perm[i][2]] * 255,\n            a);\n    },\n\n    hue: function (color) {\n        return new Dimension(toHSL(color).h);\n    },\n    saturation: function (color) {\n        return new Dimension(toHSL(color).s * 100, '%');\n    },\n    lightness: function (color) {\n        return new Dimension(toHSL(color).l * 100, '%');\n    },\n    hsvhue: function(color) {\n        return new Dimension(toHSV(color).h);\n    },\n    hsvsaturation: function (color) {\n        return new Dimension(toHSV(color).s * 100, '%');\n    },\n    hsvvalue: function (color) {\n        return new Dimension(toHSV(color).v * 100, '%');\n    },\n    red: function (color) {\n        return new Dimension(color.rgb[0]);\n    },\n    green: function (color) {\n        return new Dimension(color.rgb[1]);\n    },\n    blue: function (color) {\n        return new Dimension(color.rgb[2]);\n    },\n    alpha: function (color) {\n        return new Dimension(toHSL(color).a);\n    },\n    luma: function (color) {\n        return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function (color) {\n        const luminance =\n            (0.2126 * color.rgb[0] / 255) +\n                (0.7152 * color.rgb[1] / 255) +\n                (0.0722 * color.rgb[2] / 255);\n\n        return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function (color, amount, method) {\n        // filter: saturate(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s +=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s += amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    desaturate: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s -=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s -= amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    lighten: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l +=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l += amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    darken: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l -=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l -= amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    fadein: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a +=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a += amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fadeout: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a -=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a -= amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fade: function (color, amount) {\n        const hsl = toHSL(color);\n\n        hsl.a = amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    spin: function (color, amount) {\n        const hsl = toHSL(color);\n        const hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(color, hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        if (!weight) {\n            weight = new Dimension(50);\n        }\n        const p = weight.value / 100.0;\n        const w = p * 2 - 1;\n        const a = toHSL(color1).a - toHSL(color2).a;\n\n        const w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        const w2 = 1 - w1;\n\n        const rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        const alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function (color, dark, light, threshold) {\n        // filter: contrast(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        if (typeof light === 'undefined') {\n            light = colorFunctions.rgba(255, 255, 255, 1.0);\n        }\n        if (typeof dark === 'undefined') {\n            dark = colorFunctions.rgba(0, 0, 0, 1.0);\n        }\n        // Figure out which is actually light and dark:\n        if (dark.luma() > light.luma()) {\n            const t = light;\n            light = dark;\n            dark = t;\n        }\n        if (typeof threshold === 'undefined') {\n            threshold = 0.43;\n        } else {\n            threshold = number(threshold);\n        }\n        if (color.luma() < threshold) {\n            return light;\n        } else {\n            return dark;\n        }\n    },\n    // Changes made in 2.7.0 - Reverted in 3.0.0\n    // contrast: function (color, color1, color2, threshold) {\n    //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n    //     // according to the standard WCAG contrast ratio calculation.\n    //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    //     // The threshold param is no longer used, in line with SASS.\n    //     // filter: contrast(3.2);\n    //     // should be kept as is, so check for color\n    //     if (!color.rgb) {\n    //         return null;\n    //     }\n    //     if (typeof color1 === 'undefined') {\n    //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n    //     }\n    //     if (typeof color2 === 'undefined') {\n    //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n    //     }\n    //     var contrast1, contrast2;\n    //     var luma = color.luma();\n    //     var luma1 = color1.luma();\n    //     var luma2 = color2.luma();\n    //     // Calculate contrast ratios for each color\n    //     if (luma > luma1) {\n    //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n    //     } else {\n    //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (luma > luma2) {\n    //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n    //     } else {\n    //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (contrast1 > contrast2) {\n    //         return color1;\n    //     } else {\n    //         return color2;\n    //     }\n    // },\n    argb: function (color) {\n        return new Anonymous(color.toARGB());\n    },\n    color: function(c) {\n        if ((c instanceof Quoted) &&\n            (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\n            const val = c.value.slice(1);\n            return new Color(val, undefined, `#${val}`);\n        }\n        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n            c.value = undefined;\n            return c;\n        }\n        throw {\n            type:    'Argument',\n            message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n        };\n    },\n    tint: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n};\n\nexport default colorFunctions;\n","import Anonymous from '../tree/anonymous';\nimport Keyword from '../tree/keyword';\n\nfunction boolean(condition) {\n    return condition ? Keyword.True : Keyword.False;\n}\n\nfunction If(condition, trueValue, falseValue) {\n    return condition ? trueValue\n        : (falseValue || new Anonymous);\n}\n\nexport default { boolean, 'if': If };\n","import Color from '../tree/color';\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n    const ab = color1.alpha;        // result\n\n    let // backdrop\n    cb;\n\n    const as = color2.alpha;\n\n    let // source\n    cs;\n\n    let ar;\n    let cr;\n    const r = [];\n\n    ar = as + ab * (1 - as);\n    for (let i = 0; i < 3; i++) {\n        cb = color1.rgb[i] / 255;\n        cs = color2.rgb[i] / 255;\n        cr = mode(cb, cs);\n        if (ar) {\n            cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n        }\n        r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n}\n\nconst colorBlendModeFunctions = {\n    multiply: function(cb, cs) {\n        return cb * cs;\n    },\n    screen: function(cb, cs) {\n        return cb + cs - cb * cs;\n    },\n    overlay: function(cb, cs) {\n        cb *= 2;\n        return (cb <= 1) ?\n            colorBlendModeFunctions.multiply(cb, cs) :\n            colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function(cb, cs) {\n        let d = 1;\n        let e = cb;\n        if (cs > 0.5) {\n            e = 1;\n            d = (cb > 0.25) ? Math.sqrt(cb)\n                : ((16 * cb - 12) * cb + 4) * cb;\n        }\n        return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function(cb, cs) {\n        return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function(cb, cs) {\n        return Math.abs(cb - cs);\n    },\n    exclusion: function(cb, cs) {\n        return cb + cs - 2 * cb * cs;\n    },\n\n    // non-w3c functions:\n    average: function(cb, cs) {\n        return (cb + cs) / 2;\n    },\n    negation: function(cb, cs) {\n        return 1 - Math.abs(cb + cs - 1);\n    }\n};\n\nfor (const f in colorBlendModeFunctions) {\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n}\n\nexport default colorBlend;\n","import Comment from '../tree/comment';\nimport Dimension from '../tree/dimension';\nimport Declaration from '../tree/declaration';\nimport Expression from '../tree/expression';\nimport Ruleset from '../tree/ruleset';\nimport Selector from '../tree/selector';\nimport Element from '../tree/element';\nimport Quote from '../tree/quoted';\n\nconst getItemsFromNode = node => {\n    // handle non-array values as an array of length 1\n    // return 'undefined' if index is invalid\n    const items = Array.isArray(node.value) ?\n        node.value : Array(node);\n\n    return items;\n};\n\nexport default {\n    _SELF: function(n) {\n        return n;\n    },\n    extract: function(values, index) {\n        index = index.value - 1; // (1-based index)\n\n        return getItemsFromNode(values)[index];\n    },\n    length: function(values) {\n        return new Dimension(getItemsFromNode(values).length);\n    },\n    /**\n     * Creates a Less list of incremental values.\n     * Modeled after Lodash's range function, also exists natively in PHP\n     * \n     * @param {Dimension} [start=1]\n     * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\n     * @param {Dimension} [step=1] \n     */\n    range: function(start, end, step) {\n        let from;\n        let to;\n        let stepValue = 1;\n        const list = [];\n        if (end) {\n            to = end;\n            from = start.value;\n            if (step) {\n                stepValue = step.value;\n            }\n        }\n        else {\n            from = 1;\n            to = start;\n        }\n\n        for (let i = from; i <= to.value; i += stepValue) {\n            list.push(new Dimension(i, to.unit));\n        }\n\n        return new Expression(list);\n    },\n    each: function(list, rs) {\n        const rules = [];\n        let newRules;\n        let iterator;\n\n        if (list.value && !(list instanceof Quote)) {\n            if (Array.isArray(list.value)) {\n                iterator = list.value;\n            } else {\n                iterator = [list.value];\n            }\n        } else if (list.ruleset) {\n            iterator = list.ruleset.rules;\n        } else if (list.rules) {\n            iterator = list.rules;\n        } else if (Array.isArray(list)) {\n            iterator = list;\n        } else {\n            iterator = [list];\n        }\n\n        let valueName = '@value';\n        let keyName = '@key';\n        let indexName = '@index';\n\n        if (rs.params) {\n            valueName = rs.params[0] && rs.params[0].name;\n            keyName = rs.params[1] && rs.params[1].name;\n            indexName = rs.params[2] && rs.params[2].name;\n            rs = rs.rules;\n        } else {\n            rs = rs.ruleset;\n        }\n\n        for (let i = 0; i < iterator.length; i++) {\n            let key;\n            let value;\n            const item = iterator[i];\n            if (item instanceof Declaration) {\n                key = typeof item.name === 'string' ? item.name : item.name[0].value;\n                value = item.value;\n            } else {\n                key = new Dimension(i + 1);\n                value = item;\n            }\n\n            if (item instanceof Comment) {\n                continue;\n            }\n\n            newRules = rs.rules.slice(0);\n            if (valueName) {\n                newRules.push(new Declaration(valueName,\n                    value,\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (indexName) {\n                newRules.push(new Declaration(indexName,\n                    new Dimension(i + 1),\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (keyName) {\n                newRules.push(new Declaration(keyName,\n                    key,\n                    false, false, this.index, this.currentFileInfo));\n            }\n\n            rules.push(new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n                newRules,\n                rs.strictImports,\n                rs.visibilityInfo()\n            ));\n        }\n\n        return new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n                rules,\n                rs.strictImports,\n                rs.visibilityInfo()\n            ).eval(this.context);\n    }\n};\n","import Dimension from '../tree/dimension';\n\nconst MathHelper = (fn, unit, n) => {\n    if (!(n instanceof Dimension)) {\n        throw { type: 'Argument', message: 'argument must be a number' };\n    }\n    if (unit == null) {\n        unit = n.unit;\n    } else {\n        n = n.unify();\n    }\n    return new Dimension(fn(parseFloat(n.value)), unit);\n};\n\nexport default MathHelper;","import mathHelper from './math-helper.js';\n\nconst mathFunctions = {\n    // name,  unit\n    ceil:  null,\n    floor: null,\n    sqrt:  null,\n    abs:   null,\n    tan:   '',\n    sin:   '',\n    cos:   '',\n    atan:  'rad',\n    asin:  'rad',\n    acos:  'rad'\n};\n\nfor (const f in mathFunctions) {\n    if (mathFunctions.hasOwnProperty(f)) {\n        mathFunctions[f] = mathHelper.bind(null, Math[f], mathFunctions[f]);\n    }\n}\n\nmathFunctions.round = (n, f) => {\n    const fraction = typeof f === 'undefined' ? 0 : f.value;\n    return mathHelper(num => num.toFixed(fraction), null, n);\n};\n\nexport default mathFunctions;\n","import Dimension from '../tree/dimension';\nimport Anonymous from '../tree/anonymous';\nimport mathHelper from './math-helper.js';\n\nconst minMax = function (isMin, args) {\n    args = Array.prototype.slice.call(args);\n    switch (args.length) {\n        case 0: throw { type: 'Argument', message: 'one or more arguments required' };\n    }\n    let i; // key is the unit.toString() for unified Dimension values,\n    let j;\n    let current;\n    let currentUnified;\n    let referenceUnified;\n    let unit;\n    let unitStatic;\n    let unitClone;\n\n    const // elems only contains original argument values.\n    order  = [];\n\n    const values = {};\n    // value is the index into the order array.\n    for (i = 0; i < args.length; i++) {\n        current = args[i];\n        if (!(current instanceof Dimension)) {\n            if (Array.isArray(args[i].value)) {\n                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n            }\n            continue;\n        }\n        currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n        unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n        unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n        unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n        j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n        if (j === undefined) {\n            if (unitStatic !== undefined && unit !== unitStatic) {\n                throw { type: 'Argument', message: 'incompatible types' };\n            }\n            values[unit] = order.length;\n            order.push(current);\n            continue;\n        }\n        referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n        if ( isMin && currentUnified.value < referenceUnified.value ||\n            !isMin && currentUnified.value > referenceUnified.value) {\n            order[j] = current;\n        }\n    }\n    if (order.length == 1) {\n        return order[0];\n    }\n    args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\n    return new Anonymous(`${isMin ? 'min' : 'max'}(${args})`);\n};\n\nexport default {\n    min: function(...args) {\n        return minMax(true, args);\n    },\n    max: function(...args) {\n        return minMax(false, args);\n    },\n    convert: function (val, unit) {\n        return val.convertTo(unit.value);\n    },\n    pi: function () {\n        return new Dimension(Math.PI);\n    },\n    mod: function(a, b) {\n        return new Dimension(a.value % b.value, a.unit);\n    },\n    pow: function(x, y) {\n        if (typeof x === 'number' && typeof y === 'number') {\n            x = new Dimension(x);\n            y = new Dimension(y);\n        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n            throw { type: 'Argument', message: 'arguments must be numbers' };\n        }\n\n        return new Dimension(Math.pow(x.value, y.value), x.unit);\n    },\n    percentage: function (n) {\n        const result = mathHelper(num => num * 100, '%', n);\n\n        return result;\n    }\n};\n","/**\n * Plugin Manager\n */\nclass PluginManager {\n    constructor(less) {\n        this.less = less;\n        this.visitors = [];\n        this.preProcessors = [];\n        this.postProcessors = [];\n        this.installedPlugins = [];\n        this.fileManagers = [];\n        this.iterator = -1;\n        this.pluginCache = {};\n        this.Loader = new less.PluginLoader(less);\n    }\n\n    /**\n     * Adds all the plugins in the array\n     * @param {Array} plugins\n     */\n    addPlugins(plugins) {\n        if (plugins) {\n            for (let i = 0; i < plugins.length; i++) {\n                this.addPlugin(plugins[i]);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param plugin\n     * @param {String} filename\n     */\n    addPlugin(plugin, filename, functionRegistry) {\n        this.installedPlugins.push(plugin);\n        if (filename) {\n            this.pluginCache[filename] = plugin;\n        }\n        if (plugin.install) {\n            plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\n        }\n    }\n\n    /**\n     *\n     * @param filename\n     */\n    get(filename) {\n        return this.pluginCache[filename];\n    }\n\n    /**\n     * Adds a visitor. The visitor object has options on itself to determine\n     * when it should run.\n     * @param visitor\n     */\n    addVisitor(visitor) {\n        this.visitors.push(visitor);\n    }\n\n    /**\n     * Adds a pre processor object\n     * @param {object} preProcessor\n     * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n     */\n    addPreProcessor(preProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n            if (this.preProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.preProcessors.splice(indexToInsertAt, 0, {preProcessor, priority});\n    }\n\n    /**\n     * Adds a post processor object\n     * @param {object} postProcessor\n     * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n     */\n    addPostProcessor(postProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n            if (this.postProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.postProcessors.splice(indexToInsertAt, 0, {postProcessor, priority});\n    }\n\n    /**\n     *\n     * @param manager\n     */\n    addFileManager(manager) {\n        this.fileManagers.push(manager);\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPreProcessors() {\n        const preProcessors = [];\n        for (let i = 0; i < this.preProcessors.length; i++) {\n            preProcessors.push(this.preProcessors[i].preProcessor);\n        }\n        return preProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPostProcessors() {\n        const postProcessors = [];\n        for (let i = 0; i < this.postProcessors.length; i++) {\n            postProcessors.push(this.postProcessors[i].postProcessor);\n        }\n        return postProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getVisitors() {\n        return this.visitors;\n    }\n\n    visitor() {\n        const self = this;\n        return {\n            first: function() {\n                self.iterator = -1;\n                return self.visitors[self.iterator];\n            },\n            get: function() {\n                self.iterator += 1;\n                return self.visitors[self.iterator];\n            }\n        };\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getFileManagers() {\n        return this.fileManagers;\n    }\n}\n\nlet pm;\n\nconst PluginManagerFactory = (less, newFactory) => {\n        if (newFactory || !pm) {\n            pm = new PluginManager(less);\n        }\n        return pm;\n    };\n\n//\nexport default PluginManagerFactory;\n","import Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport Quote from '../tree/quoted';\nimport JavaScript from '../tree/javascript';\n\nexport default {\n    e: function (str) {\n        return new Quote('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\n    },\n    escape: function (str) {\n        return new Anonymous(\n            encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    },\n    replace: function (string, pattern, replacement, flags) {\n        let result = string.value;\n        replacement = (replacement.type === 'Quoted') ?\n            replacement.value : replacement.toCSS();\n        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n        return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function (string /* arg, arg, ... */) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        let result = string.value;\n\n        for (let i = 0; i < args.length; i++) {\n            /* jshint loopfunc:true */\n            result = result.replace(/%[sda]/i, token => {\n                const value = ((args[i].type === 'Quoted') &&\n                    token.match(/s/i)) ? args[i].value : args[i].toCSS();\n                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n            });\n        }\n        result = result.replace(/%%/g, '%');\n        return new Quoted(string.quote || '', result, string.escaped);\n    }\n};\n","import Keyword from '../tree/keyword';\nimport DetachedRuleset from '../tree/detached-ruleset';\nimport Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport URL from '../tree/url';\nimport Operation from '../tree/operation';\n\nconst isa = (n, Type) => (n instanceof Type) ? Keyword.True : Keyword.False;\nconst isunit = (n, unit) => {\n    if (unit === undefined) {\n        throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\n    }\n    unit = typeof unit.value === 'string' ? unit.value : unit;\n    if (typeof unit !== 'string') {\n        throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\n    }\n    return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n};\n\nexport default {\n    isruleset: function (n) {\n        return isa(n, DetachedRuleset);\n    },\n    iscolor: function (n) {\n        return isa(n, Color);\n    },\n    isnumber: function (n) {\n        return isa(n, Dimension);\n    },\n    isstring: function (n) {\n        return isa(n, Quoted);\n    },\n    iskeyword: function (n) {\n        return isa(n, Keyword);\n    },\n    isurl: function (n) {\n        return isa(n, URL);\n    },\n    ispixel: function (n) {\n        return isunit(n, 'px');\n    },\n    ispercentage: function (n) {\n        return isunit(n, '%');\n    },\n    isem: function (n) {\n        return isunit(n, 'em');\n    },\n    isunit,\n    unit: function (val, unit) {\n        if (!(val instanceof Dimension)) {\n            throw { type: 'Argument',\n                message: `the first argument to unit must be a number${val instanceof Operation ? '. Have you forgotten parenthesis?' : ''}` };\n        }\n        if (unit) {\n            if (unit instanceof Keyword) {\n                unit = unit.value;\n            } else {\n                unit = unit.toCSS();\n            }\n        } else {\n            unit = '';\n        }\n        return new Dimension(val.value, unit);\n    },\n    'get-unit': function (n) {\n        return new Anonymous(n.unit);\n    }\n};\n","import functionRegistry from './function-registry';\nimport functionCaller from './function-caller';\n\nimport boolean from './boolean';\nimport defaultFunc from './default';\nimport color from './color';\nimport colorBlending from './color-blending';\nimport dataUri from './data-uri';\nimport list from './list';\nimport math from './math';\nimport number from './number';\nimport string from './string';\nimport svg from './svg';\nimport types from './types';\n\nexport default environment => {\n    const functions = { functionRegistry, functionCaller };\n\n    // register functions\n    functionRegistry.addMultiple(boolean);\n    functionRegistry.addMultiple(defaultFunc);\n    functionRegistry.addMultiple(color);\n    functionRegistry.addMultiple(colorBlending);\n    functionRegistry.addMultiple(dataUri(environment));\n    functionRegistry.addMultiple(list);\n    functionRegistry.addMultiple(math);\n    functionRegistry.addMultiple(number);\n    functionRegistry.addMultiple(string);\n    functionRegistry.addMultiple(svg(environment));\n    functionRegistry.addMultiple(types);\n\n    return functions;\n};\n","import Quoted from '../tree/quoted';\nimport URL from '../tree/url';\nimport * as utils from '../utils';\nimport logger from '../logger';\n\nexport default environment => {\n    \n    const fallback = (functionThis, node) => new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);    \n\n    return { 'data-uri': function(mimetypeNode, filePathNode) {\n\n        if (!filePathNode) {\n            filePathNode = mimetypeNode;\n            mimetypeNode = null;\n        }\n\n        let mimetype = mimetypeNode && mimetypeNode.value;\n        let filePath = filePathNode.value;\n        const currentFileInfo = this.currentFileInfo;\n        const currentDirectory = currentFileInfo.rewriteUrls ?\n            currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n\n        const fragmentStart = filePath.indexOf('#');\n        let fragment = '';\n        if (fragmentStart !== -1) {\n            fragment = filePath.slice(fragmentStart);\n            filePath = filePath.slice(0, fragmentStart);\n        }\n        const context = utils.clone(this.context);\n        context.rawBuffer = true;\n\n        const fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n\n        if (!fileManager) {\n            return fallback(this, filePathNode);\n        }\n\n        let useBase64 = false;\n\n        // detect the mimetype if not given\n        if (!mimetypeNode) {\n\n            mimetype = environment.mimeLookup(filePath);\n\n            if (mimetype === 'image/svg+xml') {\n                useBase64 = false;\n            } else {\n                // use base 64 unless it's an ASCII or UTF-8 format\n                const charset = environment.charsetLookup(mimetype);\n                useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n            }\n            if (useBase64) { mimetype += ';base64'; }\n        }\n        else {\n            useBase64 = /;base64$/.test(mimetype);\n        }\n\n        const fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n        if (!fileSync.contents) {\n            logger.warn(`Skipped data-uri embedding of ${filePath} because file not found`);\n            return fallback(this, filePathNode || mimetypeNode);\n        }\n        let buf = fileSync.contents;\n        if (useBase64 && !environment.encodeBase64) {\n            return fallback(this, filePathNode);\n        }\n\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n\n        const uri = `data:${mimetype},${buf}${fragment}`;\n\n        return new URL(new Quoted(`\"${uri}\"`, uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Expression from '../tree/expression';\nimport Quoted from '../tree/quoted';\nimport URL from '../tree/url';\n\nexport default environment => {\n    return { 'svg-gradient': function(direction) {\n        let stops;\n        let gradientDirectionSvg;\n        let gradientType = 'linear';\n        let rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\n        const renderEnv = {compress: false};\n        let returner;\n        const directionValue = direction.toCSS(renderEnv);\n        let i;\n        let color;\n        let position;\n        let positionValue;\n        let alpha;\n\n        function throwArgumentDescriptor() {\n            throw { type: 'Argument',\n                message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n                            ' end_color [end_position] or direction, color list' };\n        }\n\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n            case 'to bottom':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                break;\n            case 'to right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'to bottom right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                break;\n            case 'to top right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'ellipse':\n            case 'ellipse at center':\n                gradientType = 'radial';\n                gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                break;\n            default:\n                throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\n                    ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\n        }\n        returner = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1 1\"><${gradientType}Gradient id=\"g\" ${gradientDirectionSvg}>`;\n\n        for (i = 0; i < stops.length; i += 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n\n            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n            alpha = color.alpha;\n            returner += `<stop offset=\"${positionValue}\" stop-color=\"${color.toRGB()}\"${alpha < 1 ? ` stop-opacity=\"${alpha}\"` : ''}/>`;\n        }\n        returner += `</${gradientType}Gradient><rect ${rectangleDimension} fill=\"url(#g)\" /></svg>`;\n\n        returner = encodeURIComponent(returner);\n\n        returner = `data:image/svg+xml,${returner}`;\n        return new URL(new Quoted(`'${returner}'`, returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import contexts from './contexts';\nimport visitor from './visitors';\nimport tree from './tree';\n\nexport default (root, options = {}) => {\n    let evaldRoot;\n    let variables = options.variables;\n    const evalEnv = new contexts.Eval(options);\n\n    //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Declaration('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(k => {\n            let value = variables[k];\n\n            if (!(value instanceof tree.Value)) {\n                if (!(value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Declaration(`@${k}`, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    const visitors = [\n            new visitor.JoinSelectorVisitor(),\n            new visitor.MarkVisibleSelectorsVisitor(true),\n            new visitor.ExtendVisitor(),\n            new visitor.ToCSSVisitor({compress: Boolean(options.compress)})\n        ];\n\n    const preEvalVisitors = [];\n    let v;\n    let visitorIterator;\n\n    /**\n     * first() / get() allows visitors to be added while visiting\n     * \n     * @todo Add scoping for visitors just like functions for @plugin; right now they're global\n     */\n    if (options.pluginManager) {\n        visitorIterator = options.pluginManager.visitor();\n        for (var i = 0; i < 2; i++) {\n            visitorIterator.first();\n            while ((v = visitorIterator.get())) {\n                if (v.isPreEvalVisitor) {\n                    if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                        preEvalVisitors.push(v);\n                        v.run(root);\n                    }\n                }\n                else {\n                    if (i === 0 || visitors.indexOf(v) === -1) {\n                        if (v.isPreVisitor) {\n                            visitors.unshift(v);\n                        }\n                        else {\n                            visitors.push(v);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    evaldRoot = root.eval(evalEnv);\n\n    for (var i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n\n    // Run any remaining visitors added after eval pass\n    if (options.pluginManager) {\n        visitorIterator.first();\n        while ((v = visitorIterator.get())) {\n            if (visitors.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                v.run(evaldRoot);\n            }\n        }\n    }\n\n    return evaldRoot;\n};\n","import data from './data';\nimport tree from './tree';\nimport Environment from './environment/environment';\nimport AbstractFileManager from './environment/abstract-file-manager';\nimport AbstractPluginLoader from './environment/abstract-plugin-loader';\nimport visitors from './visitors';\nimport Parser from './parser/parser';\nimport Functions from './functions';\nimport contexts from './contexts';\nimport sourceMapOutput from './source-map-output';\nimport sourceMapBuilder from './source-map-builder';\nimport parseTree from './parse-tree';\nimport importManager from './import-manager';\nimport Render from './render';\nimport Parse from './parse';\nimport LessError from './less-error';\nimport transformTree from './transform-tree';\nimport * as utils from './utils';\nimport PluginManager from './plugin-manager';\nimport logger from './logger';\n\nexport default (environment, fileManagers) => {\n    const SourceMapOutput = sourceMapOutput(environment);\n    const SourceMapBuilder = sourceMapBuilder(SourceMapOutput, environment);\n    const ParseTree = parseTree(SourceMapBuilder);\n    const ImportManager = importManager(environment);\n    const render = Render(environment, ParseTree, ImportManager);\n    const parse = Parse(environment, ParseTree, ImportManager);\n    const environ = new Environment(environment, fileManagers);\n    const functions = Functions(environment);\n\n    const initial = {\n        version: [3, 9, 0],\n        data,\n        tree,\n        Environment,\n        AbstractFileManager,\n        AbstractPluginLoader,\n        environment: environ,\n        visitors,\n        Parser,\n        functions,\n        contexts,\n        SourceMapOutput,\n        SourceMapBuilder,\n        ParseTree,\n        ImportManager,\n        render,\n        parse,\n        LessError,\n        transformTree,\n        utils,\n        PluginManager,\n        logger\n    };\n\n    // Create a public API\n\n    const ctor = t => (function(...args) {\n        const obj = Object.create(t.prototype);\n        t.apply(obj, Array.prototype.slice.call(args, 0));\n        return obj;\n    });\n    let t;\n    const api = Object.create(initial);\n    for (const n in initial.tree) {\n        /* eslint guard-for-in: 0 */\n        t = initial.tree[n];\n        if (typeof t === 'function') {\n            api[n.toLowerCase()] = ctor(t);\n        }\n        else {\n            api[n] = Object.create(null);\n            for (const o in t) {\n                /* eslint guard-for-in: 0 */\n                api[n][o.toLowerCase()] = ctor(t[o]);\n            }\n        }\n    }\n\n    return api;\n};\n","export default environment => {\n    class SourceMapOutput {\n        constructor(options) {\n            this._css = [];\n            this._rootNode = options.rootNode;\n            this._contentsMap = options.contentsMap;\n            this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n            if (options.sourceMapFilename) {\n                this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n            }\n            this._outputFilename = options.outputFilename;\n            this.sourceMapURL = options.sourceMapURL;\n            if (options.sourceMapBasepath) {\n                this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n            }\n            if (options.sourceMapRootpath) {\n                this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n                if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                    this._sourceMapRootpath += '/';\n                }\n            } else {\n                this._sourceMapRootpath = '';\n            }\n            this._outputSourceFiles = options.outputSourceFiles;\n            this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n\n            this._lineNumber = 0;\n            this._column = 0;\n        }\n\n        removeBasepath(path) {\n            if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n                path = path.substring(this._sourceMapBasepath.length);\n                if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n                    path = path.substring(1);\n                }\n            }\n\n            return path;\n        }\n\n        normalizeFilename(filename) {\n            filename = filename.replace(/\\\\/g, '/');\n            filename = this.removeBasepath(filename);\n            return (this._sourceMapRootpath || '') + filename;\n        }\n\n        add(chunk, fileInfo, index, mapLines) {\n            // ignore adding empty strings\n            if (!chunk) {\n                return;\n            }\n\n            let lines;\n            let sourceLines;\n            let columns;\n            let sourceColumns;\n            let i;\n\n            if (fileInfo && fileInfo.filename) {\n                let inputSource = this._contentsMap[fileInfo.filename];\n\n                // remove vars/banner added to the top of the file\n                if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                    // adjust the index\n                    index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                    if (index < 0) { index = 0; }\n                    // adjust the source\n                    inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n                }\n\n                // ignore empty content\n                if (inputSource === undefined) {\n                    return;\n                }\n\n                inputSource = inputSource.substring(0, index);\n                sourceLines = inputSource.split('\\n');\n                sourceColumns = sourceLines[sourceLines.length - 1];\n            }\n\n            lines = chunk.split('\\n');\n            columns = lines[lines.length - 1];\n\n            if (fileInfo && fileInfo.filename) {\n                if (!mapLines) {\n                    this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column},\n                        original: { line: sourceLines.length, column: sourceColumns.length},\n                        source: this.normalizeFilename(fileInfo.filename)});\n                } else {\n                    for (i = 0; i < lines.length; i++) {\n                        this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0},\n                            original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0},\n                            source: this.normalizeFilename(fileInfo.filename)});\n                    }\n                }\n            }\n\n            if (lines.length === 1) {\n                this._column += columns.length;\n            } else {\n                this._lineNumber += lines.length - 1;\n                this._column = columns.length;\n            }\n\n            this._css.push(chunk);\n        }\n\n        isEmpty() {\n            return this._css.length === 0;\n        }\n\n        toCSS(context) {\n            this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n\n            if (this._outputSourceFiles) {\n                for (const filename in this._contentsMap) {\n                    if (this._contentsMap.hasOwnProperty(filename)) {\n                        let source = this._contentsMap[filename];\n                        if (this._contentsIgnoredCharsMap[filename]) {\n                            source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                        }\n                        this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                    }\n                }\n            }\n\n            this._rootNode.genCSS(context, this);\n\n            if (this._css.length > 0) {\n                let sourceMapURL;\n                const sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n                if (this.sourceMapURL) {\n                    sourceMapURL = this.sourceMapURL;\n                } else if (this._sourceMapFilename) {\n                    sourceMapURL = this._sourceMapFilename;\n                }\n                this.sourceMapURL = sourceMapURL;\n\n                this.sourceMap = sourceMapContent;\n            }\n\n            return this._css.join('');\n        }\n    }\n\n    return SourceMapOutput;\n};\n","export default (SourceMapOutput, environment) => {\n    class SourceMapBuilder {\n        constructor(options) {\n            this.options = options;\n        }\n\n        toCSS(rootNode, options, imports) {\n            const sourceMapOutput = new SourceMapOutput(\n                {\n                    contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n                    rootNode,\n                    contentsMap: imports.contents,\n                    sourceMapFilename: this.options.sourceMapFilename,\n                    sourceMapURL: this.options.sourceMapURL,\n                    outputFilename: this.options.sourceMapOutputFilename,\n                    sourceMapBasepath: this.options.sourceMapBasepath,\n                    sourceMapRootpath: this.options.sourceMapRootpath,\n                    outputSourceFiles: this.options.outputSourceFiles,\n                    sourceMapGenerator: this.options.sourceMapGenerator,\n                    sourceMapFileInline: this.options.sourceMapFileInline\n                });\n\n            const css = sourceMapOutput.toCSS(options);\n            this.sourceMap = sourceMapOutput.sourceMap;\n            this.sourceMapURL = sourceMapOutput.sourceMapURL;\n            if (this.options.sourceMapInputFilename) {\n                this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n            }\n            if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\n                this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\n            }\n            return css + this.getCSSAppendage();\n        }\n\n        getCSSAppendage() {\n\n            let sourceMapURL = this.sourceMapURL;\n            if (this.options.sourceMapFileInline) {\n                if (this.sourceMap === undefined) {\n                    return '';\n                }\n                sourceMapURL = `data:application/json;base64,${environment.encodeBase64(this.sourceMap)}`;\n            }\n\n            if (sourceMapURL) {\n                return `/*# sourceMappingURL=${sourceMapURL} */`;\n            }\n            return '';\n        }\n\n        getExternalSourceMap() {\n            return this.sourceMap;\n        }\n\n        setExternalSourceMap(sourceMap) {\n            this.sourceMap = sourceMap;\n        }\n\n        isInline() {\n            return this.options.sourceMapFileInline;\n        }\n\n        getSourceMapURL() {\n            return this.sourceMapURL;\n        }\n\n        getOutputFilename() {\n            return this.options.sourceMapOutputFilename;\n        }\n\n        getInputFilename() {\n            return this.sourceMapInputFilename;\n        }\n    }\n\n    return SourceMapBuilder;\n};\n","import LessError from './less-error';\nimport transformTree from './transform-tree';\nimport logger from './logger';\n\nexport default SourceMapBuilder => {\n    class ParseTree {\n        constructor(root, imports) {\n            this.root = root;\n            this.imports = imports;\n        }\n\n        toCSS(options) {\n            let evaldRoot;\n            const result = {};\n            let sourceMapBuilder;\n            try {\n                evaldRoot = transformTree(this.root, options);\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            try {\n                const compress = Boolean(options.compress);\n                if (compress) {\n                    logger.warn('The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n                }\n\n                const toCSSOptions = {\n                    compress,\n                    dumpLineNumbers: options.dumpLineNumbers,\n                    strictUnits: Boolean(options.strictUnits),\n                    numPrecision: 8};\n\n                if (options.sourceMap) {\n                    sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                    result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n                } else {\n                    result.css = evaldRoot.toCSS(toCSSOptions);\n                }\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            if (options.pluginManager) {\n                const postProcessors = options.pluginManager.getPostProcessors();\n                for (let i = 0; i < postProcessors.length; i++) {\n                    result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options, imports: this.imports });\n                }\n            }\n            if (options.sourceMap) {\n                result.map = sourceMapBuilder.getExternalSourceMap();\n            }\n\n            result.imports = [];\n            for (const file in this.imports.files) {\n                if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                    result.imports.push(file);\n                }\n            }\n            return result;\n        }\n    }\n\n    return ParseTree;\n};\n","import contexts from './contexts';\nimport Parser from './parser/parser';\nimport LessError from './less-error';\nimport * as utils from './utils';\nimport logger from './logger';\n\nexport default environment => {\n    // FileInfo = {\n    //  'rewriteUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n\n    class ImportManager {\n        constructor(less, context, rootFileInfo) {\n            this.less = less;\n            this.rootFilename = rootFileInfo.filename;\n            this.paths = context.paths || [];  // Search paths, when importing\n            this.contents = {};             // map - filename to contents of all the files\n            this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n            this.mime = context.mime;\n            this.error = null;\n            this.context = context;\n            // Deprecated? Unused outside of here, could be useful.\n            this.queue = [];        // Files which haven't been imported yet\n            this.files = {};        // Holds the imported parse trees.\n        }\n\n        /**\n         * Add an import to be imported\n         * @param path - the raw path\n         * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\n         * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n         * @param importOptions - import options\n         * @param callback - callback for when it is imported\n         */\n        push(path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n            const importManager = this;\n            const pluginLoader = this.context.pluginManager.Loader;\n\n            this.queue.push(path);\n\n            const fileParsedFunc = (e, root, fullPath) => {\n                importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n                const importedEqualsRoot = fullPath === importManager.rootFilename;\n                if (importOptions.optional && e) {\n                    callback(null, {rules:[]}, false, null);\n                    logger.info(`The file ${fullPath} was skipped because it was not found and the import was marked optional.`);\n                }\n                else {\n                    // Inline imports aren't cached here.\n                    // If we start to cache them, please make sure they won't conflict with non-inline imports of the\n                    // same name as they used to do before this comment and the condition below have been added.\n                    if (!importManager.files[fullPath] && !importOptions.inline) {\n                        importManager.files[fullPath] = { root, options: importOptions };\n                    }\n                    if (e && !importManager.error) { importManager.error = e; }\n                    callback(e, root, importedEqualsRoot, fullPath);\n                }\n            };\n\n            const newFileInfo = {\n                rewriteUrls: this.context.rewriteUrls,\n                entryPath: currentFileInfo.entryPath,\n                rootpath: currentFileInfo.rootpath,\n                rootFilename: currentFileInfo.rootFilename\n            };\n\n            const fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n            if (!fileManager) {\n                fileParsedFunc({ message: `Could not find a file-manager for ${path}` });\n                return;\n            }\n\n            const loadFileCallback = loadedFile => {\n                let plugin;\n                const resolvedFilename = loadedFile.filename;\n                const contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n\n                // Pass on an updated rootpath if path of imported file is relative and file\n                // is in a (sub|sup) directory\n                //\n                // Examples:\n                // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/module/nav/'\n                // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/../'\n                newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n                if (newFileInfo.rewriteUrls) {\n                    newFileInfo.rootpath = fileManager.join(\n                        (importManager.context.rootpath || ''),\n                        fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n                    if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                        newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                    }\n                }\n                newFileInfo.filename = resolvedFilename;\n\n                const newEnv = new contexts.Parse(importManager.context);\n\n                newEnv.processImports = false;\n                importManager.contents[resolvedFilename] = contents;\n\n                if (currentFileInfo.reference || importOptions.reference) {\n                    newFileInfo.reference = true;\n                }\n\n                if (importOptions.isPlugin) {\n                    plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n                    if (plugin instanceof LessError) {\n                        fileParsedFunc(plugin, null, resolvedFilename);\n                    }\n                    else {\n                        fileParsedFunc(null, plugin, resolvedFilename);\n                    }\n                } else if (importOptions.inline) {\n                    fileParsedFunc(null, contents, resolvedFilename);\n                } else {\n\n                    // import (multiple) parse trees apparently get altered and can't be cached.\n                    // TODO: investigate why this is\n                    if (importManager.files[resolvedFilename]\n                        && !importManager.files[resolvedFilename].options.multiple\n                        && !importOptions.multiple) {\n\n                        fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n                    }\n                    else {\n                        new Parser(newEnv, importManager, newFileInfo).parse(contents, (e, root) => {\n                            fileParsedFunc(e, root, resolvedFilename);\n                        });\n                    }\n                }\n            };\n            let promise;\n            const context = utils.clone(this.context);\n\n            if (tryAppendExtension) {\n                context.ext = importOptions.isPlugin ? '.js' : '.less';\n            }\n\n            if (importOptions.isPlugin) {\n                context.mime = 'application/javascript';\n                promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n            }\n            else {\n                promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment,\n                    (err, loadedFile) => {\n                        if (err) {\n                            fileParsedFunc(err);\n                        } else {\n                            loadFileCallback(loadedFile);\n                        }\n                    });\n            }\n            if (promise) {\n                promise.then(loadFileCallback, fileParsedFunc);\n            }\n        }\n    }\n\n    return ImportManager;\n};\n","let PromiseConstructor;\nimport * as utils from './utils';\n\nexport default (environment, ParseTree, ImportManager) => {\n    const render = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise((resolve, reject) => {\n                render.call(self, input, options, (err, output) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            this.parse(input, options, (err, root, imports, options) => {\n                if (err) { return callback(err); }\n\n                let result;\n                try {\n                    const parseTree = new ParseTree(root, imports);\n                    result = parseTree.toCSS(options);\n                }\n                catch (err) { return callback(err); }\n\n                callback(null, result);\n            });\n        }\n    };\n\n    return render;\n};\n","let PromiseConstructor;\nimport contexts from './contexts';\nimport Parser from './parser/parser';\nimport PluginManager from './plugin-manager';\nimport LessError from './less-error';\nimport * as utils from './utils';\n\nexport default (environment, ParseTree, ImportManager) => {\n    const parse = function (input, options, callback) {\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise((resolve, reject) => {\n                parse.call(self, input, options, (err, output) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            let context;\n            let rootFileInfo;\n            const pluginManager = new PluginManager(this, !options.reUsePluginManager);\n\n            options.pluginManager = pluginManager;\n\n            context = new contexts.Parse(options);\n\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                const filename = options.filename || 'input';\n                const entryPath = filename.replace(/[^\\/\\\\]*$/, '');\n                rootFileInfo = {\n                    filename,\n                    rewriteUrls: context.rewriteUrls,\n                    rootpath: context.rootpath || '',\n                    currentDirectory: entryPath,\n                    entryPath,\n                    rootFilename: filename\n                };\n                // add in a missing trailing slash\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n                    rootFileInfo.rootpath += '/';\n                }\n            }\n\n            const imports = new ImportManager(this, context, rootFileInfo);\n            this.importManager = imports;\n\n            // TODO: allow the plugins to be just a list of paths or names\n            // Do an async plugin queue like lessc\n\n            if (options.plugins) {\n                options.plugins.forEach(plugin => {\n                    let evalResult;\n                    let contents;\n                    if (plugin.fileContent) {\n                        contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n                        evalResult = pluginManager.Loader.evalPlugin(contents, context, imports, plugin.options, plugin.filename);\n                        if (evalResult instanceof LessError) {\n                            return callback(evalResult);\n                        }\n                    }\n                    else {\n                        pluginManager.addPlugin(plugin);\n                    }\n                });\n            }\n\n            new Parser(context, imports, rootFileInfo)\n                .parse(input, (e, root) => {\n                    if (e) { return callback(e); }\n                    callback(null, root, imports, options);\n                }, options);\n        }\n    };\n    return parse;\n};\n","/* global window, XMLHttpRequest */\n\nimport AbstractFileManager from '../less/environment/abstract-file-manager.js';\n\nexport default (options, logger) => {\n\n    let fileCache = {};\n\n    // TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\n    const FileManager = () => {\n    };\n\n    FileManager.prototype = new AbstractFileManager();\n\n    FileManager.prototype.alwaysMakePathsAbsolute = function alwaysMakePathsAbsolute() {\n        return true;\n    };\n    FileManager.prototype.join = function join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return this.extractUrlParts(laterPath, basePath).path;\n    };\n    FileManager.prototype.doXHR = function doXHR(url, type, callback, errback) {\n\n        const xhr = new XMLHttpRequest();\n        const async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n            xhr.overrideMimeType('text/css');\n        }\n        logger.debug(`XHR: Getting '${url}'`);\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                callback(xhr.responseText,\n                    xhr.getResponseHeader('Last-Modified'));\n            } else if (typeof errback === 'function') {\n                errback(xhr.status, url);\n            }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                callback(xhr.responseText);\n            } else {\n                errback(xhr.status, url);\n            }\n        } else if (async) {\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == 4) {\n                    handleResponse(xhr, callback, errback);\n                }\n            };\n        } else {\n            handleResponse(xhr, callback, errback);\n        }\n    };\n    FileManager.prototype.supports = (filename, currentDirectory, options, environment) => true;\n\n    FileManager.prototype.clearFileCache = () => {\n        fileCache = {};\n    };\n\n    FileManager.prototype.loadFile = function loadFile(filename, currentDirectory, options, environment) {\n        // TODO: Add prefix support like less-node?\n        // What about multiple paths?\n\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n            filename = currentDirectory + filename;\n        }\n\n        filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n\n        options = options || {};\n\n        // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n        const hrefParts = this.extractUrlParts(filename, window.location.href);\n        const href      = hrefParts.url;\n        const self      = this;\n        \n        return new Promise((resolve, reject) => {\n            if (options.useFileCache && fileCache[href]) {\n                try {\n                    const lessText = fileCache[href];\n                    return resolve({ contents: lessText, filename: href, webInfo: { lastModified: new Date() }});\n                } catch (e) {\n                    return reject({ filename: href, message: `Error loading file ${href} error was ${e.message}` });\n                }\n            }\n\n            self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n                // per file cache\n                fileCache[href] = data;\n\n                // Use remote copy (re-parse)\n                resolve({ contents: data, filename: href, webInfo: { lastModified }});\n            }, function doXHRError(status, url) {\n                reject({ type: 'File', message: `'${url}' wasn't found (${status})`, href });\n            });\n        });\n    };\n\n    return FileManager;\n};\n","// TODO: Add tests for browser @plugin\n/* global window */\n\nimport AbstractPluginLoader from '../less/environment/abstract-plugin-loader.js';\n\n/**\n * Browser Plugin Loader\n */\nclass PluginLoader extends AbstractPluginLoader {\n    constructor(less) {\n        this.less = less;\n        // Should we shim this.require for browser? Probably not?\n    }\n\n    loadPlugin(filename, basePath, context, environment, fileManager) {\n        return new Promise((fulfill, reject) => {\n            fileManager.loadFile(filename, basePath, context, environment)\n                .then(fulfill).catch(reject);\n        });\n    }\n}\n\nexport default PluginLoader;\n\n","import * as utils from './utils';\nimport browser from './browser';\n\nexport default (window, less, options) => {\n\n    function errorHTML(e, rootHref) {\n        const id = `less-error-message:${utils.extractId(rootHref || '')}`;\n        const template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n        const elem = window.document.createElement('div');\n        let timer;\n        let content;\n        const errors = [];\n        const filename = e.filename || rootHref;\n        const filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\n\n        elem.id        = id;\n        elem.className = 'less-error-message';\n\n        content = `<h3>${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'}</h3><p>in <a href=\"${filename}\">${filenameNoPath}</a> `;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += `on line ${e.line}, column ${e.column + 1}:</p><ul>${errors.join('')}</ul>`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `<br/>Stack Trace</br />${e.stack.split('\\n').slice(1).join('<br/>')}`;\n        }\n        elem.innerHTML = content;\n\n        // CSS for error messages\n        browser.createCSS(window.document, [\n            '.less-error-message ul, .less-error-message li {',\n            'list-style-type: none;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message label {',\n            'font-size: 12px;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'color: #cc7777;',\n            '}',\n            '.less-error-message pre {',\n            'color: #dd6666;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            'display: inline-block;',\n            '}',\n            '.less-error-message pre.line {',\n            'color: #ff0000;',\n            '}',\n            '.less-error-message h3 {',\n            'font-size: 20px;',\n            'font-weight: bold;',\n            'padding: 15px 0 5px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message a {',\n            'color: #10a',\n            '}',\n            '.less-error-message .error {',\n            'color: red;',\n            'font-weight: bold;',\n            'padding-bottom: 2px;',\n            'border-bottom: 1px dashed red;',\n            '}'\n        ].join('\\n'), { title: 'error-message' });\n\n        elem.style.cssText = [\n            'font-family: Arial, sans-serif',\n            'border: 1px solid #e00',\n            'background-color: #eee',\n            'border-radius: 5px',\n            '-webkit-border-radius: 5px',\n            '-moz-border-radius: 5px',\n            'color: #e00',\n            'padding: 15px',\n            'margin-bottom: 15px'\n        ].join(';');\n\n        if (options.env === 'development') {\n            timer = setInterval(() => {\n                const document = window.document;\n                const body = document.body;\n                if (body) {\n                    if (document.getElementById(id)) {\n                        body.replaceChild(elem, document.getElementById(id));\n                    } else {\n                        body.insertBefore(elem, body.firstChild);\n                    }\n                    clearInterval(timer);\n                }\n            }, 10);\n        }\n    }\n\n    function removeErrorHTML(path) {\n        const node = window.document.getElementById(`less-error-message:${utils.extractId(path)}`);\n        if (node) {\n            node.parentNode.removeChild(node);\n        }\n    }\n\n    function removeErrorConsole(path) {\n        // no action\n    }\n\n    function removeError(path) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            removeErrorHTML(path);\n        } else if (options.errorReporting === 'console') {\n            removeErrorConsole(path);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('remove', path);\n        }\n    }\n\n    function errorConsole(e, rootHref) {\n        const template = '{line} {content}';\n        const filename = e.filename || rootHref;\n        const errors = [];\n        let content = `${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'} in ${filename}`;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += ` on line ${e.line}, column ${e.column + 1}:\\n${errors.join('\\n')}`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `\\nStack Trace\\n${e.stack}`;\n        }\n        less.logger.error(content);\n    }\n\n    function error(e, rootHref) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            errorHTML(e, rootHref);\n        } else if (options.errorReporting === 'console') {\n            errorConsole(e, rootHref);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('add', e, rootHref);\n        }\n    }\n\n    return {\n        add: error,\n        remove: removeError\n    };\n};\n","/**\n * Kicks off less and compiles any stylesheets\n * used in the browser distributed version of less\n * to kick-start less using the browser api\n */\n/* global window, document */\n\nimport defaultOptions from '../less/default-options';\nimport addDefaultOptions from './add-default-options';\nimport root from './index';\n\nconst options = defaultOptions();\n\nif (window.less) {\n    for (const key in window.less) {\n        if (window.less.hasOwnProperty(key)) {\n            options[key] = window.less[key];\n        }\n    }\n}\naddDefaultOptions(window, options);\n\noptions.plugins = options.plugins || [];\n\nif (window.LESS_PLUGINS) {\n    options.plugins = options.plugins.concat(window.LESS_PLUGINS);\n}\n\nconst less = root(window, options);\nexport default less;\n\nwindow.less = less;\n\nlet css;\nlet head;\nlet style;\n\n// Always restore page visibility\nfunction resolveOrReject(data) {\n    if (data.filename) {\n        console.warn(data);\n    }\n    if (!options.async) {\n        head.removeChild(style);\n    }\n}\n\nif (options.onReady) {\n    if (/!watch/.test(window.location.hash)) {\n        less.watch();\n    }\n    // Simulate synchronous stylesheet loading by hiding page rendering\n    if (!options.async) {\n        css = 'body { display: none !important }';\n        head = document.head || document.getElementsByTagName('head')[0];\n        style = document.createElement('style');\n\n        style.type = 'text/css';\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n\n        head.appendChild(style);\n    }\n    less.registerStylesheetsImmediately();\n    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n}\n","// Export a new default each time\nexport default () => ({\n /* Inline Javascript - @plugin still allowed */\n javascriptEnabled: false,\n\n /* Outputs a makefile import dependency list to stdout. */\n depends: false,\n\n /* (DEPRECATED) Compress using less built-in compression. \n  * This does an okay job but does not utilise all the tricks of \n  * dedicated css compression. */\n compress: false,\n\n /* Runs the less parser and just reports errors without any output. */\n lint: false,\n\n /* Sets available include paths.\n  * If the file in an @import rule does not exist at that exact location, \n  * less will look for it at the location(s) passed to this option. \n  * You might use this for instance to specify a path to a library which \n  * you want to be referenced simply and relatively in the less files. */\n paths: [],\n\n /* color output in the terminal */\n color: true,\n\n /* The strictImports controls whether the compiler will allow an @import inside of either \n  * @media blocks or (a later addition) other selector blocks.\n  * See: https://github.com/less/less.js/issues/656 */\n strictImports: false,\n\n /* Allow Imports from Insecure HTTPS Hosts */\n insecure: false,\n\n /* Allows you to add a path to every generated import and url in your css. \n  * This does not affect less import statements that are processed, just ones \n  * that are left in the output css. */\n rootpath: '',\n\n /* By default URLs are kept as-is, so if you import a file in a sub-directory \n  * that references an image, exactly the same URL will be output in the css. \n  * This option allows you to re-write URL's in imported files so that the \n  * URL is always relative to the base imported file */\n rewriteUrls: false,\n\n /* Compatibility with IE8. Used for limiting data-uri length */\n // true until 3.0\n ieCompat: false,\n\n /* How to process math \n  *   0 always           - eagerly try to solve all operations\n  *   1 parens-division  - require parens for division \"/\"\n  *   2 parens | strict  - require parens for all operations\n  *   3 strict-legacy    - legacy strict behavior (super-strict)\n  */\n math: 0,\n\n /* Without this option, less attempts to guess at the output unit when it does maths. */\n strictUnits: false,\n\n /* Effectively the declaration is put at the top of your base Less file, \n  * meaning it can be used but it also can be overridden if this variable \n  * is defined in the file. */\n globalVars: null,\n\n /* As opposed to the global variable option, this puts the declaration at the\n  * end of your base file, meaning it will override anything defined in your Less file. */\n modifyVars: null,\n\n /* This option allows you to specify a argument to go on to every URL.  */\n urlArgs: ''\n});","import {addDataAttr} from './utils';\nimport browser from './browser';\n\nexport default (window, options) => {\n\n    // use options from the current script tag data attribues\n    addDataAttr(options, browser.currentScript(window));\n\n    if (options.isFileProtocol === undefined) {\n        options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n    }\n\n    // Load styles asynchronously (default: false)\n    //\n    // This is set to `false` by default, so that the body\n    // doesn't start loading before the stylesheets are parsed.\n    // Setting this to `true` can result in flickering.\n    //\n    options.async = options.async || false;\n    options.fileAsync = options.fileAsync || false;\n\n    // Interval between watch polls\n    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n\n    options.env = options.env || (window.location.hostname == '127.0.0.1' ||\n        window.location.hostname == '0.0.0.0'   ||\n        window.location.hostname == 'localhost' ||\n        (window.location.port &&\n            window.location.port.length > 0)      ||\n        options.isFileProtocol                   ? 'development'\n        : 'production');\n\n    const dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n    if (dumpLineNumbers) {\n        options.dumpLineNumbers = dumpLineNumbers[1];\n    }\n\n    if (options.useFileCache === undefined) {\n        options.useFileCache = true;\n    }\n\n    if (options.onReady === undefined) {\n        options.onReady = true;\n    }\n\n    if (options.relativeUrls) {\n        options.rewriteUrls = 'all';\n    }\n};\n","//\n// index.js\n// Should expose the additional browser functions on to the less object\n//\nimport {addDataAttr} from './utils';\nimport lessRoot from '../less';\nimport browser from './browser';\nimport FM from './file-manager';\nimport PluginLoader from './plugin-loader';\nimport LogListener from './log-listener';\nimport ErrorReporting from './error-reporting';\nimport Cache from './cache';\nimport ImageSize from './image-size';\n\nexport default (window, options) => {\n    const document = window.document;\n    const less = lessRoot();\n\n    less.options = options;\n    const environment = less.environment;\n    const FileManager = FM(options, less.logger);\n    const fileManager = new FileManager();\n    environment.addFileManager(fileManager);\n    less.FileManager = FileManager;\n    less.PluginLoader = PluginLoader;\n\n    LogListener(less, options);\n    const errors = ErrorReporting(window, less, options);\n    const cache = less.cache = options.cache || Cache(window, options, less.logger);\n    ImageSize(less.environment);\n\n    // Setup user functions - Deprecate?\n    if (options.functions) {\n        less.functions.functionRegistry.addMultiple(options.functions);\n    }\n\n    const typePattern = /^text\\/(x-)?less$/;\n\n    function clone(obj) {\n        const cloned = {};\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                cloned[prop] = obj[prop];\n            }\n        }\n        return cloned;\n    }\n\n    // only really needed for phantom\n    function bind(func, thisArg) {\n        const curryArgs = Array.prototype.slice.call(arguments, 2);\n        return function() {\n            const args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n            return func.apply(thisArg, args);\n        };\n    }\n\n    function loadStyles(modifyVars) {\n        const styles = document.getElementsByTagName('style');\n        let style;\n\n        for (let i = 0; i < styles.length; i++) {\n            style = styles[i];\n            if (style.type.match(typePattern)) {\n                const instanceOptions = clone(options);\n                instanceOptions.modifyVars = modifyVars;\n                const lessText = style.innerHTML || '';\n                instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n\n                /* jshint loopfunc:true */\n                // use closure to store current style\n                less.render(lessText, instanceOptions,\n                        bind((style, e, result) => {\n                            if (e) {\n                                errors.add(e, 'inline');\n                            } else {\n                                style.type = 'text/css';\n                                if (style.styleSheet) {\n                                    style.styleSheet.cssText = result.css;\n                                } else {\n                                    style.innerHTML = result.css;\n                                }\n                            }\n                        }, null, style));\n            }\n        }\n    }\n\n    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n\n        const instanceOptions = clone(options);\n        addDataAttr(instanceOptions, sheet);\n        instanceOptions.mime = sheet.type;\n\n        if (modifyVars) {\n            instanceOptions.modifyVars = modifyVars;\n        }\n\n        function loadInitialFileCallback(loadedFile) {\n            const data = loadedFile.contents;\n            const path = loadedFile.filename;\n            const webInfo = loadedFile.webInfo;\n\n            const newFileInfo = {\n                currentDirectory: fileManager.getPath(path),\n                filename: path,\n                rootFilename: path,\n                rewriteUrls: instanceOptions.rewriteUrls\n            };\n\n            newFileInfo.entryPath = newFileInfo.currentDirectory;\n            newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n\n            if (webInfo) {\n                webInfo.remaining = remaining;\n\n                const css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n                if (!reload && css) {\n                    webInfo.local = true;\n                    callback(null, css, data, sheet, webInfo, path);\n                    return;\n                }\n\n            }\n\n            // TODO add tests around how this behaves when reloading\n            errors.remove(path);\n\n            instanceOptions.rootFileInfo = newFileInfo;\n            less.render(data, instanceOptions, (e, result) => {\n                if (e) {\n                    e.href = path;\n                    callback(e);\n                } else {\n                    cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n                    callback(null, result.css, data, sheet, webInfo, path);\n                }\n            });\n        }\n\n        fileManager.loadFile(sheet.href, null, instanceOptions, environment)\n            .then(loadedFile => {\n                loadInitialFileCallback(loadedFile);\n            }).catch(err => {\n                console.log(err);\n                callback(err);\n            });\n\n    }\n\n    function loadStyleSheets(callback, reload, modifyVars) {\n        for (let i = 0; i < less.sheets.length; i++) {\n            loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\n        }\n    }\n\n    function initRunningMode() {\n        if (less.env === 'development') {\n            less.watchTimer = setInterval(() => {\n                if (less.watchMode) {\n                    fileManager.clearFileCache();\n                    loadStyleSheets((e, css, _, sheet, webInfo) => {\n                        if (e) {\n                            errors.add(e, e.href || sheet.href);\n                        } else if (css) {\n                            browser.createCSS(window.document, css, sheet);\n                        }\n                    });\n                }\n            }, options.poll);\n        }\n    }\n\n    //\n    // Watch mode\n    //\n    less.watch   = function () {\n        if (!less.watchMode ) {\n            less.env = 'development';\n            initRunningMode();\n        }\n        this.watchMode = true;\n        return true;\n    };\n\n    less.unwatch = function () {clearInterval(less.watchTimer); this.watchMode = false; return false; };\n\n    //\n    // Synchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\".\n    //\n    less.registerStylesheetsImmediately = () => {\n        const links = document.getElementsByTagName('link');\n        less.sheets = [];\n\n        for (let i = 0; i < links.length; i++) {\n            if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\n                (links[i].type.match(typePattern)))) {\n                less.sheets.push(links[i]);\n            }\n        }\n    };\n\n    //\n    // Asynchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\", returning a Promise.\n    //\n    less.registerStylesheets = () => new Promise((resolve, reject) => {\n        less.registerStylesheetsImmediately();\n        resolve();\n    });\n\n    //\n    // With this function, it's possible to alter variables and re-render\n    // CSS without reloading less-files\n    //\n    less.modifyVars = record => less.refresh(true, record, false);\n\n    less.refresh = (reload, modifyVars, clearFileCache) => {\n        if ((reload || clearFileCache) && clearFileCache !== false) {\n            fileManager.clearFileCache();\n        }\n        return new Promise((resolve, reject) => {\n            let startTime;\n            let endTime;\n            let totalMilliseconds;\n            let remainingSheets;\n            startTime = endTime = new Date();\n\n            // Set counter for remaining unprocessed sheets\n            remainingSheets = less.sheets.length;\n\n            if (remainingSheets === 0) {\n\n                endTime = new Date();\n                totalMilliseconds = endTime - startTime;\n                less.logger.info('Less has finished and no sheets were loaded.');\n                resolve({\n                    startTime,\n                    endTime,\n                    totalMilliseconds,\n                    sheets: less.sheets.length\n                });\n\n            } else {\n                // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n                loadStyleSheets((e, css, _, sheet, webInfo) => {\n                    if (e) {\n                        errors.add(e, e.href || sheet.href);\n                        reject(e);\n                        return;\n                    }\n                    if (webInfo.local) {\n                        less.logger.info(`Loading ${sheet.href} from cache.`);\n                    } else {\n                        less.logger.info(`Rendered ${sheet.href} successfully.`);\n                    }\n                    browser.createCSS(window.document, css, sheet);\n                    less.logger.info(`CSS for ${sheet.href} generated in ${new Date() - endTime}ms`);\n\n                    // Count completed sheet\n                    remainingSheets--;\n\n                    // Check if the last remaining sheet was processed and then call the promise\n                    if (remainingSheets === 0) {\n                        totalMilliseconds = new Date() - startTime;\n                        less.logger.info(`Less has finished. CSS generated in ${totalMilliseconds}ms`);\n                        resolve({\n                            startTime,\n                            endTime,\n                            totalMilliseconds,\n                            sheets: less.sheets.length\n                        });\n                    }\n                    endTime = new Date();\n                }, reload, modifyVars);\n            }\n\n            loadStyles(modifyVars);\n        });\n    };\n\n    less.refreshStyles = loadStyles;\n    return less;\n};\n","export default (less, options) => {\n    const logLevel_debug = 4;\n    const logLevel_info = 3;\n    const logLevel_warn = 2;\n    const logLevel_error = 1;\n\n    // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ?  logLevel_info : logLevel_error);\n\n    if (!options.loggers) {\n        options.loggers = [{\n            debug: function(msg) {\n                if (options.logLevel >= logLevel_debug) {\n                    console.log(msg);\n                }\n            },\n            info: function(msg) {\n                if (options.logLevel >= logLevel_info) {\n                    console.log(msg);\n                }\n            },\n            warn: function(msg) {\n                if (options.logLevel >= logLevel_warn) {\n                    console.warn(msg);\n                }\n            },\n            error: function(msg) {\n                if (options.logLevel >= logLevel_error) {\n                    console.error(msg);\n                }\n            }\n        }];\n    }\n    for (let i = 0; i < options.loggers.length; i++) {\n        less.logger.addListener(options.loggers[i]);\n    }\n};\n","// Cache system is a bit outdated and could do with work\n\nexport default (window, options, logger) => {\n    let cache = null;\n    if (options.env !== 'development') {\n        try {\n            cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\n        } catch (_) {}\n    }\n    return {\n        setCSS: function(path, lastModified, modifyVars, styles) {\n            if (cache) {\n                logger.info(`saving ${path} to cache.`);\n                try {\n                    cache.setItem(path, styles);\n                    cache.setItem(`${path}:timestamp`, lastModified);\n                    if (modifyVars) {\n                        cache.setItem(`${path}:vars`, JSON.stringify(modifyVars));\n                    }\n                } catch (e) {\n                    // TODO - could do with adding more robust error handling\n                    logger.error(`failed to save \"${path}\" to local storage for caching.`);\n                }\n            }\n        },\n        getCSS: function(path, webInfo, modifyVars) {\n            const css       = cache && cache.getItem(path);\n            const timestamp = cache && cache.getItem(`${path}:timestamp`);\n            let vars      = cache && cache.getItem(`${path}:vars`);\n\n            modifyVars = modifyVars || {};\n            vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\n\n            if (timestamp && webInfo.lastModified &&\n                (new Date(webInfo.lastModified).valueOf() ===\n                    new Date(timestamp).valueOf()) &&\n                JSON.stringify(modifyVars) === vars) {\n                // Use local copy\n                return css;\n            }\n        }\n    };\n};\n","\nimport functionRegistry from './../less/functions/function-registry';\n\nexport default () => {\n    function imageSize() {\n        throw {\n            type: 'Runtime',\n            message: 'Image size functions are not supported in browser version of less'\n        };\n    }\n\n    const imageFunctions = {\n        'image-size': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-width': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-height': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        }\n    };\n\n    functionRegistry.addMultiple(imageFunctions);\n};\n"],"names":["extractId","href","replace","addDataAttr","options","tag","opt","dataset","hasOwnProperty","JSON","parse","_","createCSS","document","styles","sheet","id","title","utils","oldStyleNode","getElementById","keepOldStyleNode","styleNode","createElement","setAttribute","media","styleSheet","appendChild","createTextNode","childNodes","length","firstChild","nodeValue","head","getElementsByTagName","nextEl","nextSibling","parentNode","insertBefore","removeChild","cssText","e","Error","currentScript","window","scripts","duration","angle","Math","PI","colors","unitConversions","Node","parent","visibilityBlocks","undefined","nodeVisible","rootNode","parsed","self","this","Object","defineProperty","get","fileInfo","getIndex","nodes","set","node","Array","isArray","forEach","_index","_fileInfo","context","strs","genCSS","add","chunk","index","push","isEmpty","join","output","value","visitor","visit","op","a","b","precision","numPrecision","Number","toFixed","info","compare","type","i","numericCompare","Color","rgb","originalForm","match","map","c","parseInt","alpha","split","r","g","pow","toCSS","doNotCompress","color","colorFunction","compress","args","fround","indexOf","clamp","round","concat","toHSL","h","s","l","toRGB","splitcolor","other","_operate","toHex","max","min","d","v","x","toString","prototype","fromKeyword","keyword","key","toLowerCase","slice","Paren","eval","Combinator","emptyOrWhitespace","trim","spaceOrEmpty","_noSpaceCombinators","Element","combinator","isVariable","currentFileInfo","visibilityInfo","copyVisibilityInfo","setParent","_typeof","firstSelector","charAt","ALWAYS","PARENS_DIVISION","PARENS","STRICT_LEGACY","RewriteUrls","OFF","LOCAL","ALL","clone","_instanceof","obj","nativeMap","nativeSet","nativePromise","Map","Set","Promise","circular","depth","includeNonEnumerable","allParents","allChildren","useBuffer","Buffer","Infinity","_clone","child","proto","resolve","reject","then","err","__isArray","__isRegExp","RegExp","source","__getRegExpFlags","lastIndex","__isDate","Date","getTime","isBuffer","allocUnsafe","copy","create","getPrototypeOf","keyChild","valueChild","entryChild","attrs","getOwnPropertyDescriptor","getOwnPropertySymbols","symbols","symbol","descriptor","enumerable","allPropertyNames","getOwnPropertyNames","propertyName","__objToStr","o","call","re","flags","global","ignoreCase","multiline","clonePrototype","module","exports","getLocation","inputStream","n","line","column","copyArray","arr","cloned","prop","copyOptions","obj1","obj2","_defaults","opts","defaults","strictMath","math","Constants","relativeUrls","rewriteUrls","flattenArray","result","newObj","CloneHelper","assign","LessError","fileContentMap","currentFilename","filename","message","stack","input","contents","loc","col","callLine","lines","found","callExtract","extract","F","constructor","error","stylize","str","errorTxt","substr","Selector","elements","extendList","condition","evaldCondition","getElements","mixinElements_","visitArray","newSelector","mediaEmpty","els","parseNode","imports","sels","olen","len","mixinElements","shift","extend","createDerived","Value","Keyword","True","False","Anonymous","mapLines","rulesetLike","allowRoot","Boolean","MATH","Declaration","name","important","merge","inline","variable","lastRule","prevMath","evaldValue","mathBypass","evalName","importantScope","importantResult","pop","debugInfo","ctx","lineSeparator","dumpLineNumbers","asComment","asMediaQuery","lineNumber","fileName","filenameWithProtocol","test","Comment","isLineComment","getDebugInfo","isCompressed","contexts","copyFromOriginal","original","destination","propertiesToCopy","parseCopyProperties","Parse","paths","evalCopyProperties","isPathRelative","path","isPathLocalRelative","Eval","frames","enterCalc","calcStack","inCalc","exitCalc","inParenthesis","parensStack","outOfParenthesis","mathOn","isMathOn","pathRequiresRewrite","rewritePath","rootpath","newPath","normalizePath","segment","segments","reverse","makeRegistry","base","_data","func","addMultiple","functions","keys","_this","getLocalFunctions","inherit","defaultFunc","value_","error_","reset","bind","Ruleset","selectors","rules","strictImports","_lookups","_variables","_properties","selCnt","selector","hasVariable","hasOnePassingSelector","j","toParseSelectors","rule","subRule","ruleset","originalRuleset","root","firstRoot","allowImports","functionRegistry","globalFunctionRegistry","ctxFrames","unshift","ctxSelectors","evalImports","rsRules","evalFirst","mediaBlockCount","mediaBlocks","filter","splice","resetCache","isJustParentSelector","bubbleSelectors","importRules","makeImportant","lastSelector","_rulesets","reduce","hash","variables","vars","decl","parseValue","properties","toParse","transformDeclaration","filtRules","isRuleset","foundMixins","rulesets","find","apply","ruleNodes","tabLevel","sep","tabRuleStr","tabSetStr","charsetNodeIndex","importNodeIndex","isCharset","pathSubCnt","pathCnt","currentLastRule","isRulesetLike","isVisible","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","createSelector","containedElement","element","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","parentEl","restOfPath","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","deriveSelector","deriveFrom","newPaths","replaceParentSelector","inSelector","k","currentElements","newSelectors","selectorsMultiplied","el","maybeSelector","hadParentSelector","nestedSelector","replaced","nestedPaths","replacedNewSelectors","concatenated","AtRule","isRooted","createEmptySelectors","outputRuleset","mediaPathBackup","mediaBlocksBackup","mediaPath","ruleCnt","DetachedRuleset","Unit","numerator","denominator","backupUnit","sort","strictUnits","returnStr","is","unitString","toUpperCase","callback","group","mapUnit","groupName","atomicUnit","counter","count","Dimension","unit","parseFloat","isNaN","isSingular","strValue","String","isLength","convertTo","usedUnits","cancel","unify","conversions","targetUnit","applyUnit","derivedConversions","Operation","operands","isSpaced","toColor","operate","Expression","noSpacing","returnValue","parens","parensInOp","doubleParen","functionCaller","item","subNodes","Call","calc","currentMathContext","funcCaller","FunctionCaller","isValid","columnNumber","Variable","evaluating","frame","fun","Property","property","mergeRules","pluginManager","less","visitors","ToCSSVisitor","_mergeRules","vArr","Attribute","Quoted","content","escaped","quote","variableRegex","propRegex","that","iterativeReplace","regexp","replacementFnc","evaluatedValue","URL","val","isEvald","urlArgs","Media","features","evalTop","evalNested","multiMedia","permute","fragment","rest","Import","pathValue","getPath","css","isPlugin","reference","containsVariables","doEval","blocksVisibility","addVisibilityBlock","registry","skip","importedFilename","newImport","evalPath","JsEvalNode","evaluateJavaScript","expression","evalContext","javascriptEnabled","jsify","Function","toJS","JavaScript","string","Assignment","Condition","negate","lvalue","rvalue","UnicodeDescriptor","Negative","Extend","option","object_id","next_id","parent_ids","allowBefore","allowAfter","selectorElements","selfElements","selfSelectors","VariableCall","detachedRuleset","callEval","NamespaceValue","ruleCall","lookups","lastDeclaration","substring","Definition","params","variadic","arity","optionalParameters","required","p","mixinEnv","evaldArguments","varargs","arg","isNamedFound","argIndex","argsLength","prependRule","_arguments","mixinFrames","evalParams","allArgsCnt","requiredArgsCnt","MixinCall","arguments","mixins","mixin","mixinPath","argValue","m","f","isRecursive","isOneFound","candidate","defaultResult","noArgumentsFilter","candidates","conditionResult","defFalseEitherCase","defNone","defTrue","defFalse","calcDefGroup","namespace","matchCondition","expand","matchArgs","MixinDefinition","format","newRules","evalCall","_setVisibilityToReplacement","replacement","msg","_fireEvent","warn","debug","addListener","listener","_listeners","removeListener","logFunction","environment","externalEnvironment","fileManagers","requiredFunctions","propName","environmentFunc","currentDirectory","isSync","logger","getFileManagers","fileManager","abstractFileManager","lastIndexOf","tryAppendExtension","ext","tryAppendLessExtension","supportsSync","alwaysMakePathsAbsolute","isPathAbsolute","basePath","laterPath","pathDiff","url","baseUrl","urlDirectories","baseUrlDirectories","urlParts","extractUrlParts","baseUrlParts","diff","hostPart","directories","urlPartsRegex","returner","rawDirectories","rawPath","fileUrl","AbstractPluginLoader","require","pluginOptions","pluginObj","localModule","shortname","FileManager","trySetOptions","use","loader","tree","validatePlugin","minVersion","compareVersion","addPlugin","plugin","setOptions","version","versionToString","aVersion","bVersion","versionString","plugins","printUsage","_visitArgs","visitDeeper","_hasIndexed","_noop","Visitor","implementation","_implementation","_visitInCache","_visitOutCache","indexNodeTypes","ticker","typeIndex","nodeTypeIndex","fnName","impl","funcOut","visitArgs","newNode","isReplacing","accept","nonReplacing","cnt","out","evald","flatten","nestedCnt","nestedItem","ImportSequencer","onSequencerEmpty","variableImports","_onSequencerEmpty","_currentDepth","importSequencer","importItem","isReady","tryRun","variableImport","ImportVisitor","importer","finish","_visitor","_importer","_finish","importCount","onceFileDetectionMap","recursionDetector","_sequencer","run","isFinished","visitImport","importNode","inlineCSS","importParent","isVariableImport","addVariableImport","processImportNode","evaldImportNode","evalForImport","multiple","importMultiple","onImported","sequencedOnImported","addImport","importedAtRoot","fullPath","importVisitor","isOptional","optional","duplicateImport","oldContext","visitDeclaration","declNode","visitDeclarationOut","visitAtRule","atRuleNode","visitAtRuleOut","visitMixinDefinition","mixinDefinitionNode","visitMixinDefinitionOut","visitRuleset","rulesetNode","visitRulesetOut","visitMedia","mediaNode","visitMediaOut","SetTreeVisibilityVisitor","visible","ensureVisibility","ensureInvisibility","ExtendFinderVisitor","allExtendsStack","allExtends","allSelectorsExtendList","extendOnEveryPath","selectorPath","selExtendList","allSelectorsExtend","foundExtends","findSelfSelectors","firstExtendOnThisSelectorPath","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","hasFoundMatches","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","targetExtend","newExtend","extendsToAdd","extendVisitor","findMatch","selfSelector","extendSelector","extendChainCount","selectorOne","selectorTwo","ruleNode","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","potentialMatch","needleElements","potentialMatches","matched","initialCombinator","isElementValuesEqual","finished","endPathIndex","endPathElementIndex","elementValue1","elementValue2","replacementSelector","matchIndex","firstElement","newElements","currentSelectorPathIndex","currentSelectorPathElementIndex","currentValue","derived","newAllExtends","JoinSelectorVisitor","getIsOutput","joinSelectors","CSSVisitorUtils","_context","bodyRules","isSilent","owner","thing","originalRules","containsSilentNonBlockedChild","compiledRulesBody","keepOnlyVisibleChilds","removeVisibilityBlock","hasVisibleSelector","mixinNode","visitExtend","extendNode","visitComment","commentNode","resolveVisibility","visitAtRuleWithBody","visitAtRuleWithoutBody","visitAnonymous","anonymousNode","nodeRules","hasFakeRuleset","getBodyRules","charset","comment","checkValidNodes","isRoot","_compileRulesetPaths","nodeRuleCnt","_removeDuplicateRules","isVisibleRuleset","ruleList","ruleCache","ruleCSS","groups","groupsArr","space","comma","MarkVisibleSelectorsVisitor","ExtendVisitor","furthest","furthestPossibleErrorMessage","chunks","current","currentPos","saveStack","parserInput","CHARCODE_SPACE","CHARCODE_TAB","CHARCODE_LF","CHARCODE_CR","CHARCODE_FORWARD_SLASH","skipWhitespace","nextChar","oldi","oldj","curr","endIndex","mem","inp","charCodeAt","autoCommentAbsorb","nextNewLine","text","commentStore","nextStarSlash","save","restore","possibleErrorMessage","state","forget","isWhitespace","offset","pos","code","$re","tok","exec","$char","$str","tokLength","$quoted","startChar","currentPosition","$parseUntil","testChar","returnVal","inComment","blockDepth","blockStack","parseGroups","startPos","lastPos","loop","char","expected","peek","peekChar","currentChar","prevChar","getInput","peekNotNumeric","start","chunkInput","failFunction","fail","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunkerCurrentIndex","currentChunkStartIndex","cc","cc2","level","parenLevel","emitFrom","emitChunk","force","fromCharCode","chunker","end","furthestReachedEnd","furthestChar","Parser","parsers","getParserInput","expect","expectChar","parseList","currentIndex","returnNodes","parser","additionalData","globalVars","modifyVars","ignored","preText","serializeVars","preProcessors","getPreProcessors","process","banner","contentsIgnoredChars","primary","endInfo","processImports","extendRule","definition","declaration","variableCall","entities","atrule","foundSemiColon","mixinLookup","quoted","forceEscaped","isEscaped","customFuncCall","stop","ieAlpha","boolean","prevArgs","isSemiColonSeparated","argsComma","argsSemiColon","assignment","literal","dimension","unicodeDescriptor","entity","ch","variableCurly","curly","propertyCurly","colorKeyword","ud","javascript","js","escape","parsedName","inValue","ruleLookups","isRule","getLookup","hasParens","elem","elemIndex","isCall","expressionContainsNamed","nameLoop","expressions","hasSep","throwAwayComments","cond","argInfo","conditions","block","lookupValue","attribute","slashedCombinator","isLess","when","blockRuleset","hasDR","ruleProperty","permissiveValue","anonymousValue","untilTokens","done","testCurrentChar","dir","importOptions","mediaFeatures","optionName","importOption","mediaFeature","pluginArgs","nonVendorSpecificName","hasIdentifier","hasExpression","hasUnknown","hasBlock","sub","addition","multiplication","operation","operand","needsParens","logical","next","conditionAnd","negatedCondition","parenthesisCondition","atomicCondition","body","me","tryConditionFollowedByParenthesis","delim","simpleProperty","colorFunctions","trueValue","falseValue","hsla","origColor","hsl","toHSV","number","rgba","size","m1","m2","hue","hsv","hsva","vs","floor","perm","saturation","lightness","hsvhue","hsvsaturation","hsvvalue","red","green","blue","luma","luminance","saturate","amount","method","desaturate","lighten","darken","fadein","fadeout","fade","spin","mix","color1","color2","weight","w","w1","w2","greyscale","contrast","dark","light","threshold","t","argb","toARGB","tint","shade","colorBlend","mode","cb","cs","ar","cr","ab","as","colorBlendModeFunctions","multiply","screen","overlay","softlight","sqrt","hardlight","difference","abs","exclusion","average","negation","getItemsFromNode","_SELF","values","range","step","from","to","stepValue","list","each","rs","iterator","Quote","valueName","keyName","indexName","MathHelper","fn","mathFunctions","ceil","tan","sin","cos","atan","asin","acos","mathHelper","fraction","num","pm","minMax","isMin","currentUnified","referenceUnified","unitStatic","unitClone","order","convert","pi","mod","y","percentage","evaluated","encodeURI","pattern","token","encodeURIComponent","isa","Type","isunit","isruleset","iscolor","isnumber","isstring","iskeyword","isurl","ispixel","ispercentage","isem","colorBlending","fallback","functionThis","mimetypeNode","filePathNode","mimetype","filePath","entryPath","fragmentStart","rawBuffer","getFileManager","useBase64","mimeLookup","charsetLookup","fileSync","loadFileSync","buf","encodeBase64","uri","dataUri","direction","stops","gradientDirectionSvg","position","positionValue","gradientType","rectangleDimension","renderEnv","directionValue","throwArgumentDescriptor","types","evaldRoot","evalEnv","visitorIterator","preEvalVisitors","first","isPreEvalVisitor","isPreVisitor","PluginManager","postProcessors","installedPlugins","pluginCache","Loader","PluginLoader","install","preProcessor","priority","indexToInsertAt","postProcessor","manager","PluginManagerFactory","newFactory","SourceMapOutput","_css","_rootNode","_contentsMap","contentsMap","_contentsIgnoredCharsMap","contentsIgnoredCharsMap","sourceMapFilename","_sourceMapFilename","_outputFilename","outputFilename","sourceMapURL","sourceMapBasepath","_sourceMapBasepath","sourceMapRootpath","_sourceMapRootpath","_outputSourceFiles","outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","removeBasepath","sourceLines","columns","sourceColumns","inputSource","_sourceMapGenerator","addMapping","generated","normalizeFilename","file","sourceRoot","setSourceContent","sourceMapContent","stringify","toJSON","sourceMap","sourceMapOutput","SourceMapBuilder","sourceMapOutputFilename","sourceMapGenerator","sourceMapFileInline","sourceMapInputFilename","getCSSAppendage","sourceMapBuilder","ParseTree","transformTree","toCSSOptions","getPostProcessors","getExternalSourceMap","files","rootFilename","parseTree","ImportManager","rootFileInfo","mime","queue","importManager","pluginLoader","fileParsedFunc","importedEqualsRoot","newFileInfo","promise","loadFileCallback","loadedFile","resolvedFilename","newEnv","evalPlugin","loadPlugin","loadFile","render","Render","reUsePluginManager","evalResult","fileContent","environ","Environment","Functions","initial","data","AbstractFileManager","ctor","api","fileCache","doXHR","errback","xhr","XMLHttpRequest","async","isFileProtocol","fileAsync","handleResponse","status","responseText","getResponseHeader","overrideMimeType","open","setRequestHeader","send","onreadystatechange","readyState","supports","clearFileCache","location","useFileCache","lessText","webInfo","lastModified","fulfill","catch","rootHref","errorReporting","errors","errorline","classname","logLevel","errorConsole","timer","filenameNoPath","className","innerHTML","browser","style","env","setInterval","replaceChild","clearInterval","errorHTML","remove","removeErrorHTML","depends","lint","insecure","ieCompat","protocol","poll","hostname","port","onReady","addDefaultOptions","LESS_PLUGINS","lessRoot","FM","addFileManager","loggers","console","log","LogListener","ErrorReporting","cache","localStorage","setCSS","setItem","getCSS","getItem","timestamp","valueOf","Cache","imageSize","imageFunctions","ImageSize","typePattern","thisArg","curryArgs","loadStyles","instanceOptions","loadStyleSheet","reload","remaining","local","loadInitialFileCallback","loadStyleSheets","sheets","watch","watchMode","watchTimer","unwatch","registerStylesheetsImmediately","links","rel","registerStylesheets","record","refresh","startTime","endTime","totalMilliseconds","remainingSheets","refreshStyles","resolveOrReject","pageLoadFinished"],"mappings":"0LACO,SAASA,EAAUC,UACfA,EAAKC,QAAQ,sBAAuB,IACtCA,QAAQ,uBAAwB,IAChCA,QAAQ,MAAO,IACfA,QAAQ,eAAgB,IACxBA,QAAQ,aAAc,KACtBA,QAAQ,MAAO,KAGjB,SAASC,EAAYC,EAASC,OAC5B,IAAMC,KAAOD,EAAIE,WACdF,EAAIE,QAAQC,eAAeF,MACf,QAARA,GAAyB,oBAARA,GAAqC,aAARA,GAA8B,mBAARA,EACpEF,EAAQE,GAAOD,EAAIE,QAAQD,YAGvBF,EAAQE,GAAOG,KAAKC,MAAML,EAAIE,QAAQD,IAE1C,MAAOK,WCjBR,CACXC,UAAW,SAAUC,EAAUC,EAAQC,OAE7Bd,EAAOc,EAAMd,MAAQ,GAGrBe,iBAAaD,EAAME,OAASC,EAAgBjB,IAG5CkB,EAAeN,EAASO,eAAeJ,GACzCK,GAAmB,EAGjBC,EAAYT,EAASU,cAAc,SACzCD,EAAUE,aAAa,OAAQ,YAC3BT,EAAMU,OACNH,EAAUE,aAAa,QAAST,EAAMU,OAE1CH,EAAUN,GAAKA,EAEVM,EAAUI,aACXJ,EAAUK,YAAYd,EAASe,eAAed,IAG9CO,EAAqC,OAAjBF,GAAyBA,EAAaU,WAAWC,OAAS,GAAKR,EAAUO,WAAWC,OAAS,GAC7GX,EAAaY,WAAWC,YAAcV,EAAUS,WAAWC,eAG7DC,EAAOpB,EAASqB,qBAAqB,QAAQ,MAI9B,OAAjBf,IAA8C,IAArBE,EAA4B,KAC/Cc,EAASpB,GAASA,EAAMqB,aAAe,KACzCD,EACAA,EAAOE,WAAWC,aAAahB,EAAWa,GAE1CF,EAAKN,YAAYL,MAGrBH,IAAqC,IAArBE,GAChBF,EAAakB,WAAWE,YAAYpB,GAMpCG,EAAUI,eAENJ,EAAUI,WAAWc,QAAU1B,EACjC,MAAO2B,SACC,IAAIC,MAAM,2CAI5BC,cAAe,SAASC,OAGVC,EAFJhC,EAAW+B,EAAO/B,gBACjBA,EAAS8B,gBACNE,EAAUhC,EAASqB,qBAAqB,WAC/BW,EAAQf,OAAS,OC7D7B,WACC,uBACG,eACR,qBACM,gBACL,gBACA,iBACC,gBACD,yBACS,eACV,qBACM,gBACL,oBACI,oBACA,qBACC,oBACD,gBACJ,yBACS,mBACN,kBACD,eACH,mBACI,mBACA,wBACK,mBACL,mBACA,oBACC,oBACA,sBACE,yBACG,qBACJ,qBACA,kBACH,qBACG,uBACE,wBACC,wBACA,wBACA,wBACA,qBACH,mBACF,sBACG,kBACJ,kBACA,qBACG,oBACD,sBACE,sBACA,kBACJ,oBACE,qBACC,eACN,oBACK,eACL,eACA,gBACC,sBACM,mBACH,kBACD,oBACE,iBACH,gBACD,gBACA,mBACG,wBACK,oBACJ,uBACG,oBACH,qBACC,oBACD,+BACW,oBACX,oBACA,qBACC,oBACD,sBACE,wBACE,uBACD,yBACE,yBACA,yBACA,sBACH,eACP,oBACK,gBACJ,kBACE,iBACD,2BACU,qBACN,uBACE,uBACA,yBACE,0BACC,4BACE,0BACF,0BACA,uBACH,oBACH,oBACA,mBACD,sBACG,eACP,kBACG,gBACF,oBACI,iBACH,oBACG,iBACH,wBACO,oBACJ,wBACI,wBACA,qBACH,oBACD,eACL,eACA,eACA,qBACM,iBACJ,wBACO,cACV,oBACM,oBACA,sBACE,iBACL,qBACI,mBACF,mBACA,iBACF,iBACA,kBACC,oBACE,oBACA,oBACA,eACL,sBACO,oBACF,cACN,eACC,kBACG,iBACD,oBACG,iBACH,gBACD,gBACA,qBACK,iBACJ,sBACK,aCpJH,CACXA,OAAQ,GACC,KACC,OACA,QACA,SACA,MAAS,MACT,MAAS,MACT,MAAS,GAAK,IAExBgB,SAAU,GACD,KACC,MAEVC,MAAO,KACI,GAAK,EAAIC,KAAKC,QACd,EAAI,SACH,WACA,MCfD,CAAEC,OAAAA,EAAQC,gBAAAA,m4CCHnBC,yCAEOC,OAAS,UACTC,sBAAmBC,OACnBC,iBAAcD,OACdE,SAAW,UACXC,OAAS,SAERC,EAAOC,KACbC,OAAOC,eAAeF,KAAM,kBAAmB,CAC3CG,IAAK,kBAAoBJ,EAAKK,cAElCH,OAAOC,eAAeF,KAAM,QAAS,CACjCG,IAAK,kBAAoBJ,EAAKM,0DAK5BC,EAAOb,YACJc,EAAIC,GACLA,GAAQA,aAAgBhB,IACxBgB,EAAKf,OAASA,GAGlBgB,MAAMC,QAAQJ,GACdA,EAAMK,QAAQJ,GAGdA,EAAID,6CAKDN,KAAKY,QAAWZ,KAAKP,QAAUO,KAAKP,OAAOY,YAAe,4CAI1DL,KAAKa,WAAcb,KAAKP,QAAUO,KAAKP,OAAOW,YAAe,kDAI7D,gCAGLU,OACIC,EAAO,eACRC,OAAOF,EAAS,CACjBG,IAAK,SAASC,EAAOd,EAAUe,GAC3BJ,EAAKK,KAAKF,IAEdG,QAAS,kBACkB,IAAhBN,EAAK7C,UAGb6C,EAAKO,KAAK,mCAGdR,EAASS,GACZA,EAAON,IAAIjB,KAAKwB,sCAGbC,QACED,MAAQC,EAAQC,MAAM1B,KAAKwB,6CAGpBxB,sCAEPc,EAASa,EAAIC,EAAGC,UACbF,OACC,WAAYC,EAAIC,MAChB,WAAYD,EAAIC,MAChB,WAAYD,EAAIC,MAChB,WAAYD,EAAIC,kCAItBf,EAASU,OACNM,EAAYhB,GAAWA,EAAQiB,oBAE7BD,EAAaE,QAAQR,EAAQ,OAAOS,QAAQH,IAAcN,oDAKrC,MAAzBxB,KAAKN,wBACAA,iBAAmB,GAEK,IAA1BM,KAAKN,8DAIiB,MAAzBM,KAAKN,wBACAA,iBAAmB,QAEvBA,iBAAmBM,KAAKN,iBAAmB,kDAInB,MAAzBM,KAAKN,wBACAA,iBAAmB,QAEvBA,iBAAmBM,KAAKN,iBAAmB,kDAM3CE,aAAc,oDAMdA,aAAc,6CAQZI,KAAKJ,2DAIL,CACHF,iBAAkBM,KAAKN,iBACvBE,YAAaI,KAAKJ,wDAIPsC,GACVA,SAGAxC,iBAAmBwC,EAAKxC,sBACxBE,YAAcsC,EAAKtC,sBAIhCJ,EAAK2C,QAAU,SAACP,EAAGC,MAOVD,EAAEO,SAGU,WAAXN,EAAEO,MAAgC,cAAXP,EAAEO,YACpBR,EAAEO,QAAQN,GACd,GAAIA,EAAEM,eACDN,EAAEM,QAAQP,GACf,GAAIA,EAAEQ,OAASP,EAAEO,KAAjB,IAIPR,EAAIA,EAAEJ,MACNK,EAAIA,EAAEL,OACDf,MAAMC,QAAQkB,UACRA,IAAMC,EAAI,OAAIlC,KAErBiC,EAAE1D,SAAW2D,EAAE3D,YAGd,IAAImE,EAAI,EAAGA,EAAIT,EAAE1D,OAAQmE,OACO,IAA7B7C,EAAK2C,QAAQP,EAAES,GAAIR,EAAEQ,kBAItB,KAGX7C,EAAK8C,eAAiB,SAACV,EAAGC,UAAMD,EAAMC,GAAK,EACrCD,IAAMC,EAAK,EACXD,EAAMC,EAAK,OAAIlC,OC1Kf4C,yBACUC,EAAKZ,EAAGa,iBACV1C,mBAOFU,MAAMC,QAAQ8B,YACTA,IAAMA,EACJA,EAAItE,QAAU,YAChBsE,IAAM,GACXA,EAAIE,MAAM,SAASC,IAAI,SAACC,EAAGP,GACnBA,EAAI,EACJtC,EAAKyC,IAAIpB,KAAKyB,SAASD,EAAG,KAE1B7C,EAAK+C,MAASD,SAASD,EAAG,IAAO,iBAIpCJ,IAAM,GACXA,EAAIO,MAAM,IAAIJ,IAAI,SAACC,EAAGP,GACdA,EAAI,EACJtC,EAAKyC,IAAIpB,KAAKyB,SAASD,EAAIA,EAAG,KAE9B7C,EAAK+C,MAASD,SAASD,EAAIA,EAAG,IAAO,gBAI5CE,eAAaA,QAAuB,iBAANlB,EAAiBA,EAAI,QAC5B,IAAjBa,aACFjB,MAAQiB,wBAhCLjD,yCAqCRwD,EAAIhD,KAAKwC,IAAI,GAAK,IAClBS,EAAIjD,KAAKwC,IAAI,GAAK,IAClBX,EAAI7B,KAAKwC,IAAI,GAAK,UAMf,OAJPQ,EAAKA,GAAK,OAAWA,EAAI,MAAQ5D,KAAK8D,KAAMF,EAAI,MAAS,MAAQ,MAI7C,OAHpBC,EAAKA,GAAK,OAAWA,EAAI,MAAQ7D,KAAK8D,KAAMD,EAAI,MAAS,MAAQ,MAGhC,OAFjCpB,EAAKA,GAAK,OAAWA,EAAI,MAAQzC,KAAK8D,KAAMrB,EAAI,MAAS,MAAQ,qCAK9Df,EAASS,GACZA,EAAON,IAAIjB,KAAKmD,MAAMrC,kCAGpBA,EAASsC,OAEPC,EACAP,EACAQ,EAHEC,EAAWzC,GAAWA,EAAQyC,WAAaH,EAI7CI,EAAO,MAKXV,EAAQ9C,KAAKyD,OAAO3C,EAASd,KAAK8C,OAE9B9C,KAAKwB,SAC6B,IAA9BxB,KAAKwB,MAAMkC,QAAQ,OACfZ,EAAQ,IACRQ,EAAgB,YAEjB,CAAA,GAAkC,IAA9BtD,KAAKwB,MAAMkC,QAAQ,cAOnB1D,KAAKwB,MALR8B,EADAR,EAAQ,EACQ,OAEA,WAMpBA,EAAQ,IACRQ,EAAgB,eAIhBA,OACC,OACDE,EAAOxD,KAAKwC,IAAIG,IAAI,SAAAC,UAAKe,EAAMvE,KAAKwE,MAAMhB,GAAI,OAAMiB,OAAOF,EAAMb,EAAO,cAEvE,OACDU,EAAKpC,KAAKuC,EAAMb,EAAO,QACtB,MACDO,EAAQrD,KAAK8D,QACbN,EAAO,CACHxD,KAAKyD,OAAO3C,EAASuC,EAAMU,aACxB/D,KAAKyD,OAAO3C,EAAmB,IAAVuC,EAAMW,kBAC3BhE,KAAKyD,OAAO3C,EAAmB,IAAVuC,EAAMY,SAChCJ,OAAOL,MAGbF,kBAEUA,cAAiBE,EAAKlC,gBAASiC,EAAW,GAAK,cAG7DF,EAAQrD,KAAKkE,QAETX,EAAU,KACJY,EAAad,EAAMN,MAAM,IAG3BoB,EAAW,KAAOA,EAAW,IAAMA,EAAW,KAAOA,EAAW,IAAMA,EAAW,KAAOA,EAAW,KACnGd,aAAYc,EAAW,WAAKA,EAAW,WAAKA,EAAW,YAIxDd,kCASHvC,EAASa,EAAIyC,WACX5B,EAAM,IAAI/B,MAAM,GAChBqC,EAAQ9C,KAAK8C,OAAS,EAAIsB,EAAMtB,OAASsB,EAAMtB,MAC5CF,EAAI,EAAGA,EAAI,EAAGA,IACnBJ,EAAII,GAAK5C,KAAKqE,SAASvD,EAASa,EAAI3B,KAAKwC,IAAII,GAAIwB,EAAM5B,IAAII,WAExD,IAAIL,EAAMC,EAAKM,0CAIfwB,EAAMtE,KAAKwC,yCAUduB,EACAC,EAPEhB,EAAIhD,KAAKwC,IAAI,GAAK,IAClBS,EAAIjD,KAAKwC,IAAI,GAAK,IAClBX,EAAI7B,KAAKwC,IAAI,GAAK,IAClBZ,EAAI5B,KAAK8C,MACTyB,EAAMnF,KAAKmF,IAAIvB,EAAGC,EAAGpB,GACrB2C,EAAMpF,KAAKoF,IAAIxB,EAAGC,EAAGpB,GAGrBoC,GAAKM,EAAMC,GAAO,EAClBC,EAAIF,EAAMC,KAEZD,IAAQC,EACRT,EAAIC,EAAI,MACL,QACHA,EAAIC,EAAI,GAAMQ,GAAK,EAAIF,EAAMC,GAAOC,GAAKF,EAAMC,GAEvCD,QACCvB,EAAGe,GAAKd,EAAIpB,GAAK4C,GAAKxB,EAAIpB,EAAI,EAAI,cAClCoB,EAAGc,GAAKlC,EAAImB,GAAKyB,EAAI,aACrB5C,EAAGkC,GAAKf,EAAIC,GAAKwB,EAAI,EAE9BV,GAAK,QAEF,CAAEA,EAAO,IAAJA,EAASC,EAAAA,EAAGC,EAAAA,EAAGrC,EAAAA,uCAWvBmC,EACAC,EAPEhB,EAAIhD,KAAKwC,IAAI,GAAK,IAClBS,EAAIjD,KAAKwC,IAAI,GAAK,IAClBX,EAAI7B,KAAKwC,IAAI,GAAK,IAClBZ,EAAI5B,KAAK8C,MACTyB,EAAMnF,KAAKmF,IAAIvB,EAAGC,EAAGpB,GACrB2C,EAAMpF,KAAKoF,IAAIxB,EAAGC,EAAGpB,GAGrB6C,EAAIH,EAEJE,EAAIF,EAAMC,KAEZR,EADQ,IAARO,EACI,EAEAE,EAAIF,EAGRA,IAAQC,EACRT,EAAI,MACD,QACKQ,QACCvB,EAAGe,GAAKd,EAAIpB,GAAK4C,GAAKxB,EAAIpB,EAAI,EAAI,cAClCoB,EAAGc,GAAKlC,EAAImB,GAAKyB,EAAI,aACrB5C,EAAGkC,GAAKf,EAAIC,GAAKwB,EAAI,EAE9BV,GAAK,QAEF,CAAEA,EAAO,IAAJA,EAASC,EAAAA,EAAGU,EAAAA,EAAG9C,EAAAA,2CAIpB0C,EAAM,CAAc,IAAbtE,KAAK8C,OAAae,OAAO7D,KAAKwC,sCAGxCmC,UACIA,EAAEnC,KACNmC,EAAEnC,IAAI,KAAOxC,KAAKwC,IAAI,IACtBmC,EAAEnC,IAAI,KAAOxC,KAAKwC,IAAI,IACtBmC,EAAEnC,IAAI,KAAOxC,KAAKwC,IAAI,IACtBmC,EAAE7B,QAAW9C,KAAK8C,MAAS,OAAInD,WAM3C,SAASgE,EAAMe,EAAGH,UACPnF,KAAKoF,IAAIpF,KAAKmF,IAAIG,EAAG,GAAIH,GAGpC,SAASD,EAAMI,oBACAA,EAAE/B,IAAI,SAAAC,WACjBA,EAAIe,EAAMvE,KAAKwE,MAAMhB,GAAI,MACb,GAAK,IAAM,IAAMA,EAAEgC,SAAS,MACzCtD,KAAK,KAVRiB,EAAMsC,UAAUzC,KAAO,QAavBG,EAAMuC,YAAc,SAAAC,OACZnC,EACEoC,EAAMD,EAAQE,iBAChB3F,EAAO1C,eAAeoI,GACtBpC,EAAI,IAAIL,EAAMjD,EAAO0F,GAAKE,MAAM,IAEnB,gBAARF,IACLpC,EAAI,IAAIL,EAAM,CAAC,EAAG,EAAG,GAAI,IAGzBK,SACAA,EAAEpB,MAAQuD,EACHnC,OC9OTuC,yBACU3E,6BACHgB,MAAQhB,uBAFDhB,qCAKTsB,EAASS,GACZA,EAAON,IAAI,UACNO,MAAMR,OAAOF,EAASS,GAC3BA,EAAON,IAAI,kCAGVH,UACM,IAAIqE,EAAMnF,KAAKwB,MAAM4D,KAAKtE,aAIzCqE,EAAMN,UAAUzC,KAAO,YChBjBiD,yBACU7D,oBACM,MAAVA,YACKA,MAAQ,aACR8D,mBAAoB,aAEpB9D,MAAQA,EAAQA,EAAM+D,OAAS,YAC/BD,kBAAmC,cAAV9D,4BAPjBhC,qCAWdsB,EAASS,OACNiE,EAAgB1E,EAAQyC,UAAYkC,EAAoBzF,KAAKwB,OAAU,GAAK,IAClFD,EAAON,IAAIuE,EAAexF,KAAKwB,MAAQgE,YAI/CH,EAAWR,UAAUzC,KAAO,aAC5B,IAAMqD,EAAsB,KACpB,OACC,OACA,GCnBHC,yBACUC,EAAYnE,EAAOoE,EAAYzE,EAAO0E,EAAiBC,6BAC1DH,WAAaA,aAAsBN,EACtBM,EAAa,IAAIN,EAAWM,YAGrCnE,MADY,iBAAVA,EACMA,EAAM+D,OACZ/D,GAGM,YAEZoE,WAAaA,WACbhF,OAASO,WACTN,UAAYgF,WACZE,mBAAmBD,YACnBE,mBAAeL,2CAhBNnG,qCAmBXiC,OACGD,EAAQxB,KAAKwB,WACdmE,WAAalE,EAAQC,MAAM1B,KAAK2F,YAChB,WAAjBM,EAAOzE,UACFA,MAAQC,EAAQC,MAAMF,iCAI9BV,UACM,IAAI4E,EAAQ1F,KAAK2F,WACC3F,KAAKwB,MAAM4D,KAAOpF,KAAKwB,MAAM4D,KAAKtE,GAAWd,KAAKwB,MAClDxB,KAAK4F,WACL5F,KAAKK,WACLL,KAAKI,WAAYJ,KAAK8F,yDAIxC,IAAIJ,EAAQ1F,KAAK2F,WACpB3F,KAAKwB,MACLxB,KAAK4F,WACL5F,KAAKK,WACLL,KAAKI,WAAYJ,KAAK8F,iDAGvBhF,EAASS,GACZA,EAAON,IAAIjB,KAAKmD,MAAMrC,GAAUd,KAAKI,WAAYJ,KAAKK,gDAGpDS,yDAAU,GACRU,EAAQxB,KAAKwB,MACX0E,EAAgBpF,EAAQoF,qBAC1B1E,aAAiB2D,IAGjBrE,EAAQoF,eAAgB,GAE5B1E,EAAQA,EAAM2B,MAAQ3B,EAAM2B,MAAMrC,GAAWU,EAC7CV,EAAQoF,cAAgBA,EACV,KAAV1E,GAAoD,MAApCxB,KAAK2F,WAAWnE,MAAM2E,OAAO,GACtC,GAEAnG,KAAK2F,WAAWxC,MAAMrC,GAAWU,WAKpDkE,EAAQb,UAAUzC,KAAO,UCpElB,IAAMhD,EAAO,CAChBgH,OAAQ,EACRC,gBAAiB,EACjBC,OAAQ,EACRC,cAAe,GAGNC,EAAc,CACvBC,IAAK,EACLC,MAAO,EACPC,IAAK,iFCXT,IAAIC,EAAQ,WAGZ,SAASC,EAAYC,EAAK1E,GACxB,OAAe,MAARA,GAAgB0E,aAAe1E,EAGxC,IAAI2E,EASAC,EAOAC,EAfJ,IACEF,EAAYG,IACZ,MAAMnK,GAGNgK,EAAY,aAId,IACEC,EAAYG,IACZ,MAAMpK,GACNiK,EAAY,aAId,IACEC,EAAgBG,QAChB,MAAMrK,GACNkK,EAAgB,aAwBlB,SAASL,EAAMnH,EAAQ4H,EAAUC,EAAOzC,EAAW0C,GACzB,iBAAbF,IACTC,EAAQD,EAASC,MACjBzC,EAAYwC,EAASxC,UACrB0C,EAAuBF,EAASE,qBAChCF,EAAWA,EAASA,UAItB,IAAIG,EAAa,GACbC,EAAc,GAEdC,EAA6B,oBAAVC,OA0IvB,YAxIuB,IAAZN,IACTA,GAAW,QAEO,IAATC,IACTA,EAAQM,EAAAA,GAGV,SAASC,EAAOpI,EAAQ6H,GAEtB,GAAe,OAAX7H,EACF,OAAO,KAET,GAAc,IAAV6H,EACF,OAAO7H,EAET,IAAIqI,EACAC,EACJ,GAAqB,iBAAVtI,EACT,OAAOA,EAGT,GAAIoH,EAAYpH,EAAQsH,GACtBe,EAAQ,IAAIf,OACP,GAAIF,EAAYpH,EAAQuH,GAC7Bc,EAAQ,IAAId,OACP,GAAIH,EAAYpH,EAAQwH,GAC7Ba,EAAQ,IAAIb,EAAc,SAAUe,EAASC,GAC3CxI,EAAOyI,KAAK,SAAS1G,GACnBwG,EAAQH,EAAOrG,EAAO8F,EAAQ,KAC7B,SAASa,GACVF,EAAOJ,EAAOM,EAAKb,EAAQ,aAG1B,GAAIV,EAAMwB,UAAU3I,GACzBqI,EAAQ,QACH,GAAIlB,EAAMyB,WAAW5I,GAC1BqI,EAAQ,IAAIQ,OAAO7I,EAAO8I,OAAQC,EAAiB/I,IAC/CA,EAAOgJ,YAAWX,EAAMW,UAAYhJ,EAAOgJ,gBAC1C,GAAI7B,EAAM8B,SAASjJ,GACxBqI,EAAQ,IAAIa,KAAKlJ,EAAOmJ,eACnB,CAAA,GAAIlB,GAAaC,OAAOkB,SAASpJ,GAStC,OANEqI,EAFEH,OAAOmB,YAEDnB,OAAOmB,YAAYrJ,EAAOvB,QAG1B,IAAIyJ,OAAOlI,EAAOvB,QAE5BuB,EAAOsJ,KAAKjB,GACLA,EACEjB,EAAYpH,EAAQX,OAC7BgJ,EAAQ7H,OAAO+I,OAAOvJ,QAEE,IAAboF,GACTkD,EAAQ9H,OAAOgJ,eAAexJ,GAC9BqI,EAAQ7H,OAAO+I,OAAOjB,KAGtBD,EAAQ7H,OAAO+I,OAAOnE,GACtBkD,EAAQlD,GAIZ,GAAIwC,EAAU,CACZ,IAAIlG,EAAQqG,EAAW9D,QAAQjE,GAE/B,IAAc,GAAV0B,EACF,OAAOsG,EAAYtG,GAErBqG,EAAWpG,KAAK3B,GAChBgI,EAAYrG,KAAK0G,GAiBnB,IAAK,IAAIzF,KAdLwE,EAAYpH,EAAQsH,IACtBtH,EAAOkB,QAAQ,SAASa,EAAOwD,GAC7B,IAAIkE,EAAWrB,EAAO7C,EAAKsC,EAAQ,GAC/B6B,EAAatB,EAAOrG,EAAO8F,EAAQ,GACvCQ,EAAMvH,IAAI2I,EAAUC,KAGpBtC,EAAYpH,EAAQuH,IACtBvH,EAAOkB,QAAQ,SAASa,GACtB,IAAI4H,EAAavB,EAAOrG,EAAO8F,EAAQ,GACvCQ,EAAM7G,IAAImI,KAIA3J,EAAQ,CACpB,IAAI4J,EACAtB,IACFsB,EAAQpJ,OAAOqJ,yBAAyBvB,EAAO1F,IAG7CgH,GAAsB,MAAbA,EAAM9I,MAGnBuH,EAAMzF,GAAKwF,EAAOpI,EAAO4C,GAAIiF,EAAQ,IAGvC,GAAIrH,OAAOsJ,sBACT,CAAA,IAAIC,EAAUvJ,OAAOsJ,sBAAsB9J,GAC3C,IAAS4C,EAAI,EAAGA,EAAImH,EAAQtL,OAAQmE,IAAK,CAGvC,IAAIoH,EAASD,EAAQnH,MACjBqH,EAAazJ,OAAOqJ,yBAAyB7J,EAAQgK,KACtCC,EAAWC,YAAepC,KAG7CO,EAAM2B,GAAU5B,EAAOpI,EAAOgK,GAASnC,EAAQ,GAC1CoC,EAAWC,YACd1J,OAAOC,eAAe4H,EAAO2B,EAAQ,CACnCE,YAAY,MAMpB,GAAIpC,EACF,CAAA,IAAIqC,EAAmB3J,OAAO4J,oBAAoBpK,GAClD,IAAS4C,EAAI,EAAGA,EAAIuH,EAAiB1L,OAAQmE,IAAK,CAChD,IACIqH,EADAI,EAAeF,EAAiBvH,IAChCqH,EAAazJ,OAAOqJ,yBAAyB7J,EAAQqK,KACvCJ,EAAWC,aAG7B7B,EAAMgC,GAAgBjC,EAAOpI,EAAOqK,GAAexC,EAAQ,GAC3DrH,OAAOC,eAAe4H,EAAOgC,EAAc,CACzCH,YAAY,MAKlB,OAAO7B,EAGFD,CAAOpI,EAAQ6H,GAqBxB,SAASyC,EAAWC,GAClB,OAAO/J,OAAO4E,UAAUD,SAASqF,KAAKD,GAmBxC,SAASxB,EAAiB0B,GACxB,IAAIC,EAAQ,GAIZ,OAHID,EAAGE,SAAQD,GAAS,KACpBD,EAAGG,aAAYF,GAAS,KACxBD,EAAGI,YAAWH,GAAS,KACpBA,EAIT,OAxCAvD,EAAM2D,eAAiB,SAAwB9K,GAC7C,GAAe,OAAXA,EACF,OAAO,KAET,IAAImD,EAAI,aAER,OADAA,EAAEiC,UAAYpF,EACP,IAAImD,GAQbgE,EAAMmD,WAAaA,EAKnBnD,EAAM8B,SAHN,SAAkBsB,GAChB,MAAoB,iBAANA,GAAoC,kBAAlBD,EAAWC,IAO7CpD,EAAMwB,UAHN,SAAmB4B,GACjB,MAAoB,iBAANA,GAAoC,mBAAlBD,EAAWC,IAO7CpD,EAAMyB,WAHN,SAAoB2B,GAClB,MAAoB,iBAANA,GAAoC,oBAAlBD,EAAWC,IAW7CpD,EAAM4B,iBAAmBA,EAElB5B,EA3PK,GA8PsB4D,EAAOC,UACvCD,UAAiB5D,KC3PZ,SAAS8D,EAAYvJ,EAAOwJ,WAC3BC,EAAIzJ,EAAQ,EACZ0J,EAAO,KACPC,GAAU,IAELF,GAAK,GAA+B,OAA1BD,EAAYxE,OAAOyE,IAClCE,UAGiB,iBAAV3J,IACP0J,GAAQF,EAAYzF,MAAM,EAAG/D,GAAOuB,MAAM,QAAU,IAAIxE,QAGrD,CACH2M,KAAAA,EACAC,OAAAA,GAGD,SAASC,EAAUC,OAClB3I,EACEnE,EAAS8M,EAAI9M,OACb6K,EAAO,IAAItI,MAAMvC,OAElBmE,EAAI,EAAGA,EAAInE,EAAQmE,IACpB0G,EAAK1G,GAAK2I,EAAI3I,UAEX0G,EAEJ,SAASnC,EAAME,OACZmE,EAAS,OACV,IAAMC,KAAQpE,EACXA,EAAIlK,eAAesO,KACnBD,EAAOC,GAAQpE,EAAIoE,WAGpBD,EAEJ,SAASE,EAAYC,EAAMC,MAC1BA,GAAQA,EAAKC,iBACND,MAELE,EAAOjO,MAAMkO,SAASJ,EAAMC,MAC9BE,EAAKE,aACLF,EAAKG,KAAOC,EAAepF,eAG3BgF,EAAKK,eACLL,EAAKM,YAAcF,EAAsBhF,KAEpB,iBAAd4E,EAAKG,YACJH,EAAKG,KAAKzG,mBACT,SACDsG,EAAKG,KAAOC,EAAevF,iBAE1B,kBACDmF,EAAKG,KAAOC,EAAetF,0BAE1B,aACA,SACDkF,EAAKG,KAAOC,EAAerF,iBAE1B,gBACDiF,EAAKG,KAAOC,EAAepF,iBAGP,iBAArBgF,EAAKM,mBACJN,EAAKM,YAAY5G,mBAChB,MACDsG,EAAKM,YAAcF,EAAsBlF,cAExC,QACD8E,EAAKM,YAAcF,EAAsBjF,gBAExC,MACD6E,EAAKM,YAAcF,EAAsBhF,WAI9C4E,EAqBJ,SAASO,EAAad,WAAKe,yDAAS,GAC9B1J,EAAI,EAAGnE,EAAS8M,EAAI9M,OAAQmE,EAAInE,EAAQmE,IAAK,KAC5Cb,EAAQwJ,EAAI3I,GACd5B,MAAMC,QAAQc,GACdlE,MAAMwO,aAAatK,EAAOuK,QAEZpM,IAAV6B,GACAuK,EAAO3K,KAAKI,UAIjBuK,gFA9BJ,SAAkBX,EAAMC,OACvBW,EAASX,GAAQ,OAChBA,EAAKC,UAAW,CACjBU,EAAS,OACHR,EAAWS,EAAYb,GAC7BY,EAAOV,UAAYE,MACbP,EAASI,EAAOY,EAAYZ,GAAQ,GAC1CpL,OAAOiM,OAAOF,EAAQR,EAAUP,UAE7Be,SAEJ,SAAeZ,EAAMC,OACnB,IAAMH,KAAQG,EACXA,EAAKzO,eAAesO,KACpBE,EAAKF,GAAQG,EAAKH,WAGnBE,oBC9ELe,EAAY,SAAmBtN,EAAGuN,EAAgBC,GACpDvN,MAAMmL,KAAKjK,UAELsM,EAAWzN,EAAEyN,UAAYD,UAE1BE,QAAU1N,EAAE0N,aACZC,MAAQ3N,EAAE2N,MAEXJ,GAAkBE,EAAU,KACtBG,EAAQL,EAAeM,SAASJ,GAChCK,EAAMrP,EAAkBuB,EAAEsC,MAAOsL,GACjC5B,EAAO8B,EAAI9B,KACX+B,EAAOD,EAAI7B,OACX+B,EAAWhO,EAAEoL,MAAQ3M,EAAkBuB,EAAEoL,KAAMwC,GAAO5B,KACtDiC,EAAQL,EAAQA,EAAM1J,MAAM,MAAQ,WAErCX,KAAOvD,EAAEuD,MAAQ,cACjBkK,SAAWA,OACXnL,MAAQtC,EAAEsC,WACV0J,KAAuB,iBAATA,EAAoBA,EAAO,EAAI,UAC7CC,OAAS8B,GAET5M,KAAK6K,MAAQ7K,KAAKwM,MAAO,KACpBO,EAAQ/M,KAAKwM,MAAM9J,MAAM,sCAE3BqK,IACIA,EAAM,UACDlC,KAAOhI,SAASkK,EAAM,IAAM,GAEjCA,EAAM,UACDjC,OAASjI,SAASkK,EAAM,WAKpCF,SAAWA,EAAW,OACtBG,YAAcF,EAAMD,QAEpBI,QAAU,CACXH,EAAM9M,KAAK6K,KAAO,GAClBiC,EAAM9M,KAAK6K,KAAO,GAClBiC,EAAM9M,KAAK6K,SAMvB,QAA6B,IAAlB5K,OAAO+I,OAAwB,KAChCkE,EAAI,aACVA,EAAErI,UAAY/F,MAAM+F,UACpBsH,EAAUtH,UAAY,IAAIqI,OAE1Bf,EAAUtH,UAAY5E,OAAO+I,OAAOlK,MAAM+F,WAG9CsH,EAAUtH,UAAUsI,YAAchB,EASlCA,EAAUtH,UAAUD,SAAW,eAASpI,yDAAU,GAC1C+P,EAAU,GACRU,EAAUjN,KAAKiN,SAAW,GAC5BG,EAAQ,GACRC,EAAU,SAAAC,UAAOA,MACjB9Q,EAAQ6Q,QAAS,KACXjL,IAAc5F,EAAQ6Q,YACf,aAATjL,QACMtD,4DAAqDsD,QAE/DiL,EAAU7Q,EAAQ6Q,WAGJ,OAAdrN,KAAK6K,KAAe,IACM,iBAAfoC,EAAQ,IACfG,EAAMhM,KAAKiM,YAAWrN,KAAK6K,KAAO,cAAKoC,EAAQ,IAAM,SAG/B,iBAAfA,EAAQ,GAAiB,KAC5BM,YAAcvN,KAAK6K,UACnBoC,EAAQ,KACRM,GAAYN,EAAQ,GAAG/H,MAAM,EAAGlF,KAAK8K,QACjCuC,EAAQA,EAAQA,EAAQJ,EAAQ,GAAGO,OAAOxN,KAAK8K,OAAQ,GAAI,QACvDmC,EAAQ,GAAG/H,MAAMlF,KAAK8K,OAAS,GAAI,OAAQ,YAEvDsC,EAAMhM,KAAKmM,GAGW,iBAAfN,EAAQ,IACfG,EAAMhM,KAAKiM,YAAWrN,KAAK6K,KAAO,cAAKoC,EAAQ,IAAM,SAEzDG,YAAWA,EAAM9L,KAAK,MAAQ+L,EAAQ,GAAI,sBAG9Cd,GAAWc,YAAWrN,KAAKoC,uBAAcpC,KAAKuM,SAAW,OACrDvM,KAAKsM,WACLC,GAAWc,EAAQ,OAAQ,OAASrN,KAAKsM,UAEzCtM,KAAK6K,OACL0B,GAAWc,qBAAoBrN,KAAK6K,yBAAgB7K,KAAK8K,OAAS,OAAM,SAG5EyB,eAAgBa,GAEZpN,KAAK6M,WACLN,aAAcc,EAAQ,QAAS,QAAUrN,KAAKsM,UAAY,UAC1DC,aAAcc,EAAQrN,KAAK6M,SAAU,oBAAW7M,KAAKgN,mBAGlDT,OCpILkB,yBACUC,EAAUC,EAAYC,EAAWzM,EAAO0E,EAAiBC,6BAC5D6H,WAAaA,WACbC,UAAYA,WACZC,gBAAkBD,WAClBhN,OAASO,WACTN,UAAYgF,WACZ6H,kBAAgBI,YAAYJ,YAC5BK,oBAAiBpO,WACjBoG,mBAAmBD,YACnBE,mBAAe0H,yCAVLlO,qCAaZiC,GACCzB,KAAK0N,gBACAA,SAAWjM,EAAQuM,WAAWhO,KAAK0N,WAExC1N,KAAK2N,kBACAA,WAAalM,EAAQuM,WAAWhO,KAAK2N,aAE1C3N,KAAK4N,iBACAA,UAAYnM,EAAQC,MAAM1B,KAAK4N,kDAI9BF,EAAUC,EAAYE,OAE1BI,EAAc,IAAIR,EADxBC,EAAW1N,KAAK8N,YAAYJ,GACeC,GAAc3N,KAAK2N,WAC1D,KAAM3N,KAAKK,WAAYL,KAAKI,WAAYJ,KAAK8F,yBACjDmI,EAAYJ,eAAoC,MAAlBA,EAA0BA,EAAiB7N,KAAK6N,eAC9EI,EAAYC,WAAalO,KAAKkO,WACvBD,sCAGCE,UACHA,GAGc,iBAARA,QACFrR,MAAMsR,UACPD,EACA,CAAC,YACDnO,KAAKY,OACLZ,KAAKa,UACL,SAASsH,EAAK4D,MACN5D,QACM,IAAIgE,EAAU,CAChBhL,MAAOgH,EAAIhH,MACXoL,QAASpE,EAAIoE,SACdvM,KAAKlD,MAAMuR,QAASrO,KAAKa,UAAUyL,UAE1C6B,EAAMpC,EAAO,GAAG2B,WAGrBS,GAlBI,CAAC,IAAIzI,EAAQ,GAAI,KAAK,EAAO1F,KAAKY,OAAQZ,KAAKa,+DAuBpDyN,EAAO,CAAC,IAAIb,EAAS,CADhB,IAAI/H,EAAQ,GAAI,KAAK,EAAO1F,KAAKY,OAAQZ,KAAKa,YACxB,KAAM,KAAMb,KAAKY,OAAQZ,KAAKa,mBAC/DyN,EAAK,GAAGJ,YAAa,EACdI,gCAGLlK,OAGEmK,EACAlM,EAHEqL,EAAW1N,KAAK0N,SAChBc,EAAMd,EAASxP,UAMR,KADbqQ,GADAnK,EAAQA,EAAMqK,iBACDvQ,SACKsQ,EAAMD,SACb,MAEFlM,EAAI,EAAGA,EAAIkM,EAAMlM,OACdqL,EAASrL,GAAGb,QAAU4C,EAAM/B,UACrB,SAKZkM,6CAIHvO,KAAK+N,sBACE/N,KAAK+N,mBAGZL,EAAW1N,KAAK0N,SAAS/K,IAAK,SAAA+B,UAAKA,EAAEiB,WAAWnE,OAASkD,EAAElD,MAAMA,OAASkD,EAAElD,SAAQF,KAAK,IAAIoB,MAAM,sCAEnGgL,EACoB,MAAhBA,EAAS,IACTA,EAASgB,QAGbhB,EAAW,GAGP1N,KAAK+N,eAAiBL,wDAItB1N,KAAKkO,YACgB,IAAzBlO,KAAK0N,SAASxP,QACa,MAA3B8B,KAAK0N,SAAS,GAAGlM,QACsB,MAAtCxB,KAAK0N,SAAS,GAAG/H,WAAWnE,OAAuD,KAAtCxB,KAAK0N,SAAS,GAAG/H,WAAWnE,oCAG7EV,OACK+M,EAAiB7N,KAAK4N,WAAa5N,KAAK4N,UAAUxI,KAAKtE,GACzD4M,EAAW1N,KAAK0N,SAChBC,EAAa3N,KAAK2N,kBAEtBD,EAAWA,GAAYA,EAAS/K,IAAI,SAAA9D,UAAKA,EAAEuG,KAAKtE,KAChD6M,EAAaA,GAAcA,EAAWhL,IAAI,SAAAgM,UAAUA,EAAOvJ,KAAKtE,KAEzDd,KAAK4O,cAAclB,EAAUC,EAAYE,kCAG7C/M,EAASS,OACRc,MAEEvB,GAAYA,EAAQoF,eAAwD,KAAtClG,KAAK0N,SAAS,GAAG/H,WAAWnE,OACpED,EAAON,IAAI,IAAKjB,KAAKI,WAAYJ,KAAKK,YAErCgC,EAAI,EAAGA,EAAIrC,KAAK0N,SAASxP,OAAQmE,IACxBrC,KAAK0N,SAASrL,GAChBrB,OAAOF,EAASS,gDAKrBvB,KAAK6N,wBAIpBJ,EAAS5I,UAAUzC,KAAO,eC5IpByM,yBACUrN,iBACHA,QACK,IAAI1C,MAAM,2CAEf2B,MAAMC,QAAQc,YAIVA,MAAQA,WAHRA,MAAQ,CAAEA,wBANPhC,qCAaTiC,GACCzB,KAAKwB,aACAA,MAAQC,EAAQuM,WAAWhO,KAAKwB,qCAIxCV,UACyB,IAAtBd,KAAKwB,MAAMtD,OACJ8B,KAAKwB,MAAM,GAAG4D,KAAKtE,GAEnB,IAAI+N,EAAM7O,KAAKwB,MAAMmB,IAAI,SAAA+B,UAAKA,EAAEU,KAAKtE,qCAI7CA,EAASS,OACRc,MACCA,EAAI,EAAGA,EAAIrC,KAAKwB,MAAMtD,OAAQmE,SAC1Bb,MAAMa,GAAGrB,OAAOF,EAASS,GAC1Bc,EAAI,EAAIrC,KAAKwB,MAAMtD,QACnBqD,EAAON,IAAKH,GAAWA,EAAQyC,SAAY,IAAM,eAMjEsL,EAAMhK,UAAUzC,KAAO,YCtCjB0M,yBACUtN,6BAAcA,MAAQA,uBADhBhC,qCAGXsB,EAASS,MACO,MAAfvB,KAAKwB,WAAuB,CAAEY,KAAM,SAAUmK,QAAS,4BAC3DhL,EAAON,IAAIjB,KAAKwB,gBAIxBsN,EAAQjK,UAAUzC,KAAO,UAEzB0M,EAAQC,KAAO,IAAID,EAAQ,QAC3BA,EAAQE,MAAQ,IAAIF,EAAQ,aCZtBG,yBACUzN,EAAOL,EAAO0E,EAAiBqJ,EAAUC,EAAarJ,6BACzDtE,MAAQA,WACRZ,OAASO,WACTN,UAAYgF,WACZqJ,SAAWA,WACXC,iBAAsC,IAAhBA,GAAuCA,WAC7DC,WAAY,WACZrJ,mBAAmBD,wBARRtG,4CAYT,IAAIyP,EAAUjP,KAAKwB,MAAOxB,KAAKY,OAAQZ,KAAKa,UAAWb,KAAKkP,SAAUlP,KAAKmP,YAAanP,KAAK8F,kDAGhG1B,UACGA,EAAMjB,OAASnD,KAAKmD,UAAYiB,EAAMjB,QAAU,OAAIxD,iDAIpDK,KAAKmP,2CAGTrO,EAASS,QACP3B,YAAcyP,QAAQrP,KAAKwB,OAC5BxB,KAAKJ,aACL2B,EAAON,IAAIjB,KAAKwB,MAAOxB,KAAKa,UAAWb,KAAKY,OAAQZ,KAAKkP,mBAKrED,EAAUpK,UAAUzC,KAAO,YC5B3B,IAAMkN,EAAO3D,EAGP4D,yBACUC,EAAMhO,EAAOiO,EAAWC,EAAOvO,EAAO0E,EAAiB8J,EAAQC,6BAClEJ,KAAOA,WACPhO,MAASA,aAAiBhC,EAAQgC,EAAQ,IAAIqN,EAAM,CAACrN,EAAQ,IAAIyN,EAAUzN,GAAS,gBACpFiO,UAAYA,aAAgBA,EAAUlK,QAAW,YACjDmK,MAAQA,WACR9O,OAASO,WACTN,UAAYgF,WACZ8J,OAASA,IAAU,WACnBC,cAAyBjQ,IAAbiQ,EAA0BA,EACpCJ,EAAKrJ,QAA8B,MAAnBqJ,EAAKrJ,OAAO,YAC9BiJ,WAAY,WACZpJ,mBAAexE,sCAZFhC,qCAefsB,EAASS,GACZA,EAAON,IAAIjB,KAAKwP,MAAQ1O,EAAQyC,SAAW,IAAM,MAAOvD,KAAKI,WAAYJ,KAAKK,qBAErEmB,MAAMR,OAAOF,EAASS,GAE/B,MAAO1C,SACHA,EAAEsC,MAAQnB,KAAKY,OACf/B,EAAEyN,SAAWtM,KAAKa,UAAUyL,SACtBzN,EAEV0C,EAAON,IAAIjB,KAAKyP,WAAczP,KAAK2P,QAAW7O,EAAQ+O,UAAY/O,EAAQyC,SAAa,GAAK,KAAMvD,KAAKa,UAAWb,KAAKY,qCAGtHE,OAEGgP,EAEAC,EAHAC,GAAa,EAEbR,EAAOxP,KAAKwP,KAEZI,EAAW5P,KAAK4P,SACA,iBAATJ,IAGPA,EAAwB,IAAhBA,EAAKtR,QAAkBsR,EAAK,aAAcV,EAC1CU,EAAK,GAAGhO,MAsD5B,SAAkBV,EAAS0O,OAEnBnN,EADAb,EAAQ,GAENoJ,EAAI4E,EAAKtR,OACTqD,EAAS,CAACN,IAAK,SAAU+C,GAAIxC,GAASwC,QACvC3B,EAAI,EAAGA,EAAIuI,EAAGvI,IACfmN,EAAKnN,GAAG+C,KAAKtE,GAASE,OAAOF,EAASS,UAEnCC,EA9DyByO,CAASnP,EAAS0O,GAC1CI,GAAW,GAIF,SAATJ,GAAmB1O,EAAQ4K,OAAS4D,EAAKlJ,SACzC4J,GAAa,EACbF,EAAWhP,EAAQ4K,KACnB5K,EAAQ4K,KAAO4D,EAAKjJ,wBAGpBvF,EAAQoP,eAAe9O,KAAK,IAC5B2O,EAAa/P,KAAKwB,MAAM4D,KAAKtE,IAExBd,KAAK4P,UAAgC,oBAApBG,EAAW3N,UACvB,CAAEmK,QAAS,8CACbpL,MAAOnB,KAAKK,WAAYiM,SAAUtM,KAAKI,WAAWkM,cAEtDmD,EAAYzP,KAAKyP,UACfU,EAAkBrP,EAAQoP,eAAeE,aAC1CX,GAAaU,EAAgBV,YAC9BA,EAAYU,EAAgBV,WAGzB,IAAIF,EAAYC,EACLO,EACAN,EACAzP,KAAK0P,MACL1P,KAAKK,WAAYL,KAAKI,WAAYJ,KAAK2P,OACnCC,GAE1B,MAAO/Q,QACoB,iBAAZA,EAAEsC,QACTtC,EAAEsC,MAAQnB,KAAKK,WACfxB,EAAEyN,SAAWtM,KAAKI,WAAWkM,UAE3BzN,UAGFmR,IACAlP,EAAQ4K,KAAOoE,mDAMhB,IAAIP,EAAYvP,KAAKwP,KACNxP,KAAKwB,MACL,aACAxB,KAAK0P,MACL1P,KAAKK,WAAYL,KAAKI,WAAYJ,KAAK2P,iBAerEJ,EAAY1K,UAAUzC,KAAO,cC/G7B,IAAMiO,EAAY,SAAZA,EAAavP,EAASwP,EAAKC,OACzBxE,EAAS,MACTjL,EAAQ0P,kBAAoB1P,EAAQyC,gBAC5BzC,EAAQ0P,qBACP,WACDzE,EAASsE,EAAUI,UAAUH,aAE5B,aACDvE,EAASsE,EAAUK,aAAaJ,aAE/B,MACDvE,EAASsE,EAAUI,UAAUH,IAAQC,GAAiB,IAAMF,EAAUK,aAAaJ,UAIxFvE,GAGXsE,EAAUI,UAAY,SAAAH,2BAAkBA,EAAID,UAAUM,wBAAeL,EAAID,UAAUO,mBAEnFP,EAAUK,aAAe,SAAAJ,OACjBO,EAAuBP,EAAID,UAAUO,eACpC,gBAAgBE,KAAKD,KACtBA,mBAAiCA,2DAEkBA,EAAqBvU,QAAQ,cAAe,SAAAsF,SAC1F,MAALA,IACAA,EAAI,iBAEIA,yCACc0O,EAAID,UAAUM,wBC3BtCI,yBACUvP,EAAOwP,EAAe7P,EAAO0E,6BAChCrE,MAAQA,WACRwP,cAAgBA,WAChBpQ,OAASO,WACTN,UAAYgF,WACZuJ,WAAY,uBANH5P,qCASXsB,EAASS,GACRvB,KAAKqQ,WACL9O,EAAON,IAAIgQ,EAAanQ,EAASd,MAAOA,KAAKI,WAAYJ,KAAKK,YAElEkB,EAAON,IAAIjB,KAAKwB,wCAGXV,OACCoQ,EAAepQ,EAAQyC,UAA8B,MAAlBvD,KAAKwB,MAAM,UAC7CxB,KAAKgR,eAAiBE,WAIrCH,EAAQlM,UAAUzC,KAAO,UCzBzB,IAAM+O,EAAW,GAIXC,EAAmB,SAA0BC,EAAUC,EAAaC,MACjEF,MAEA,IAAIhP,EAAI,EAAGA,EAAIkP,EAAiBrT,OAAQmE,IACrCgP,EAASzU,eAAe2U,EAAiBlP,MACzCiP,EAAYC,EAAiBlP,IAAMgP,EAASE,EAAiBlP,MAQnEmP,EAAsB,CAExB,QACA,cACA,WACA,gBACA,WACA,kBACA,WACA,aACA,aACA,OACA,eAEA,iBAEA,iBAGJL,EAASM,MAAQ,SAASjV,GACtB4U,EAAiB5U,EAASwD,KAAMwR,GAEN,iBAAfxR,KAAK0R,aAA2BA,MAAQ,CAAC1R,KAAK0R,SAG7D,IAAMC,EAAqB,CACvB,QACA,WACA,WACA,OACA,cACA,YACA,iBACA,UACA,oBACA,gBACA,iBACA,eAsGJ,SAASC,EAAeC,UACZ,sBAAsBf,KAAKe,GAGvC,SAASC,EAAoBD,SACC,MAAnBA,EAAK1L,OAAO,GAxGvBgL,EAASY,KAAO,SAASvV,EAASwV,GAC9BZ,EAAiB5U,EAASwD,KAAM2R,GAEN,iBAAf3R,KAAK0R,aAA2BA,MAAQ,CAAC1R,KAAK0R,aAEpDM,OAASA,GAAU,QACnB9B,eAAiBlQ,KAAKkQ,gBAAkB,IAGjDiB,EAASY,KAAKlN,UAAUoN,UAAY,WAC3BjS,KAAKkS,iBACDA,UAAY,SAEhBA,UAAU9Q,MAAK,QACf+Q,QAAS,GAGlBhB,EAASY,KAAKlN,UAAUuN,SAAW,gBAC1BF,UAAU9B,MACVpQ,KAAKkS,iBACDC,QAAS,IAItBhB,EAASY,KAAKlN,UAAUwN,cAAgB,WAC/BrS,KAAKsS,mBACDA,YAAc,SAElBA,YAAYlR,MAAK,IAG1B+P,EAASY,KAAKlN,UAAU0N,iBAAmB,gBAClCD,YAAYlC,OAGrBe,EAASY,KAAKlN,UAAUsN,QAAS,EACjChB,EAASY,KAAKlN,UAAU2N,QAAS,EACjCrB,EAASY,KAAKlN,UAAU4N,SAAW,SAAU9Q,WACpC3B,KAAKwS,YAGC,MAAP7Q,GAAc3B,KAAK0L,OAASC,EAAevF,QAAYpG,KAAKsS,aAAgBtS,KAAKsS,YAAYpU,YAG7F8B,KAAK0L,KAAOC,EAAetF,kBACpBrG,KAAKsS,aAAetS,KAAKsS,YAAYpU,UAKpDiT,EAASY,KAAKlN,UAAU6N,oBAAsB,SAAUb,UACjC7R,KAAK6L,cAAgBF,EAAsBjF,MAAQoL,EAAsBF,GAE1EC,IAGtBV,EAASY,KAAKlN,UAAU8N,YAAc,SAAUd,EAAMe,OAC9CC,SAEJD,EAAWA,GAAY,GACvBC,EAAU7S,KAAK8S,cAAcF,EAAWf,GAIpCC,EAAoBD,IACpBD,EAAegB,KACkB,IAAjCd,EAAoBe,KACpBA,cAAeA,IAGZA,GAGX1B,EAASY,KAAKlN,UAAUiO,cAAgB,SAAAjB,OAEhCkB,EADEC,EAAWnB,EAAK9O,MAAM,KAAKkQ,cAGjCpB,EAAO,GACoB,IAApBmB,EAAS9U,eACZ6U,EAAUC,EAAS5C,WAEV,cAEA,KACoB,IAAhByB,EAAK3T,QAA4C,OAA1B2T,EAAKA,EAAK3T,OAAS,GAC3C2T,EAAKzQ,KAAM2R,GAEXlB,EAAKzB,oBAITyB,EAAKzQ,KAAK2R,UAKflB,EAAKvQ,KAAK,YCzJrB,SAAS4R,EAAcC,SACZ,CACHC,MAAO,GACPnS,IAAK,SAASuO,EAAM6D,GAGhB7D,EAAOA,EAAKvK,cAERjF,KAAKoT,MAAMxW,eAAe4S,QAGzB4D,MAAM5D,GAAQ6D,GAEvBC,YAAa,SAASC,cAClBtT,OAAOuT,KAAKD,GAAW5S,QACnB,SAAA6O,GACIiE,EAAKxS,IAAIuO,EAAM+D,EAAU/D,OAGrCrP,IAAK,SAASqP,UACHxP,KAAKoT,MAAM5D,IAAW2D,GAAQA,EAAKhT,IAAKqP,IAEnDkE,kBAAmB,kBACR1T,KAAKoT,OAEhBO,QAAS,kBACET,EAAclT,OAEzBgJ,OAAQ,SAASmK,UACND,EAAaC,KAKjBD,CAAc,MChCvBU,EAAc,CAChBxO,KAAM,eACIV,EAAI1E,KAAK6T,OACThV,EAAImB,KAAK8T,UACXjV,QACMA,KAED,MAAL6F,SACOA,EAAIoK,EAAQC,KAAOD,EAAQE,OAG1CxN,MAAO,SAAUkD,QACRmP,OAASnP,GAElB0I,MAAO,SAAUvO,QACRiV,OAASjV,GAElBkV,MAAO,gBACEF,OAAS7T,KAAK8T,OAAS,SAIrB,SAAaF,EAAYxO,KAAK4O,KAAKJ,ICV5CK,yBACUC,EAAWC,EAAOC,EAAetO,4BACpCoO,UAAYA,IACZC,MAAQA,IACRE,SAAW,KACXC,WAAa,OACbC,YAAc,OACdH,cAAgBA,IAChBrO,mBAAmBD,KACnBsJ,WAAY,IAEZpJ,UAAUyN,EAAKS,kBACflO,UAAUyN,EAAKU,4BAZN3U,qDAiBP,iCAGJiC,GACCzB,KAAK0R,WACAA,MAAQjQ,EAAQuM,WAAWhO,KAAK0R,OAAO,GACrC1R,KAAKkU,iBACPA,UAAYzS,EAAQuM,WAAWhO,KAAKkU,YAEzClU,KAAKmU,OAASnU,KAAKmU,MAAMjW,cACpBiW,MAAQ1S,EAAQuM,WAAWhO,KAAKmU,qCAIxCrT,OAEGoT,EACAM,EACAC,EACApS,EACAqS,EACAC,GAAwB,KAExB3U,KAAKkU,YAAcM,EAASxU,KAAKkU,UAAUhW,QAAS,KACpDgW,EAAY,IAAIzT,MAAM+T,GACtBZ,EAAYxG,MAAM,CACdhL,KAAM,SACNmK,QAAS,6DAGRlK,EAAI,EAAGA,EAAImS,EAAQnS,IAAK,CACzBoS,EAAWzU,KAAKkU,UAAU7R,GAAG+C,KAAKtE,OAC7B,IAAI8T,EAAI,EAAGA,EAAIH,EAAS/G,SAASxP,OAAQ0W,OACtCH,EAAS/G,SAASkH,GAAGhP,WAAY,CACjC8O,GAAc,QAItBR,EAAU7R,GAAKoS,EACXA,EAAS5G,iBACT8G,GAAwB,MAI5BD,EAAa,KACPG,EAAmB,IAAIpU,MAAM+T,OAC9BnS,EAAI,EAAGA,EAAImS,EAAQnS,IACpBoS,EAAWP,EAAU7R,GACrBwS,EAAiBxS,GAAKoS,EAAStR,MAAMrC,QAEpChE,MAAMsR,UACPyG,EAAiBvT,KAAK,KACtB,CAAC,aACD4S,EAAU,GAAG7T,WACb6T,EAAU,GAAG9T,WACb,SAAC+H,EAAK4D,GACEA,IACAmI,EAAY5W,EAAmByO,MAK/C6H,EAAYG,aAEZY,GAAwB,MAKxBG,EACAC,EAHAZ,EAAQnU,KAAKmU,MAAQ7W,EAAgB0C,KAAKmU,OAAS,KACjDa,EAAU,IAAIf,EAAQC,EAAWC,EAAOnU,KAAKoU,cAAepU,KAAK8F,kBAIvEkP,EAAQC,gBAAkBjV,KAC1BgV,EAAQE,KAAOlV,KAAKkV,KACpBF,EAAQG,UAAYnV,KAAKmV,UACzBH,EAAQI,aAAepV,KAAKoV,aAExBpV,KAAKqQ,YACL2E,EAAQ3E,UAAYrQ,KAAKqQ,WAGxBsE,IACDR,EAAMjW,OAAS,GAKnB8W,EAAQK,iBAAoB,SAAArD,WAGpBjF,EAFA1K,EAAI,EACFuI,EAAIoH,EAAO9T,OAETmE,IAAMuI,IAAMvI,KAChB0K,EAAQiF,EAAQ3P,GAAIgT,wBACEtI,SAEnBuI,EARiB,CASzBxU,EAAQkR,QAAQ2B,cAGb4B,EAAYzU,EAAQkR,OAC1BuD,EAAUC,QAAQR,OAGdS,EAAe3U,EAAQoT,UACtBuB,IACD3U,EAAQoT,UAAYuB,EAAe,IAEvCA,EAAaD,QAAQxV,KAAKkU,YAGtBc,EAAQE,MAAQF,EAAQI,eAAiBJ,EAAQZ,gBACjDY,EAAQU,YAAY5U,OAKlB6U,EAAUX,EAAQb,UACnB9R,EAAI,EAAIyS,EAAOa,EAAQtT,GAAKA,IACzByS,EAAKc,YACLD,EAAQtT,GAAKyS,EAAK1P,KAAKtE,QAIzB+U,EAAmB/U,EAAQgV,aAAehV,EAAQgV,YAAY5X,QAAW,MAG1EmE,EAAI,EAAIyS,EAAOa,EAAQtT,GAAKA,IACX,cAAdyS,EAAK1S,MAEL+R,EAAQW,EAAK1P,KAAKtE,GAASiV,OAAO,SAAA/S,WACzBA,aAAauM,GAAgBvM,EAAE4M,YAIvBoF,EAAQpF,SAAS5M,EAAEwM,QAIpCmG,EAAQK,aAARL,IAAkB,CAACtT,EAAG,GAAGwB,OAAOsQ,KAChC9R,GAAK8R,EAAMjW,OAAS,EACpB8W,EAAQiB,cACc,iBAAfnB,EAAK1S,OAEZ+R,EAAQW,EAAK1P,KAAKtE,GAASqT,MAAM4B,OAAO,SAAA/S,WAC/BA,aAAauM,GAAgBvM,EAAE4M,YAMxC+F,EAAQK,aAARL,IAAkB,CAACtT,EAAG,GAAGwB,OAAOsQ,KAChC9R,GAAK8R,EAAMjW,OAAS,EACpB8W,EAAQiB,kBAKX5T,EAAI,EAAIyS,EAAOa,EAAQtT,GAAKA,IACxByS,EAAKc,YACND,EAAQtT,GAAKyS,EAAOA,EAAK1P,KAAO0P,EAAK1P,KAAKtE,GAAWgU,OAKxDzS,EAAI,EAAIyS,EAAOa,EAAQtT,GAAKA,OAEzByS,aAAgBb,GAAWa,EAAKZ,WAAuC,IAA1BY,EAAKZ,UAAUhW,QAExD4W,EAAKZ,UAAU,IAAMY,EAAKZ,UAAU,GAAGgC,uBAAwB,CAC/DP,EAAQK,OAAO3T,IAAK,OAEXuS,EAAI,EAAIG,EAAUD,EAAKX,MAAMS,GAAKA,IACnCG,aAAmBvV,IACnBuV,EAAQhP,mBAAmB+O,EAAKhP,kBAC1BiP,aAAmBxF,GAAiBwF,EAAQnF,UAC9C+F,EAAQK,SAAS3T,EAAG,EAAG0S,OAS/CQ,EAAU7G,QACV+G,EAAa/G,QAET5N,EAAQgV,gBACHzT,EAAIwT,EAAiBxT,EAAIvB,EAAQgV,YAAY5X,OAAQmE,IACtDvB,EAAQgV,YAAYzT,GAAG8T,gBAAgBjC,UAIxCc,sCAGClU,OAEJuB,EACA+T,EAFEjC,EAAQnU,KAAKmU,SAGdA,MAEA9R,EAAI,EAAGA,EAAI8R,EAAMjW,OAAQmE,IACJ,WAAlB8R,EAAM9R,GAAGD,QACTgU,EAAcjC,EAAM9R,GAAG+C,KAAKtE,MACRsV,EAAYlY,QAAiC,IAAvBkY,EAAYlY,SAClDiW,EAAM6B,aAAN7B,IAAgB,CAAC9R,EAAG,GAAGwB,OAAOuS,KAC9B/T,GAAK+T,EAAYlY,OAAS,GAE1BiW,EAAM6B,OAAO3T,EAAG,EAAG+T,QAElBH,6DAME,IAAIhC,EAAQjU,KAAKkU,UAAWlU,KAAKmU,MAAMxR,IAAI,SAAAK,UAClDA,EAAEqT,cACKrT,EAAEqT,gBAEFrT,IAEXhD,KAAKoU,cAAepU,KAAK8F,oDAKvBtC,UACEA,GAAwB,IAAhBA,EAAKtF,8CAIVsF,EAAM1C,OACXwV,EAAetW,KAAKkU,UAAUlU,KAAKkU,UAAUhW,OAAS,WACvDoY,EAAazI,kBAGdyI,EAAa1I,YACZ0I,EAAa1I,UAAUxI,KACpB,IAAI+L,EAASY,KAAKjR,EACdA,EAAQkR,oDAOfuE,UAAY,UACZjC,WAAa,UACbC,YAAc,UACdF,SAAW,8CAIXrU,KAAKsU,kBACDA,WAActU,KAAKmU,MAAanU,KAAKmU,MAAMqC,OAAO,SAACC,EAAMzT,MACtDA,aAAauM,IAA8B,IAAfvM,EAAE4M,WAC9B6G,EAAKzT,EAAEwM,MAAQxM,GAKJ,WAAXA,EAAEZ,MAAqBY,EAAEkS,MAAQlS,EAAEkS,KAAKwB,UAAW,KAC7CC,EAAO3T,EAAEkS,KAAKwB,gBACf,IAAMlH,KAAQmH,EACXA,EAAK/Z,eAAe4S,KACpBiH,EAAKjH,GAAQxM,EAAEkS,KAAKtF,SAASJ,WAIlCiH,GACR,IAhB6B,IAkB7BzW,KAAKsU,uDAIPtU,KAAKuU,mBACDA,YAAevU,KAAKmU,MAAanU,KAAKmU,MAAMqC,OAAO,SAACC,EAAMzT,MACvDA,aAAauM,IAA8B,IAAfvM,EAAE4M,SAAmB,KAC3CJ,EAA0B,IAAlBxM,EAAEwM,KAAKtR,QAAkB8E,EAAEwM,KAAK,aAAcV,EACxD9L,EAAEwM,KAAK,GAAGhO,MAAQwB,EAAEwM,KAEnBiH,aAASjH,IAIViH,aAASjH,IAAQpO,KAAK4B,GAHtByT,aAASjH,IAAU,CAAExM,UAMtByT,GACR,IAb8B,IAe9BzW,KAAKuU,6CAGP/E,OACCoH,EAAO5W,KAAK0W,YAAYlH,MAC1BoH,SACO5W,KAAK6W,WAAWD,oCAItBpH,OACCoH,EAAO5W,KAAK8W,aAAatH,MAC3BoH,SACO5W,KAAK6W,WAAWD,iDAKtB,IAAIvU,EAAIrC,KAAKmU,MAAMjW,OAAQmE,EAAI,EAAGA,IAAK,KAClCuU,EAAO5W,KAAKmU,MAAM9R,EAAI,MACxBuU,aAAgBrH,SACTvP,KAAK6W,WAAWD,uCAKxBG,OACDhX,EAAOC,cACJgX,EAAqBJ,UACtBA,EAAKpV,iBAAiByN,IAAc2H,EAAK9W,QACT,iBAArB8W,EAAKpV,MAAMA,WACb1E,MAAMsR,UACPwI,EAAKpV,MAAMA,MACX,CAAC,QAAS,aACVoV,EAAKpV,MAAMnB,WACXuW,EAAKxW,WACL,SAAC+H,EAAK4D,GACE5D,IACAyO,EAAK9W,QAAS,GAEdiM,IACA6K,EAAKpV,MAAQuK,EAAO,GACpB6K,EAAKnH,UAAY1D,EAAO,IAAM,GAC9B6K,EAAK9W,QAAS,KAI1B8W,EAAK9W,QAAS,EAGX8W,GAGAA,KAGVnW,MAAMC,QAAQqW,GAGd,KACKzW,EAAQ,UACdyW,EAAQpW,QAAQ,SAAAiK,GACZtK,EAAMc,KAAK4V,EAAqB/M,KAAKlK,EAAM6K,MAExCtK,SAPA0W,EAAqB/M,KAAKlK,EAAMgX,0CAYtC/W,KAAKmU,YAAgB,OAItB9R,EACAyS,EAHEmC,EAAY,GACZ9C,EAAQnU,KAAKmU,UAId9R,EAAI,EAAIyS,EAAOX,EAAM9R,GAAKA,IACvByS,EAAKoC,WACLD,EAAU7V,KAAK0T,UAIhBmC,sCAGCnC,OACFX,EAAQnU,KAAKmU,MACfA,EACAA,EAAMqB,QAAQV,QAETX,MAAQ,CAAEW,QAEd9O,UAAU8O,EAAM9U,mCAGpByU,OAEG/R,EACAyU,EAHOpX,yDAAOC,KAAM+V,yCAClB5B,EAAQ,GAGRnP,EAAMyP,EAAStR,eAEjB6B,KAAOhF,KAAKqU,SAAmBrU,KAAKqU,SAASrP,SAE5CoS,WAAWzW,QAAQ,SAAAmU,MAChBA,IAAS/U,MACJ,IAAI6U,EAAI,EAAGA,EAAIE,EAAKZ,UAAUhW,OAAQ0W,OACvClS,EAAQ+R,EAAS/R,MAAMoS,EAAKZ,UAAUU,IAC3B,IACHH,EAAS/G,SAASxP,OAASwE,OACtBqT,GAAUA,EAAOjB,GAAO,CACzBqC,EAAcrC,EAAKuC,KAAK,IAAI5J,EAASgH,EAAS/G,SAASxI,MAAMxC,IAAS3C,EAAMgW,OACvE,IAAI1T,EAAI,EAAGA,EAAI8U,EAAYjZ,SAAUmE,EACtC8U,EAAY9U,GAAGwP,KAAKzQ,KAAK0T,GAE7BrU,MAAMoE,UAAUzD,KAAKkW,MAAMnD,EAAOgD,SAGtChD,EAAM/S,KAAK,CAAE0T,KAAAA,EAAMjD,KAAM,mBAOxCwC,SAASrP,GAAOmP,EACdA,kCAGJrT,EAASS,OACRc,EACAuS,EAKJvE,EAEIyE,EACAjD,EANA0F,EAAY,GAQhBzW,EAAQ0W,SAAY1W,EAAQ0W,UAAY,EAEnCxX,KAAKkV,MACNpU,EAAQ0W,eAKRC,EAFEC,EAAa5W,EAAQyC,SAAW,GAAK9C,MAAMK,EAAQ0W,SAAW,GAAGlW,KAAK,MACtEqW,EAAY7W,EAAQyC,SAAW,GAAK9C,MAAMK,EAAQ0W,UAAUlW,KAAK,MAGnEsW,EAAmB,EACnBC,EAAkB,MACjBxV,EAAI,EAAIyS,EAAO9U,KAAKmU,MAAM9R,GAAKA,IAC5ByS,aAAgB/D,GACZ8G,IAAoBxV,GACpBwV,IAEJN,EAAUnW,KAAK0T,IACRA,EAAKgD,WAAahD,EAAKgD,aAC9BP,EAAUvB,OAAO4B,EAAkB,EAAG9C,GACtC8C,IACAC,KACqB,WAAd/C,EAAK1S,MACZmV,EAAUvB,OAAO6B,EAAiB,EAAG/C,GACrC+C,KAEAN,EAAUnW,KAAK0T,MAGvByC,EAtCyB,GAsCI1T,OAAO0T,IAI/BvX,KAAKkV,KAAM,EACZ7E,EAAYY,EAAanQ,EAASd,KAAM2X,MAGpCpW,EAAON,IAAIoP,GACX9O,EAAON,IAAI0W,QAKXI,EAFErG,EAAQ1R,KAAK0R,MACbsG,EAAUtG,EAAMxT,WAGtBuZ,EAAM3W,EAAQyC,SAAW,iBAAaoU,GAEjCtV,EAAI,EAAGA,EAAI2V,EAAS3V,OAEf0V,GADNlG,EAAOH,EAAMrP,IACWnE,WACpBmE,EAAI,GAAKd,EAAON,IAAIwW,GAExB3W,EAAQoF,eAAgB,EACxB2L,EAAK,GAAG7Q,OAAOF,EAASS,GAExBT,EAAQoF,eAAgB,EACnB0O,EAAI,EAAGA,EAAImD,EAAYnD,IACxB/C,EAAK+C,GAAG5T,OAAOF,EAASS,GAIhCA,EAAON,KAAKH,EAAQyC,SAAW,IAAM,QAAUmU,OAI9CrV,EAAI,EAAIyS,EAAOyC,EAAUlV,GAAKA,IAAK,CAEhCA,EAAI,IAAMkV,EAAUrZ,SACpB4C,EAAQ+O,UAAW,OAGjBoI,EAAkBnX,EAAQ+O,SAC5BiF,EAAKoD,cAAcpD,KACnBhU,EAAQ+O,UAAW,GAGnBiF,EAAK9T,OACL8T,EAAK9T,OAAOF,EAASS,GACduT,EAAKtT,OACZD,EAAON,IAAI6T,EAAKtT,MAAMoD,YAG1B9D,EAAQ+O,SAAWoI,GAEdnX,EAAQ+O,UAAYiF,EAAKqD,YAC1B5W,EAAON,IAAIH,EAAQyC,SAAW,eAAWmU,IAEzC5W,EAAQ+O,UAAW,EAItB7P,KAAKkV,OACN3T,EAAON,IAAKH,EAAQyC,SAAW,gBAAWoU,QAC1C7W,EAAQ0W,YAGPjW,EAAOF,WAAcP,EAAQyC,WAAYvD,KAAKmV,WAC/C5T,EAAON,IAAI,4CAILyQ,EAAO5Q,EAASoT,OACrB,IAAIlQ,EAAI,EAAGA,EAAIkQ,EAAUhW,OAAQ8F,SAC7BoU,aAAa1G,EAAO5Q,EAASoT,EAAUlQ,yCAIvC0N,EAAO5Q,EAAS2T,YAChB4D,EAAkBC,EAAeC,OAClCC,EACA5D,KACyB,IAAzB0D,EAAcpa,OACdsa,EAAmB,IAAIrT,EAAMmT,EAAc,QACxC,KACGG,EAAe,IAAIhY,MAAM6X,EAAcpa,YACxC0W,EAAI,EAAGA,EAAI0D,EAAcpa,OAAQ0W,IAClC6D,EAAa7D,GAAK,IAAIlP,EAClB,KACA4S,EAAc1D,GACd2D,EAAgB3S,WAChB2S,EAAgB3X,OAChB2X,EAAgB1X,WAGxB2X,EAAmB,IAAIrT,EAAM,IAAIsI,EAASgL,WAEvCD,WAGFE,EAAeC,EAAkBJ,OAClCK,SAEJA,EAAU,IAAIlT,EAAQ,KAAMiT,EAAkBJ,EAAgB3S,WAAY2S,EAAgB3X,OAAQ2X,EAAgB1X,WACvG,IAAI4M,EAAS,CAACmL,aAOpBC,EAAuBC,EAAeC,EAASC,EAAiBC,OACjEC,EACA5C,EACA6C,KAEJD,EAAkB,GAIdJ,EAAc5a,OAAS,GAEvBoY,GADA4C,EAAkB5b,EAAgBwb,IACH1I,MAC/B+I,EAAoBF,EAAiBrK,cAActR,EAAgBgZ,EAAa5I,YAGhFyL,EAAoBF,EAAiBrK,cAAc,IAGnDmK,EAAQ7a,OAAS,EAAG,KAMhByH,EAAaqT,EAAgBrT,WAE3ByT,EAAWL,EAAQ,GAAGrL,SAAS,GACjC/H,EAAWL,oBAAsB8T,EAASzT,WAAWL,oBACrDK,EAAayT,EAASzT,YAG1BwT,EAAkBzL,SAAStM,KAAK,IAAIsE,EAChCC,EACAyT,EAAS5X,MACTwX,EAAgBpT,WAChBoT,EAAgBpY,OAChBoY,EAAgBnY,YAEpBsY,EAAkBzL,SAAWyL,EAAkBzL,SAAS7J,OAAOkV,EAAQ,GAAGrL,SAASxI,MAAM,OAInD,IAAtCiU,EAAkBzL,SAASxP,QAC3Bgb,EAAgB9X,KAAK+X,GAIrBJ,EAAQ7a,OAAS,EAAG,KAChBmb,EAAaN,EAAQ7T,MAAM,GAC/BmU,EAAaA,EAAW1W,IAAI,SAAA8R,UAAYA,EAAS7F,cAAc6F,EAAS/G,SAAU,MAClFwL,EAAkBA,EAAgBrV,OAAOwV,UAEtCH,WAMFI,EAA4BR,EAAeS,EAAUP,EAAiBC,EAAkBlN,OACzF6I,MACCA,EAAI,EAAGA,EAAIkE,EAAc5a,OAAQ0W,IAAK,KACjCsE,EAAkBL,EAAuBC,EAAclE,GAAI2E,EAAUP,EAAiBC,GAC5FlN,EAAO3K,KAAK8X,UAETnN,WAGFyN,EAA2B9L,EAAUwG,OACtC7R,EACAoX,KAEoB,IAApB/L,EAASxP,UAGY,IAArBgW,EAAUhW,WAKTmE,EAAI,EAAIoX,EAAMvF,EAAU7R,GAAKA,IAE1BoX,EAAIvb,OAAS,EACbub,EAAIA,EAAIvb,OAAS,GAAKub,EAAIA,EAAIvb,OAAS,GAAG0Q,cAAc6K,EAAIA,EAAIvb,OAAS,GAAGwP,SAAS7J,OAAO6J,IAG5F+L,EAAIrY,KAAK,IAAIqM,EAASC,SAV1BwG,EAAU9S,KAAK,CAAE,IAAIqM,EAASC,cAiJ7BgM,EAAe5T,EAAgB6T,OAC9B1L,EAAc0L,EAAW/K,cAAc+K,EAAWjM,SAAUiM,EAAWhM,WAAYgM,EAAW9L,uBACpGI,EAAYlI,mBAAmBD,GACxBmI,MAIP5L,EAEAuX,eAxIKC,EAAsBnI,EAAO5Q,EAASgZ,OAWvCzX,EAEAuS,EACAmF,EACAC,EACAC,EACAC,EACAT,EACAU,EAEAjc,EACAoY,EACwBsC,EACpBwB,EAJJC,GAAoB,MAkBxBL,EAAkB,GAIlBC,EAAe,CACX,IAGC5X,EAAI,EAAI8X,EAAKL,EAAWpM,SAASrL,GAAKA,OAEtB,MAAb8X,EAAG3Y,MAAe,KACZ8Y,GAzBNF,OAAAA,GADoBxB,EA0BsBuB,GAxBhC3Y,iBAAiB2D,IAI/BiV,EAAgBxB,EAAQpX,MAAMA,iBACCiM,EAIxB2M,EARI,SAwBe,MAAlBE,EAAwB,CAGxBd,EAA2BQ,EAAiBC,OAGxCM,EADEC,EAAc,GAEdC,EAAuB,OAC7BF,EAAWV,EAAsBW,EAAa1Z,EAASwZ,GACvDD,EAAoBA,GAAqBE,EAEpCR,EAAI,EAAGA,EAAIS,EAAYtc,OAAQ6b,IAEhCT,EAA2BW,EAAc,CADbvB,EAAeL,EAAkBmC,EAAYT,GAAII,GAAKA,IAClBA,EAAIL,EAAYW,GAEpFR,EAAeQ,EACfT,EAAkB,QAElBA,EAAgB5Y,KAAK+Y,OAGtB,KACHE,GAAoB,EAEpBH,EAAsB,GAItBV,EAA2BQ,EAAiBC,GAGvCrF,EAAI,EAAGA,EAAIqF,EAAa/b,OAAQ0W,OACjC6E,EAAMQ,EAAarF,GAGI,IAAnB9T,EAAQ5C,OAGJub,EAAIvb,OAAS,GACbub,EAAI,GAAG/L,SAAStM,KAAK,IAAIsE,EAAQyU,EAAGxU,WAAY,GAAIwU,EAAGvU,WAAYuU,EAAGvZ,OAAQuZ,EAAGtZ,YAErFqZ,EAAoB9Y,KAAKqY,YAIpBM,EAAI,EAAGA,EAAIjZ,EAAQ5C,OAAQ6b,IAAK,KAG3Bb,EAAkBL,EAAuBY,EAAK3Y,EAAQiZ,GAAII,EAAIL,GAEpEI,EAAoB9Y,KAAK8X,GAMrCe,EAAeC,EACfF,EAAkB,OAM1BR,EAA2BQ,EAAiBC,GAEvC5X,EAAI,EAAGA,EAAI4X,EAAa/b,OAAQmE,KACjCnE,EAAS+b,EAAa5X,GAAGnE,QACZ,IACTwT,EAAMtQ,KAAK6Y,EAAa5X,IACxBiU,EAAe2D,EAAa5X,GAAGnE,EAAS,GACxC+b,EAAa5X,GAAGnE,EAAS,GAAKoY,EAAa1H,cAAc0H,EAAa5I,SAAUoM,EAAWnM,oBAI5F0M,EAgBSR,CADpBD,EAAW,GACyC9Y,EAAS2T,MAGrD3T,EAAQ5C,OAAS,MACjB0b,EAAW,GACNvX,EAAI,EAAGA,EAAIvB,EAAQ5C,OAAQmE,IAAK,KAE3BqY,EAAe5Z,EAAQuB,GAAGM,IAAI+W,EAAe1F,KAAKhU,KAAMyU,EAAS3O,mBAEvE4U,EAAatZ,KAAKqT,GAClBmF,EAASxY,KAAKsZ,QAIlBd,EAAW,CAAC,CAACnF,QAIhBpS,EAAI,EAAGA,EAAIuX,EAAS1b,OAAQmE,IAC7BqP,EAAMtQ,KAAKwY,EAASvX,aAKhC4R,EAAQpP,UAAUzC,KAAO,UACzB6R,EAAQpP,UAAUqS,WAAY,MC11BxByD,yBAEEnL,EACAhO,EACA2S,EACAhT,EACA0E,EACAwK,EACAuK,EACA9U,SAEIzD,iBAECmN,KAAQA,IACRhO,MAASA,aAAiBhC,EAAQgC,EAASA,EAAQ,IAAIyN,EAAUzN,GAASA,EAC3E2S,EAAO,KACH1T,MAAMC,QAAQyT,KACTA,MAAQA,KAERA,MAAQ,CAACA,KACTA,MAAM,GAAGD,UAAa,IAAIzG,EAAS,GAAI,KAAM,KAAMtM,EAAO0E,GAAkBgV,wBAEhFxY,EAAI,EAAGA,EAAIoR,EAAKU,MAAMjW,OAAQmE,MAC1B8R,MAAM9R,GAAG+S,cAAe,IAE5BpP,UAAUyN,EAAKU,qBAEnBvT,OAASO,IACTN,UAAYgF,IACZwK,UAAYA,IACZuK,SAAWA,IAAY,IACvB7U,mBAAmBD,KACnBsJ,WAAY,kBAhCJ5P,qCAmCViC,OACGD,EAAQxB,KAAKwB,MACb2S,EAAQnU,KAAKmU,MACfA,SACKA,MAAQ1S,EAAQuM,WAAWmG,IAEhC3S,SACKA,MAAQC,EAAQC,MAAMF,mDAKxBxB,KAAKmU,QAAUnU,KAAK8X,sDAIpB,aAAe9X,KAAKwP,oCAGxB1O,EAASS,OACNC,EAAQxB,KAAKwB,MACb2S,EAAQnU,KAAKmU,MACnB5S,EAAON,IAAIjB,KAAKwP,KAAMxP,KAAKI,WAAYJ,KAAKK,YACxCmB,IACAD,EAAON,IAAI,KACXO,EAAMR,OAAOF,EAASS,IAEtB4S,OACK2G,cAAcha,EAASS,EAAQ4S,GAEpC5S,EAAON,IAAI,kCAIdH,OACGia,EACAC,EACAxZ,EAAQxB,KAAKwB,MACb2S,EAAQnU,KAAKmU,aAIjB4G,EAAkBja,EAAQma,UAC1BD,EAAoBla,EAAQgV,YAE5BhV,EAAQma,UAAY,GACpBna,EAAQgV,YAAc,GAElBtU,IACAA,EAAQA,EAAM4D,KAAKtE,IAEnBqT,KAEAA,EAAQ,CAACA,EAAM,GAAG/O,KAAKtE,KACjB,GAAGoU,MAAO,GAGpBpU,EAAQma,UAAYF,EACpBja,EAAQgV,YAAckF,EAEf,IAAIL,EAAO3a,KAAKwP,KAAMhO,EAAO2S,EAChCnU,KAAKK,WAAYL,KAAKI,WAAYJ,KAAKqQ,UAAWrQ,KAAK4a,SAAU5a,KAAK8F,mDAGrE0J,MACDxP,KAAKmU,aAEEF,EAAQpP,UAAU+K,SAAS3F,KAAKjK,KAAKmU,MAAM,GAAI3E,qCAKtDxP,KAAKmU,MAAO,4BADZ3Q,2BAAAA,yBAGOyQ,EAAQpP,UAAUwS,KAAKC,MAAMtX,KAAKmU,MAAM,GAAI3Q,0CAKnDxD,KAAKmU,aAEEF,EAAQpP,UAAUuS,SAASE,MAAMtX,KAAKmU,MAAM,0CAI7CrT,EAASS,EAAQ4S,OAEvB9R,EADE6Y,EAAU/G,EAAMjW,UAEtB4C,EAAQ0W,SAAoC,GAAL,EAAnB1W,EAAQ0W,UAGxB1W,EAAQyC,SAAU,KAClBhC,EAAON,IAAI,KACNoB,EAAI,EAAGA,EAAI6Y,EAAS7Y,IACrB8R,EAAM9R,GAAGrB,OAAOF,EAASS,UAE7BA,EAAON,IAAI,UACXH,EAAQ0W,eAKNG,cAAiBlX,MAAMK,EAAQ0W,UAAUlW,KAAK,OAE9CoW,YAAgBC,WACjBuD,EAEE,KACH3Z,EAAON,gBAASyW,IAChBvD,EAAM,GAAGnT,OAAOF,EAASS,GACpBc,EAAI,EAAGA,EAAI6Y,EAAS7Y,IACrBd,EAAON,IAAIyW,GACXvD,EAAM9R,GAAGrB,OAAOF,EAASS,GAE7BA,EAAON,cAAO0W,aARdpW,EAAON,gBAAS0W,QAWpB7W,EAAQ0W,oBAIhBmD,EAAO9V,UAAUzC,KAAO,aC7JlB+Y,yBACUnG,EAAShD,6BACZgD,QAAUA,WACVhD,OAASA,WACThM,mBAAegP,wCAJExV,qCAOnBiC,QACEuT,QAAUvT,EAAQC,MAAM1B,KAAKgV,sCAGjClU,OACKkR,EAAShS,KAAKgS,QAAU1U,EAAgBwD,EAAQkR,eAC/C,IAAImJ,EAAgBnb,KAAKgV,QAAShD,oCAGpClR,UACEd,KAAKgV,QAAQ5P,KAAKpF,KAAKgS,OAAS,IAAIb,EAASY,KAAKjR,EAASd,KAAKgS,OAAOnO,OAAO/C,EAAQkR,SAAWlR,YAIhHqa,EAAgBtW,UAAUzC,KAAO,kBACjC+Y,EAAgBtW,UAAU+Q,WAAY,MCtBhCwF,0BACUC,EAAWC,EAAaC,6BAC3BF,UAAYA,EAAY/d,EAAgB+d,GAAWG,OAAS,YAC5DF,YAAcA,EAAche,EAAgBge,GAAaE,OAAS,GACnED,WACKA,WAAaA,EACXF,GAAaA,EAAUnd,kBACzBqd,WAAaF,EAAU,yBAPrB7b,6CAYJ,IAAI4b,EAAK9d,EAAgB0C,KAAKqb,WAAY/d,EAAgB0C,KAAKsb,aAActb,KAAKub,2CAGtFza,EAASS,OAENka,EAAc3a,GAAWA,EAAQ2a,YACT,IAA1Bzb,KAAKqb,UAAUnd,OACfqD,EAAON,IAAIjB,KAAKqb,UAAU,KAClBI,GAAezb,KAAKub,WAC5Bha,EAAON,IAAIjB,KAAKub,aACRE,GAAezb,KAAKsb,YAAYpd,QACxCqD,EAAON,IAAIjB,KAAKsb,YAAY,2CAK5BjZ,EACAqZ,EAAY1b,KAAKqb,UAAU/Z,KAAK,SAC/Be,EAAI,EAAGA,EAAIrC,KAAKsb,YAAYpd,OAAQmE,IACrCqZ,cAAiB1b,KAAKsb,YAAYjZ,WAE/BqZ,kCAGHtX,UACGpE,KAAK2b,GAAGvX,EAAMQ,YAAc,OAAIjF,6BAGxCic,UACQ5b,KAAK4E,WAAWiX,gBAAkBD,EAAWC,wDAI7CvT,OAAO,wDAAyD,MAAMwI,KAAK9Q,KAAKmD,kDAItD,IAA1BnD,KAAKqb,UAAUnd,QAA4C,IAA5B8B,KAAKsb,YAAYpd,mDAIhD8B,KAAKqb,UAAUnd,QAAU,GAAiC,IAA5B8B,KAAKsb,YAAYpd,mCAGtD4d,OACIzZ,MAECA,EAAI,EAAGA,EAAIrC,KAAKqb,UAAUnd,OAAQmE,SAC9BgZ,UAAUhZ,GAAKyZ,EAAS9b,KAAKqb,UAAUhZ,IAAI,OAG/CA,EAAI,EAAGA,EAAIrC,KAAKsb,YAAYpd,OAAQmE,SAChCiZ,YAAYjZ,GAAKyZ,EAAS9b,KAAKsb,YAAYjZ,IAAI,2CAKpD0Z,EAEAC,EACAC,EAFElQ,EAAS,OAaVkQ,KATLD,EAAU,SAAAE,UAEFH,EAAMnf,eAAesf,KAAgBnQ,EAAOkQ,KAC5ClQ,EAAOkQ,GAAaC,GAGjBA,GAGO3c,EACVA,EAAgB3C,eAAeqf,KAC/BF,EAAQxc,EAAgB0c,QAEnBtZ,IAAIqZ,WAIVjQ,uCAKHmQ,EACA7Z,EAFE8Z,EAAU,OAIX9Z,EAAI,EAAGA,EAAIrC,KAAKqb,UAAUnd,OAAQmE,IAEnC8Z,EADAD,EAAalc,KAAKqb,UAAUhZ,KACL8Z,EAAQD,IAAe,GAAK,MAGlD7Z,EAAI,EAAGA,EAAIrC,KAAKsb,YAAYpd,OAAQmE,IAErC8Z,EADAD,EAAalc,KAAKsb,YAAYjZ,KACP8Z,EAAQD,IAAe,GAAK,MAMlDA,UAHAb,UAAY,QACZC,YAAc,GAEAa,KACXA,EAAQvf,eAAesf,GAAa,KAC9BE,EAAQD,EAAQD,MAElBE,EAAQ,MACH/Z,EAAI,EAAGA,EAAI+Z,EAAO/Z,SACdgZ,UAAUja,KAAK8a,QAErB,GAAIE,EAAQ,MACV/Z,EAAI,EAAGA,GAAK+Z,EAAO/Z,SACfiZ,YAAYla,KAAK8a,QAMjCb,UAAUG,YACVF,YAAYE,gBAIzBJ,GAAKvW,UAAUzC,KAAO,WCjIhBia,0BACU7a,EAAO8a,yBACV9a,MAAQ+a,WAAW/a,GACpBgb,eAAWhb,aACL,IAAI1C,MAAM,6CAEfwd,KAAQA,GAAQA,aAAgBlB,GAAQkB,EAC3C,IAAIlB,GAAKkB,EAAO,CAACA,QAAQ3c,YACtBqG,mBAAesW,qCARJ9c,qCAWbiC,QACE6a,KAAO7a,EAAQC,MAAM1B,KAAKsc,mCAG9Bxb,UACMd,8CAIA,IAAIuC,EAAM,CAACvC,KAAKwB,MAAOxB,KAAKwB,MAAOxB,KAAKwB,uCAG5CV,EAASS,MACPT,GAAWA,EAAQ2a,cAAiBzb,KAAKsc,KAAKG,mBACzC,IAAI3d,mGAA4FkB,KAAKsc,KAAK1X,iBAG9GpD,EAAQxB,KAAKyD,OAAO3C,EAASd,KAAKwB,OACpCkb,EAAWC,OAAOnb,MAER,IAAVA,GAAeA,EAAQ,MAAYA,GAAS,OAE5Ckb,EAAWlb,EAAMS,QAAQ,IAAI3F,QAAQ,MAAO,KAG5CwE,GAAWA,EAAQyC,SAAU,IAEf,IAAV/B,GAAexB,KAAKsc,KAAKM,uBACzBrb,EAAON,IAAIyb,GAKXlb,EAAQ,GAAKA,EAAQ,IACrBkb,EAAYA,EAAUlP,OAAO,IAIrCjM,EAAON,IAAIyb,QACNJ,KAAKtb,OAAOF,EAASS,mCAMtBT,EAASa,EAAIyC,OAEb5C,EAAQxB,KAAKqE,SAASvD,EAASa,EAAI3B,KAAKwB,MAAO4C,EAAM5C,OAErD8a,EAAOtc,KAAKsc,KAAK1V,WAEV,MAAPjF,GAAqB,MAAPA,KACgB,IAA1B2a,EAAKjB,UAAUnd,QAA4C,IAA5Boe,EAAKhB,YAAYpd,OAChDoe,EAAOlY,EAAMkY,KAAK1V,QACd5G,KAAKsc,KAAKf,aACVe,EAAKf,WAAavb,KAAKsc,KAAKf,iBAE7B,GAAoC,IAAhCnX,EAAMkY,KAAKjB,UAAUnd,QAA4C,IAA5Boe,EAAKhB,YAAYpd,YAE1D,IACHkG,EAAQA,EAAMyY,UAAU7c,KAAKsc,KAAKQ,aAE9Bhc,EAAQ2a,aAAerX,EAAMkY,KAAK1X,aAAe0X,EAAK1X,iBAChD,IAAI9F,2FAAoFwd,EAAK1X,6BAAoBR,EAAMkY,KAAK1X,kBAGtIpD,EAAQxB,KAAKqE,SAASvD,EAASa,EAAI3B,KAAKwB,MAAO4C,EAAM5C,WAE3C,MAAPG,GACP2a,EAAKjB,UAAYiB,EAAKjB,UAAUxX,OAAOO,EAAMkY,KAAKjB,WAAWG,OAC7Dc,EAAKhB,YAAcgB,EAAKhB,YAAYzX,OAAOO,EAAMkY,KAAKhB,aAAaE,OACnEc,EAAKS,UACS,MAAPpb,IACP2a,EAAKjB,UAAYiB,EAAKjB,UAAUxX,OAAOO,EAAMkY,KAAKhB,aAAaE,OAC/Dc,EAAKhB,YAAcgB,EAAKhB,YAAYzX,OAAOO,EAAMkY,KAAKjB,WAAWG,OACjEc,EAAKS,iBAEF,IAAIV,EAAU7a,EAAO8a,mCAGxBlY,OACAxC,EACAC,KAEEuC,aAAiBiY,MAInBrc,KAAKsc,KAAKjb,WAAa+C,EAAMkY,KAAKjb,UAClCO,EAAI5B,KACJ6B,EAAIuC,UAEJxC,EAAI5B,KAAKgd,QACTnb,EAAIuC,EAAM4Y,QACqB,IAA3Bpb,EAAE0a,KAAKna,QAAQN,EAAEya,oBAKlB9c,EAAK8C,eAAeV,EAAEJ,MAAOK,EAAEL,+CAI/BxB,KAAK6c,UAAU,CAAE3e,OAAQ,KAAMgB,SAAU,IAAKC,MAAO,0CAGtD8d,OAGF5a,EACA4Z,EACAF,EACAmB,EAEAC,EAPA3b,EAAQxB,KAAKwB,MACX8a,EAAOtc,KAAKsc,KAAK1V,QAKnBwW,EAAqB,MAGE,iBAAhBH,EAA0B,KAC5B5a,KAAK9C,EACFA,EAAgB8C,GAAGzF,eAAeqgB,MAClCG,EAAqB,IACF/a,GAAK4a,GAGhCA,EAAcG,MAiBbnB,KAfLkB,EAAY,SAACjB,EAAYZ,UAEjBS,EAAMnf,eAAesf,IACjBZ,EACA9Z,GAAiBua,EAAMG,GAAcH,EAAMmB,GAE3C1b,GAAiBua,EAAMG,GAAcH,EAAMmB,GAGxCA,GAGJhB,GAGOe,EACVA,EAAYrgB,eAAeqf,KAC3BiB,EAAaD,EAAYhB,GACzBF,EAAQxc,EAAgB0c,GAExBK,EAAK3Z,IAAIwa,WAIjBb,EAAKS,SAEE,IAAIV,EAAU7a,EAAO8a,YAIpCD,GAAUxX,UAAUzC,KAAO,YC1K3B,IAAMkN,GAAO3D,EAGP0R,0BACU1b,EAAI2b,EAAUC,6BACjB5b,GAAKA,EAAG4D,gBACR+X,SAAWA,WACXC,SAAWA,uBAJA/d,qCAObiC,QACE6b,SAAW7b,EAAQuM,WAAWhO,KAAKsd,uCAGvCxc,OAGGa,EAFAC,EAAI5B,KAAKsd,SAAS,GAAGlY,KAAKtE,GAC1Be,EAAI7B,KAAKsd,SAAS,GAAGlY,KAAKtE,MAG1BA,EAAQ2R,SAASzS,KAAK2B,IAAK,IAC3BA,EAAiB,OAAZ3B,KAAK2B,GAAc,IAAM3B,KAAK2B,GAC/BC,aAAaya,IAAaxa,aAAaU,IACvCX,EAAIA,EAAE4b,WAEN3b,aAAawa,IAAaza,aAAaW,IACvCV,EAAIA,EAAE2b,YAEL5b,EAAE6b,QAAS,IACR7b,aAAayb,GAAsB,MAATzb,EAAED,IAAcb,EAAQ4K,OAAS4D,GAAKjJ,uBACzD,IAAIgX,EAAUrd,KAAK2B,GAAI,CAACC,EAAGC,GAAI7B,KAAKud,eAEzC,CAAEnb,KAAM,YACVmK,QAAS,uCAGV3K,EAAE6b,QAAQ3c,EAASa,EAAIE,UAEvB,IAAIwb,EAAUrd,KAAK2B,GAAI,CAACC,EAAGC,GAAI7B,KAAKud,yCAI5Czc,EAASS,QACP+b,SAAS,GAAGtc,OAAOF,EAASS,GAC7BvB,KAAKud,UACLhc,EAAON,IAAI,KAEfM,EAAON,IAAIjB,KAAK2B,IACZ3B,KAAKud,UACLhc,EAAON,IAAI,UAEVqc,SAAS,GAAGtc,OAAOF,EAASS,YAIzC8b,GAAUxY,UAAUzC,KAAO,YCrD3B,IAAMkN,GAAO3D,EAEP+R,0BACUlc,EAAOmc,yBACVnc,MAAQA,WACRmc,UAAYA,GACZnc,QACK,IAAI1C,MAAM,sEALHU,qCASdiC,QACED,MAAQC,EAAQuM,WAAWhO,KAAKwB,oCAGpCV,OACG8c,EACEpL,EAAS1R,EAAQ2R,WAEjBJ,EAAgBrS,KAAK6d,SACtB/c,EAAQ4K,OAAS4D,GAAK/I,gBAAkBvG,KAAK8d,YAE9CC,GAAc,SACd1L,GACAvR,EAAQuR,gBAERrS,KAAKwB,MAAMtD,OAAS,EACpB0f,EAAc,IAAIF,EAAW1d,KAAKwB,MAAMmB,IAAI,SAAA9D,UACnCA,EAAEuG,KAGAvG,EAAEuG,KAAKtE,GAFHjC,IAGXmB,KAAK2d,WACoB,IAAtB3d,KAAKwB,MAAMtD,SACd8B,KAAKwB,MAAM,GAAGqc,QAAW7d,KAAKwB,MAAM,GAAGsc,YAAehd,EAAQqR,SAC9D4L,GAAc,GAElBH,EAAc5d,KAAKwB,MAAM,GAAG4D,KAAKtE,IAEjC8c,EAAc5d,KAEdqS,GACAvR,EAAQyR,oBAERvS,KAAK6d,SAAU7d,KAAK8d,YAAetL,GAAWuL,GACxCH,aAAuBvB,KAC7BuB,EAAc,IAAIzY,EAAMyY,IAErBA,iCAGJ9c,EAASS,OACP,IAAIc,EAAI,EAAGA,EAAIrC,KAAKwB,MAAMtD,OAAQmE,SAC9Bb,MAAMa,GAAGrB,OAAOF,EAASS,IACzBvB,KAAK2d,WAAatb,EAAI,EAAIrC,KAAKwB,MAAMtD,QACtCqD,EAAON,IAAI,sDAMdO,MAAQxB,KAAKwB,MAAMuU,OAAO,SAAArR,WAAOA,aAAaqM,cAI3D2M,GAAW7Y,UAAUzC,KAAO,iBCpEtB4b,yBACUxO,EAAM1O,EAASK,EAAO0E,kBACzB2J,KAAOA,EAAKvK,mBACZ9D,MAAQA,OACRL,QAAUA,OACV+E,gBAAkBA,OAElBwN,KAAOvS,EAAQkR,OAAO,GAAGqD,iBAAiBlV,IAAIH,KAAKwP,yDAIjDH,QAAQrP,KAAKqT,mCAGnB7P,UAGG/C,MAAMC,QAAQ8C,KACdA,EAAOA,EAAKuS,OAAO,SAAAkI,SACG,YAAdA,EAAK7b,OAKZO,IAAI,SAAAsb,MACiB,eAAdA,EAAK7b,KAAuB,KACtB8b,EAAWD,EAAKzc,MAAMuU,OAAO,SAAAkI,SACb,YAAdA,EAAK7b,cAKW,IAApB8b,EAAShgB,OACFggB,EAAS,GAET,IAAIR,GAAWQ,UAGvBD,KAIRje,KAAKqT,kBAAQ7P,aCrCtB2a,0BACU3O,EAAMhM,EAAMrC,EAAO0E,6BACtB2J,KAAOA,WACPhM,KAAOA,WACP4a,KAAgB,SAAT5O,WACP5O,OAASO,WACTN,UAAYgF,uBANNrG,qCASRiC,GACCzB,KAAKwD,YACAA,KAAO/B,EAAQuM,WAAWhO,KAAKwD,oCAevC1C,OAIKud,EAAqBvd,EAAQ0R,OACnC1R,EAAQ0R,QAAUxS,KAAKoe,MACnBpe,KAAKoe,MAAQtd,EAAQqR,SACrBrR,EAAQmR,gBAQRlG,EANEvI,EAAOxD,KAAKwD,KAAKb,IAAI,SAAAf,UAAKA,EAAEwD,KAAKtE,MACnCd,KAAKoe,MAAQtd,EAAQqR,SACrBrR,EAAQsR,WAEZtR,EAAQ0R,OAAS6L,MAGXC,EAAa,IAAIC,GAAeve,KAAKwP,KAAM1O,EAASd,KAAKK,WAAYL,KAAKI,eAE5Eke,EAAWE,UAAW,KAElBzS,EAASuS,EAAWrU,KAAKzG,GAC3B,MAAO3E,QACC,CACFuD,KAAMvD,EAAEuD,MAAQ,UAChBmK,6CAAwCvM,KAAKwP,iBAAS3Q,EAAE0N,oBAAe1N,EAAE0N,SAAY,IACrFpL,MAAOnB,KAAKK,WACZiM,SAAUtM,KAAKI,WAAWkM,SAC1BzB,KAAMhM,EAAE8R,WACR7F,OAAQjM,EAAE4f,iBAId1S,MAAAA,SAGMA,aAAkBvM,IAKhBuM,EAAS,IAAIkD,EAJZlD,IAAqB,IAAXA,EAIYA,EAAOnH,WAHP,OAO/BmH,EAAOnL,OAASZ,KAAKY,OACrBmL,EAAOlL,UAAYb,KAAKa,UACjBkL,SAKR,IAAIoS,EAAKne,KAAKwP,KAAMhM,EAAMxD,KAAKK,WAAYL,KAAKI,2CAGpDU,EAASS,GACZA,EAAON,cAAOjB,KAAKwP,UAASxP,KAAKI,WAAYJ,KAAKK,gBAE7C,IAAIgC,EAAI,EAAGA,EAAIrC,KAAKwD,KAAKtF,OAAQmE,SAC7BmB,KAAKnB,GAAGrB,OAAOF,EAASS,GACzBc,EAAI,EAAIrC,KAAKwD,KAAKtF,QAClBqD,EAAON,IAAI,MAInBM,EAAON,IAAI,cAInBkd,GAAKtZ,UAAUzC,KAAO,WClGhBsc,0BACUlP,EAAMrO,EAAO0E,6BAChB2J,KAAOA,WACP5O,OAASO,WACTN,UAAYgF,uBAJFrG,mCAOdsB,OACG8O,EACAJ,EAAOxP,KAAKwP,QAEW,IAAvBA,EAAK9L,QAAQ,QACb8L,aAAW,IAAIkP,EAASlP,EAAKtK,MAAM,GAAIlF,KAAKK,WAAYL,KAAKI,YAAYgF,KAAKtE,GAASU,QAGvFxB,KAAK2e,gBACC,CAAEvc,KAAM,OACVmK,oDAA8CiD,GAC9ClD,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,oBAGfse,YAAa,EAElB/O,EAAW5P,KAAKqX,KAAKvW,EAAQkR,OAAQ,SAAA4M,OAC3Bla,EAAIka,EAAMhP,SAASJ,MACrB9K,EAAG,IACCA,EAAE+K,UACqB3O,EAAQoP,eAAepP,EAAQoP,eAAehS,OAAS,GAC/DuR,UAAY/K,EAAE+K,iBAG7B3O,EAAQqR,OACA,IAAIgM,GAAK,QAAS,CAACzZ,EAAElD,QAAS4D,KAAKtE,GAGpC4D,EAAElD,MAAM4D,KAAKtE,kBAKvB6d,YAAa,EACX/O,OAED,CAAExN,KAAM,OACVmK,2BAAqBiD,mBACrBlD,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,yCAInByG,EAAK+X,OACD,IAAW7b,EAAPX,EAAI,EAAMA,EAAIyE,EAAI5I,OAAQmE,OAC/BW,EAAI6b,EAAI5U,KAAKnD,EAAKA,EAAIzE,WACNW,SAEb,cAIf0b,GAAS7Z,UAAUzC,KAAO,eC5DpB0c,0BACUtP,EAAMrO,EAAO0E,6BAChB2J,KAAOA,WACP5O,OAASO,WACTN,UAAYgF,uBAJFrG,mCAOdsB,OACGie,EACEvP,EAAOxP,KAAKwP,KAEZwP,EAAale,EAAQme,cAAcC,KAAKC,SAASC,aAAava,UAAUwa,eAE1Erf,KAAK2e,gBACC,CAAEvc,KAAM,OACVmK,mDAA6CiD,GAC7ClD,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,oBAGfse,YAAa,EAElBI,EAAW/e,KAAKqX,KAAKvW,EAAQkR,OAAQ,SAAA4M,OAC7Bla,EACE4a,EAAOV,EAAMG,SAASvP,MACxB8P,EAAM,KACD,IAAIjd,EAAI,EAAGA,EAAIid,EAAKphB,OAAQmE,IAC7BqC,EAAI4a,EAAKjd,GAETid,EAAKjd,GAAK,IAAIkN,EAAY7K,EAAE8K,KACxB9K,EAAElD,MACFkD,EAAE+K,UACF/K,EAAEgL,MACFhL,EAAEvD,MACFuD,EAAEmB,gBACFnB,EAAEiL,OACFjL,EAAEkL,aAGVoP,EAAWM,IAEX5a,EAAI4a,EAAKA,EAAKphB,OAAS,IACjBuR,UACqB3O,EAAQoP,eAAepP,EAAQoP,eAAehS,OAAS,GAC/DuR,UAAY/K,EAAE+K,iBAEjC/K,EAAIA,EAAElD,MAAM4D,KAAKtE,kBAKhB6d,YAAa,EACXI,OAED,CAAE3c,KAAM,OACVmK,4BAAsBiD,oBACtBlD,SAAUtM,KAAK6F,gBAAgByG,SAC/BnL,MAAOnB,KAAKmB,oCAInB2F,EAAK+X,OACD,IAAW7b,EAAPX,EAAI,EAAMA,EAAIyE,EAAI5I,OAAQmE,OAC/BW,EAAI6b,EAAI5U,KAAKnD,EAAKA,EAAIzE,WACNW,SAEb,cAIf8b,GAASja,UAAUzC,KAAO,eCvEpBmd,0BACUva,EAAKrD,EAAIH,6BACZwD,IAAMA,WACNrD,GAAKA,WACLH,MAAQA,uBAJGhC,mCAOfsB,UACM,IAAIye,EAAUvf,KAAKgF,IAAII,KAAOpF,KAAKgF,IAAII,KAAKtE,GAAWd,KAAKgF,IAC/DhF,KAAK2B,GAAK3B,KAAKwB,OAASxB,KAAKwB,MAAM4D,KAAQpF,KAAKwB,MAAM4D,KAAKtE,GAAWd,KAAKwB,sCAG5EV,EAASS,GACZA,EAAON,IAAIjB,KAAKmD,MAAMrC,kCAGpBA,OACEU,EAAQxB,KAAKgF,IAAI7B,MAAQnD,KAAKgF,IAAI7B,MAAMrC,GAAWd,KAAKgF,WAExDhF,KAAK2B,KACLH,GAASxB,KAAK2B,GACdH,GAAUxB,KAAKwB,MAAM2B,MAAQnD,KAAKwB,MAAM2B,MAAMrC,GAAWd,KAAKwB,kBAGvDA,gBAInB+d,GAAU1a,UAAUzC,KAAO,gBC1BrBod,0BACUlS,EAAKmS,EAASC,EAASve,EAAO0E,6BACjC6Z,QAAsB,MAAXA,GAA0BA,WACrCle,MAAQie,GAAW,YACnBE,MAAQrS,EAAInH,OAAO,YACnBvF,OAASO,WACTN,UAAYgF,WACZ+Z,cAAgB,0BAChBC,UAAY,uCARJrgB,qCAWVsB,EAASS,GACPvB,KAAK0f,SACNne,EAAON,IAAIjB,KAAK2f,MAAO3f,KAAKI,WAAYJ,KAAKK,YAEjDkB,EAAON,IAAIjB,KAAKwB,OACXxB,KAAK0f,SACNne,EAAON,IAAIjB,KAAK2f,0DAKb3f,KAAKwB,MAAMkB,MAAM1C,KAAK4f,4CAG5B9e,OACKgf,EAAO9f,KACTwB,EAAQxB,KAAKwB,eASRue,EAAiBve,EAAOwe,EAAQC,OACjCC,EAAiB1e,KAEjBA,EAAQ0e,EAAetb,WACvBsb,EAAiB1e,EAAMlF,QAAQ0jB,EAAQC,SAClCze,IAAU0e,UACZA,SAEX1e,EAAQue,EAAiBve,EAAOxB,KAAK4f,cAhBT,SAAC7iB,EAAGyS,OACtB9K,EAAI,IAAIga,cAAalP,GAAQsQ,EAAKzf,WAAYyf,EAAK1f,YAAYgF,KAAKtE,GAAS,UAC3E4D,aAAa8a,EAAU9a,EAAElD,MAAQkD,EAAEvB,UAe/C3B,EAAQue,EAAiBve,EAAOxB,KAAK6f,UAbT,SAAC9iB,EAAGyS,OACtB9K,EAAI,IAAIoa,cAAatP,GAAQsQ,EAAKzf,WAAYyf,EAAK1f,YAAYgF,KAAKtE,GAAS,UAC3E4D,aAAa8a,EAAU9a,EAAElD,MAAQkD,EAAEvB,UAYxC,IAAIqc,EAAOxf,KAAK2f,MAAQne,EAAQxB,KAAK2f,MAAOne,EAAOxB,KAAK0f,QAAS1f,KAAKK,WAAYL,KAAKI,4CAG1FgE,SAEe,WAAfA,EAAMhC,MAAsBpC,KAAK0f,SAAYtb,EAAMsb,QAG5Ctb,EAAMjB,OAASnD,KAAKmD,UAAYiB,EAAMjB,QAAU,OAAIxD,EAFpDH,EAAK8C,eAAetC,KAAKwB,MAAO4C,EAAM5C,gBAOzDge,GAAO3a,UAAUzC,KAAO,aC7DlB+d,0BACUC,EAAKjf,EAAO0E,EAAiBwa,6BAChC7e,MAAQ4e,WACRxf,OAASO,WACTN,UAAYgF,WACZwa,QAAUA,uBALL7gB,qCAQPiC,QACED,MAAQC,EAAQC,MAAM1B,KAAKwB,sCAG7BV,EAASS,GACZA,EAAON,IAAI,aACNO,MAAMR,OAAOF,EAASS,GAC3BA,EAAON,IAAI,kCAGVH,OAEG8R,EADEwN,EAAMpgB,KAAKwB,MAAM4D,KAAKtE,OAGvBd,KAAKqgB,UAGkB,iBADxBzN,EAAW5S,KAAKI,YAAcJ,KAAKI,WAAWwS,WAErB,iBAAdwN,EAAI5e,OACXV,EAAQ4R,oBAAoB0N,EAAI5e,QAC3B4e,EAAIT,QACL/M,EAAsBA,EA4B1BtW,QAAQ,cAAe,SAAAoG,qBAAcA,MA1BrC0d,EAAI5e,MAAQV,EAAQ6R,YAAYyN,EAAI5e,MAAOoR,IAE3CwN,EAAI5e,MAAQV,EAAQgS,cAAcsN,EAAI5e,OAItCV,EAAQwf,UACHF,EAAI5e,MAAMkB,MAAM,cAAc,KAEzB4d,IADwC,IAA5BF,EAAI5e,MAAMkC,QAAQ,KAAc,IAAM,KAC5B5C,EAAQwf,SACJ,IAA5BF,EAAI5e,MAAMkC,QAAQ,KAClB0c,EAAI5e,MAAQ4e,EAAI5e,MAAMlF,QAAQ,cAAQgkB,QAEtCF,EAAI5e,OAAS8e,SAMtB,IAAIH,EAAIC,EAAKpgB,KAAKK,WAAYL,KAAKI,YAAY,YAI9D+f,GAAItb,UAAUzC,KAAO,UChDfme,0BACU/e,EAAOgf,EAAUrf,EAAO0E,EAAiBC,qBAC5ClF,OAASO,IACTN,UAAYgF,MAEXqO,EAAa,IAAIzG,EAAS,GAAI,KAAM,KAAMgG,EAAK7S,OAAQ6S,EAAK5S,WAAYga,gCAEzE2F,SAAW,IAAI3R,EAAM2R,KACrBrM,MAAQ,CAAC,IAAIF,EAAQC,EAAW1S,MAChC2S,MAAM,GAAGiB,cAAe,IACxBrP,mBAAmBD,KACnBsJ,WAAY,IACZpJ,UAAUkO,UACVlO,UAAUyN,EAAK+M,iBACfxa,UAAUyN,EAAKU,4BAdRwG,qDAkBL,iCAGJlZ,GACCzB,KAAKwgB,gBACAA,SAAW/e,EAAQC,MAAM1B,KAAKwgB,WAEnCxgB,KAAKmU,aACAA,MAAQ1S,EAAQuM,WAAWhO,KAAKmU,uCAItCrT,EAASS,GACZA,EAAON,IAAI,UAAWjB,KAAKa,UAAWb,KAAKY,aACtC4f,SAASxf,OAAOF,EAASS,QACzBuZ,cAAcha,EAASS,EAAQvB,KAAKmU,oCAGxCrT,GACIA,EAAQgV,cACThV,EAAQgV,YAAc,GACtBhV,EAAQma,UAAY,QAGlBpd,EAAQ,IAAI0iB,EAAM,KAAM,GAAIvgB,KAAKY,OAAQZ,KAAKa,UAAWb,KAAK8F,yBAChE9F,KAAKqQ,iBACA8D,MAAM,GAAG9D,UAAYrQ,KAAKqQ,UAC/BxS,EAAMwS,UAAYrQ,KAAKqQ,WAG3BxS,EAAM2iB,SAAWxgB,KAAKwgB,SAASpb,KAAKtE,GAEpCA,EAAQma,UAAU7Z,KAAKvD,GACvBiD,EAAQgV,YAAY1U,KAAKvD,QAEpBsW,MAAM,GAAGkB,iBAAmBvU,EAAQkR,OAAO,GAAGqD,iBAAiB1B,UACpE7S,EAAQkR,OAAOwD,QAAQxV,KAAKmU,MAAM,IAClCtW,EAAMsW,MAAQ,CAACnU,KAAKmU,MAAM,GAAG/O,KAAKtE,IAClCA,EAAQkR,OAAOtD,QAEf5N,EAAQma,UAAU7K,MAEkB,IAA7BtP,EAAQma,UAAU/c,OAAeL,EAAM4iB,QAAQ3f,GAC1CjD,EAAM6iB,WAAW5f,mCAGzBA,OACAiL,EAAS/L,QAGTc,EAAQgV,YAAY5X,OAAS,EAAG,KAC1BgW,EAAa,IAAIzG,EAAS,GAAI,KAAM,KAAMzN,KAAKK,WAAYL,KAAKI,YAAaya,wBACnF9O,EAAS,IAAIkI,EAAQC,EAAWpT,EAAQgV,cACjC6K,YAAa,EACpB5U,EAAOhG,mBAAmB/F,KAAK8F,uBAC1BE,UAAU+F,EAAQ/L,oBAGpBc,EAAQgV,mBACRhV,EAAQma,UAERlP,qCAGAjL,OACHuB,EACAb,EACEqQ,EAAO/Q,EAAQma,UAAUpX,OAAO,CAAC7D,WAGlCqC,EAAI,EAAGA,EAAIwP,EAAK3T,OAAQmE,IACzBb,EAAQqQ,EAAKxP,GAAGme,oBAAoB3R,EACxBgD,EAAKxP,GAAGme,SAAShf,MAAQqQ,EAAKxP,GAAGme,SAC7C3O,EAAKxP,GAAK5B,MAAMC,QAAQc,GAASA,EAAQ,CAACA,eAUzCgf,SAAW,IAAI3R,EAAM7O,KAAK4gB,QAAQ/O,GAAMlP,IAAI,SAAAkP,OAC7CA,EAAOA,EAAKlP,IAAI,SAAAke,UAAYA,EAAS1d,MAAQ0d,EAAW,IAAI5R,EAAU4R,KAEjExe,EAAIwP,EAAK3T,OAAS,EAAGmE,EAAI,EAAGA,IAC7BwP,EAAKmE,OAAO3T,EAAG,EAAG,IAAI4M,EAAU,eAG7B,IAAIyO,GAAW7L,WAErB7L,UAAUhG,KAAKwgB,SAAUxgB,MAGvB,IAAIiU,EAAQ,GAAI,oCAGnBjJ,MACe,IAAfA,EAAI9M,aACG,GACJ,GAAmB,IAAf8M,EAAI9M,cACJ8M,EAAI,WAELe,EAAS,GACT+U,EAAO9gB,KAAK4gB,QAAQ5V,EAAI9F,MAAM,IAC3B7C,EAAI,EAAGA,EAAIye,EAAK5iB,OAAQmE,QACxB,IAAIuS,EAAI,EAAGA,EAAI5J,EAAI,GAAG9M,OAAQ0W,IAC/B7I,EAAO3K,KAAK,CAAC4J,EAAI,GAAG4J,IAAI/Q,OAAOid,EAAKze,YAGrC0J,0CAICmI,GACPA,SAGAC,MAAQ,CAAC,IAAIF,EAAQ3W,EAAgB4W,GAAY,CAAClU,KAAKmU,MAAM,WAC7DnO,UAAUhG,KAAKmU,MAAOnU,gBAInCugB,GAAM1b,UAAUzC,KAAO,YCjIjB2e,0BACUlP,EAAM2O,EAAUhkB,EAAS2E,EAAO0E,EAAiBC,wBACpDtJ,QAAUA,IACVoE,OAASO,IACTN,UAAYgF,IACZgM,KAAOA,IACP2O,SAAWA,IACXpR,WAAY,OAESzP,IAAtB8T,EAAKjX,QAAQ0iB,MAAsBzL,EAAKjX,QAAQmT,YAE7C,KACGqR,EAAYvN,EAAKwN,UACnBD,GAAa,0BAA0BlQ,KAAKkQ,OACvCE,KAAM,YAGdnb,mBAAmBD,KACnBE,UAAUyN,EAAK+M,iBACfxa,UAAUyN,EAAK5B,2BAnBPrS,qCAsBViC,GACCzB,KAAKwgB,gBACAA,SAAW/e,EAAQC,MAAM1B,KAAKwgB,gBAElC3O,KAAOpQ,EAAQC,MAAM1B,KAAK6R,MAC1B7R,KAAKxD,QAAQ2kB,UAAanhB,KAAKxD,QAAQmT,SAAU3P,KAAKkV,YAClDA,KAAOzT,EAAQC,MAAM1B,KAAKkV,sCAIhCpU,EAASS,GACRvB,KAAKkhB,UAAyCvhB,IAAlCK,KAAK6R,KAAKhR,UAAUugB,YAChC7f,EAAON,IAAI,WAAYjB,KAAKa,UAAWb,KAAKY,aACvCiR,KAAK7Q,OAAOF,EAASS,GACtBvB,KAAKwgB,WACLjf,EAAON,IAAI,UACNuf,SAASxf,OAAOF,EAASS,IAElCA,EAAON,IAAI,+CAKPjB,KAAK6R,gBAAgBsO,GACzBngB,KAAK6R,KAAKrQ,MAAMA,MAAQxB,KAAK6R,KAAKrQ,qDAIlCqQ,EAAO7R,KAAK6R,YACZA,aAAgBsO,KAChBtO,EAAOA,EAAKrQ,SAEZqQ,aAAgB2N,KACT3N,EAAKwP,0DAMNvgB,OACN+Q,EAAO7R,KAAK6R,YAEZA,aAAgBsO,KAChBtO,EAAOA,EAAKrQ,OAGT,IAAIuf,EAAOlP,EAAKzM,KAAKtE,GAAUd,KAAKwgB,SAAUxgB,KAAKxD,QAASwD,KAAKY,OAAQZ,KAAKa,UAAWb,KAAK8F,mDAGhGhF,OACC+Q,EAAO7R,KAAK6R,KAAKzM,KAAKtE,GACtBV,EAAWJ,KAAKa,eAEhBgR,aAAgBsO,IAAM,KAElBa,EAAYnP,EAAKrQ,MACnBpB,GACA4gB,GACAlgB,EAAQ4R,oBAAoBsO,GAC5BnP,EAAKrQ,MAAQV,EAAQ6R,YAAYqO,EAAW5gB,EAASwS,UAErDf,EAAKrQ,MAAQV,EAAQgS,cAAcjB,EAAKrQ,cAIzCqQ,+BAGN/Q,OACKiL,EAAS/L,KAAKshB,OAAOxgB,UACvBd,KAAKxD,QAAQ4kB,WAAaphB,KAAKuhB,sBAC3BxV,EAAO7N,QAA4B,IAAlB6N,EAAO7N,OACxB6N,EAAOpL,QAAQ,SAAAH,GACXA,EAAKghB,uBAITzV,EAAOyV,sBAGRzV,iCAGJjL,OACCkU,EACAyM,EACEjB,EAAWxgB,KAAKwgB,UAAYxgB,KAAKwgB,SAASpb,KAAKtE,MAEjDd,KAAKxD,QAAQ2kB,SAAU,IACnBnhB,KAAKkV,MAAQlV,KAAKkV,KAAK9P,cAEd8P,KAAK9P,KAAKtE,GAEnB,MAAOjC,SACHA,EAAE0N,QAAU,iCACN,IAAIJ,EAAUtN,EAAGmB,KAAKkV,KAAK7G,QAASrO,KAAKkV,KAAK5I,iBAG5DmV,EAAW3gB,EAAQkR,OAAO,IAAMlR,EAAQkR,OAAO,GAAGqD,mBACjCrV,KAAKkV,MAAQlV,KAAKkV,KAAK3B,WACpCkO,EAASnO,YAAatT,KAAKkV,KAAK3B,WAG7B,MAGPvT,KAAK0hB,OACoB,mBAAd1hB,KAAK0hB,YACPA,KAAO1hB,KAAK0hB,QAEjB1hB,KAAK0hB,YACE,MAGX1hB,KAAKxD,QAAQmT,OAAQ,KACfjD,EAAW,IAAIuC,EAAUjP,KAAKkV,KAAM,EACtC,CACI5I,SAAUtM,KAAK2hB,iBACfP,UAAWphB,KAAK6R,KAAKhR,WAAab,KAAK6R,KAAKhR,UAAUugB,YACvD,GAAM,UAENphB,KAAKwgB,SAAW,IAAID,GAAM,CAAC7T,GAAW1M,KAAKwgB,SAAShf,OAAS,CAACkL,GAClE,GAAI1M,KAAKkhB,IAAK,KACXU,EAAY,IAAIb,EAAO/gB,KAAK6hB,SAAS/gB,GAAU0f,EAAUxgB,KAAKxD,QAASwD,KAAKY,YAC7EghB,EAAUV,KAAOlhB,KAAKoN,YACjBpN,KAAKoN,aAERwU,SAEP5M,EAAU,IAAIf,EAAQ,KAAM3W,EAAgB0C,KAAKkV,KAAKf,SAC9CuB,YAAY5U,GAEbd,KAAKwgB,SAAW,IAAID,GAAMvL,EAAQb,MAAOnU,KAAKwgB,SAAShf,OAASwT,EAAQb,eAK3F4M,GAAOlc,UAAUzC,KAAO,SCjLxB,IAAM0f,GAAa,cAEnBA,GAAWjd,UAAY,IAAIrF,GAENuiB,mBAAqB,SAAUC,EAAYlhB,OACxDiL,EACE+T,EAAO9f,KACPiiB,EAAc,OAEfnhB,EAAQohB,uBACH,CAAE3V,QAAS,+DACbD,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,YAGpB2hB,EAAaA,EAAW1lB,QAAQ,iBAAkB,SAACS,EAAGyS,UAASsQ,EAAKqC,MAAM,IAAIzD,cAAalP,GAAQsQ,EAAKzf,WAAYyf,EAAK1f,YAAYgF,KAAKtE,UAGtIkhB,EAAa,IAAII,2BAAoBJ,QACvC,MAAOnjB,QACC,CAAE0N,+CAAyC1N,EAAE0N,0BAAkByV,OACjE1V,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,gBAGdqW,EAAY5V,EAAQkR,OAAO,GAAG0E,gBAC/B,IAAMqD,KAAKrD,EACRA,EAAU9Z,eAAemd,KAEzBkI,EAAYlI,EAAE7U,MAAM,IAAM,CACtB1D,MAAOkV,EAAUqD,GAAGvY,MACpB6gB,KAAM,kBACKriB,KAAKwB,MAAM4D,KAAKtE,GAASqC,eAO5C4I,EAASiW,EAAW/X,KAAKgY,GAC3B,MAAOpjB,QACC,CAAE0N,gDAA0C1N,EAAE2Q,kBAAS3Q,EAAE0N,QAAQjQ,QAAQ,OAAQ,UACnFgQ,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,mBAEb0L,GAEX+V,GAAWjd,UAAUsd,MAAQ,SAAArb,UACrBrG,MAAMC,QAAQoG,EAAItF,QAAWsF,EAAItF,MAAMtD,OAAS,aACrC4I,EAAItF,MAAMmB,IAAI,SAAA+B,UAAKA,EAAEvB,UAAS7B,KAAK,WAEvCwF,EAAI3D,aCjDbmf,0BACUC,EAAQ7C,EAASve,EAAO0E,6BAC3B6Z,QAAUA,WACVsC,WAAaO,WACb3hB,OAASO,WACTN,UAAYgF,uBALAic,oCAQhBhhB,OACKiL,EAAS/L,KAAK+hB,mBAAmB/hB,KAAKgiB,WAAYlhB,GAClDsB,IAAc2J,SAEP,WAAT3J,GAAsBoa,MAAMzQ,GAEZ,WAAT3J,EACA,IAAIod,cAAWzT,OAAWA,EAAQ/L,KAAK0f,QAAS1f,KAAKY,QACrDH,MAAMC,QAAQqL,GACd,IAAIkD,EAAUlD,EAAOzK,KAAK,OAE1B,IAAI2N,EAAUlD,GANd,IAAIsQ,GAAUtQ,YAWjCuW,GAAWzd,UAAUzC,KAAO,iBC3BtBogB,0BACUxd,EAAKob,6BACRpb,IAAMA,WACNxD,MAAQ4e,uBAHI5gB,qCAMdiC,QACED,MAAQC,EAAQC,MAAM1B,KAAKwB,oCAG/BV,UACGd,KAAKwB,MAAM4D,KACJ,IAAIod,EAAWxiB,KAAKgF,IAAKhF,KAAKwB,MAAM4D,KAAKtE,IAE7Cd,oCAGJc,EAASS,GACZA,EAAON,cAAOjB,KAAKgF,UACfhF,KAAKwB,MAAMR,YACNQ,MAAMR,OAAOF,EAASS,GAE3BA,EAAON,IAAIjB,KAAKwB,gBAK5BghB,GAAW3d,UAAUzC,KAAO,iBC3BtBqgB,0BACU9gB,EAAIsC,EAAGjB,EAAGX,EAAGqgB,6BAChB/gB,GAAKA,EAAG4D,gBACRod,OAAS1e,WACT2e,OAAS5f,WACTpC,OAASyB,WACTqgB,OAASA,uBANEljB,qCASbiC,QACEkhB,OAASlhB,EAAQC,MAAM1B,KAAK2iB,aAC5BC,OAASnhB,EAAQC,MAAM1B,KAAK4iB,qCAGhC9hB,OACKiL,EAAU,SAACpK,EAAIC,EAAGC,UACZF,OACC,aAAcC,GAAKC,MACnB,YAAcD,GAAKC,iBAEZrC,EAAK2C,QAAQP,EAAGC,SACd,QACY,MAAPF,GAAqB,OAAPA,GAAsB,OAAPA,OACnC,QACa,MAAPA,GAAqB,OAAPA,GAAsB,OAAPA,GAAsB,OAAPA,OAClD,QACa,MAAPA,GAAqB,OAAPA,iBAEd,IAbX,CAgBb3B,KAAK2B,GAAI3B,KAAK2iB,OAAOvd,KAAKtE,GAAUd,KAAK4iB,OAAOxd,KAAKtE,WAEjDd,KAAK0iB,QAAU3W,EAASA,WAIvC0W,GAAU5d,UAAUzC,KAAO,gBCrCrBygB,0BACUrhB,6BACHA,MAAQA,uBAFWhC,QAMhCqjB,GAAkBhe,UAAUzC,KAAO,wBCJ7B0gB,0BACUtiB,6BACHgB,MAAQhB,uBAFEhB,qCAKZsB,EAASS,GACZA,EAAON,IAAI,UACNO,MAAMR,OAAOF,EAASS,gCAG1BT,UACGA,EAAQ2R,WACA,IAAI4K,GAAU,IAAK,CAAC,IAAIhB,IAAW,GAAIrc,KAAKwB,QAAS4D,KAAKtE,GAE/D,IAAIgiB,EAAS9iB,KAAKwB,MAAM4D,KAAKtE,aAI5CgiB,GAASje,UAAUzC,KAAO,eCnBpB2gB,0BACUtO,EAAUuO,EAAQ7hB,EAAO0E,EAAiBC,4BAC7C2O,SAAWA,IACXuO,OAASA,IACTC,UAAYF,EAAOG,YACnBC,WAAa,CAAC1P,EAAKwP,aACnBriB,OAASO,IACTN,UAAYgF,IACZE,mBAAmBD,KACnBsJ,WAAY,EAET4T,OACC,QACII,aAAc,IACdC,YAAa,kBAGbD,aAAc,IACdC,YAAa,WAGrBrd,UAAUyN,EAAKgB,+BArBPjV,qCAwBViC,QACEgT,SAAWhT,EAAQC,MAAM1B,KAAKyU,uCAGlC3T,UACM,IAAIiiB,EAAO/iB,KAAKyU,SAASrP,KAAKtE,GAAUd,KAAKgjB,OAAQhjB,KAAKK,WAAYL,KAAKI,WAAYJ,KAAK8F,gDAGjGhF,UACK,IAAIiiB,EAAO/iB,KAAKyU,SAAUzU,KAAKgjB,OAAQhjB,KAAKK,WAAYL,KAAKI,WAAYJ,KAAK8F,4DAIvEoO,OAEV7R,EACAihB,EAFAC,EAAe,OAIdlhB,EAAI,EAAGA,EAAI6R,EAAUhW,OAAQmE,IAC9BihB,EAAmBpP,EAAU7R,GAAGqL,SAG5BrL,EAAI,GAAKihB,EAAiBplB,QAAmD,KAAzColB,EAAiB,GAAG3d,WAAWnE,QACnE8hB,EAAiB,GAAG3d,WAAWnE,MAAQ,KAE3C+hB,EAAeA,EAAa1f,OAAOqQ,EAAU7R,GAAGqL,eAG/C8V,cAAgB,CAAC,IAAI/V,EAAS8V,SAC9BC,cAAc,GAAGzd,mBAAmB/F,KAAK8F,2BAItDid,GAAOG,QAAU,EAEjBH,GAAOle,UAAUzC,KAAO,aCxDlBqhB,0BACU7T,EAAUzO,EAAO0E,6BACpB+J,SAAWA,WACXhP,OAASO,WACTN,UAAYgF,WACZuJ,WAAY,uBALE5P,mCAQlBsB,OACGqT,EACAuP,EAAkB,IAAIhF,GAAS1e,KAAK4P,SAAU5P,KAAKK,WAAYL,KAAKI,YAAYgF,KAAKtE,GACnFsM,EAAQ,IAAIjB,EAAU,CAACI,mDAA6CvM,KAAK4P,gBAE1E8T,EAAgB1O,QAAS,IACtB0O,EAAgBvP,MAChBA,EAAQuP,OAEP,GAAIjjB,MAAMC,QAAQgjB,GACnBvP,EAAQ,IAAIF,EAAQ,GAAIyP,OAEvB,CAAA,IAAIjjB,MAAMC,QAAQgjB,EAAgBliB,aAI7B4L,EAHN+G,EAAQ,IAAIF,EAAQ,GAAIyP,EAAgBliB,OAK5CkiB,EAAkB,IAAIvI,EAAgBhH,MAEtCuP,EAAgB1O,eACT0O,EAAgBC,SAAS7iB,SAE9BsM,WAIdqW,GAAa5e,UAAUzC,KAAO,mBCpCxBwhB,0BACUC,EAAUC,EAASrU,EAAWtO,EAAOf,6BACxCoB,MAAQqiB,WACRC,QAAUA,WACVrU,UAAYA,WACZ7O,OAASO,WACTN,UAAYT,uBANIZ,mCASpBsB,OACGuB,EAEAmN,EACA2E,EAAQnU,KAAKwB,MAAM4D,KAAKtE,OAEvBuB,EAAI,EAAGA,EAAIrC,KAAK8jB,QAAQ5lB,OAAQmE,IAAK,IACtCmN,EAAOxP,KAAK8jB,QAAQzhB,GAOhB5B,MAAMC,QAAQyT,KACdA,EAAQ,IAAIF,EAAQ,CAAC,IAAIxG,GAAa0G,IAG7B,KAAT3E,EACA2E,EAAQA,EAAM4P,uBAEb,GAAuB,MAAnBvU,EAAKrJ,OAAO,OACM,MAAnBqJ,EAAKrJ,OAAO,KACZqJ,aAAW,IAAIkP,GAASlP,EAAKhC,OAAO,IAAIpI,KAAKtE,GAASU,QAEtD2S,EAAMuC,YACNvC,EAAQA,EAAMvE,SAASJ,KAGtB2E,OACK,CAAE/R,KAAM,OACVmK,2BAAqBiD,gBACrBlD,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,gBAGnB,IAEGmP,EADyB,OAAzBA,EAAKwU,UAAU,EAAG,cACP,IAAItF,GAASlP,EAAKhC,OAAO,IAAIpI,KAAKtE,GAASU,OAG5B,MAAnBgO,EAAKrJ,OAAO,GAAaqJ,aAAWA,GAE3C2E,EAAM2C,aACN3C,EAAQA,EAAM4K,SAASvP,KAGtB2E,OACK,CAAE/R,KAAM,OACVmK,4BAAsBiD,EAAKhC,OAAO,kBAClClB,SAAUtM,KAAKI,WAAWkM,SAC1BnL,MAAOnB,KAAKK,YAIpB8T,EAAQA,EAAMA,EAAMjW,OAAS,GAG7BiW,EAAM3S,QACN2S,EAAQA,EAAM/O,KAAKtE,GAASU,OAE5B2S,EAAMa,UACNb,EAAQA,EAAMa,QAAQ5P,KAAKtE,WAG5BqT,WAIfyP,GAAe/e,UAAUzC,KAAO,qBC1E1B6hB,0BACUzU,EAAM0U,EAAQ/P,EAAOvG,EAAWuW,EAAUnS,EAAQlM,qBACrD0J,KAAOA,GAAQ,oBACf0E,UAAY,CAAC,IAAIzG,EAAS,CAAC,IAAI/H,EAAQ,KAAM8J,GAAM,EAAOiE,EAAK7S,OAAQ6S,EAAK5S,gBAC5EqjB,OAASA,IACTtW,UAAYA,IACZuW,SAAWA,IACXC,MAAQF,EAAOhmB,SACfiW,MAAQA,IACRE,SAAW,OACVgQ,EAAqB,YACtBC,SAAWJ,EAAO1N,OAAO,SAAC4F,EAAOmI,UAC7BA,EAAE/U,MAAS+U,EAAE/U,OAAS+U,EAAE/iB,MAClB4a,EAAQ,GAGfiI,EAAmBjjB,KAAKmjB,EAAE/U,MACnB4M,IAEZ,KACEiI,mBAAqBA,IACrBrS,OAASA,IACTjM,mBAAmBD,KACnBsJ,WAAY,kBAvBA6E,qCA0BdxS,GACCzB,KAAKkkB,QAAUlkB,KAAKkkB,OAAOhmB,cACtBgmB,OAASziB,EAAQuM,WAAWhO,KAAKkkB,cAErC/P,MAAQ1S,EAAQuM,WAAWhO,KAAKmU,OACjCnU,KAAK4N,iBACAA,UAAYnM,EAAQC,MAAM1B,KAAK4N,+CAIjC9M,EAAS0jB,EAAUhhB,EAAMihB,OAI5BC,EACAC,EAEAtiB,EACAuS,EACAwL,EACA5Q,EACAoV,EACAC,EAVEjG,EAAQ,IAAI3K,EAAQ,KAAM,MAI1BiQ,EAAS5mB,EAAgB0C,KAAKkkB,QAOhCY,EAAa,KAEbN,EAASxS,QAAUwS,EAASxS,OAAO,IAAMwS,EAASxS,OAAO,GAAGqD,mBAC5DuJ,EAAMvJ,iBAAmBmP,EAASxS,OAAO,GAAGqD,iBAAiB1B,WAEjE6Q,EAAW,IAAIrT,EAASY,KAAKyS,EAAU,CAAC5F,GAAO/a,OAAO2gB,EAASxS,SAE3DxO,MAEAshB,GADAthB,EAAOlG,EAAgBkG,IACLtF,OAEbmE,EAAI,EAAGA,EAAIyiB,EAAYziB,OAEpBmN,GADJmV,EAAMnhB,EAAKnB,KACQsiB,EAAInV,KAAO,KAC1BoV,GAAe,EACVhQ,EAAI,EAAGA,EAAIsP,EAAOhmB,OAAQ0W,QACtB6P,EAAe7P,IAAMpF,IAAS0U,EAAOtP,GAAGpF,KAAM,CAC/CiV,EAAe7P,GAAK+P,EAAInjB,MAAM4D,KAAKtE,GACnC8d,EAAMmG,YAAY,IAAIxV,EAAYC,EAAMmV,EAAInjB,MAAM4D,KAAKtE,KACvD8jB,GAAe,WAInBA,EAAc,CACdphB,EAAKwS,OAAO3T,EAAG,GACfA,kBAGM,CAAED,KAAM,UAAWmK,qCAA+BvM,KAAKwP,iBAAQhM,EAAKnB,GAAGmN,wBAK7FqV,EAAW,EACNxiB,EAAI,EAAGA,EAAI6hB,EAAOhmB,OAAQmE,QACvBoiB,EAAepiB,OAEnBsiB,EAAMnhB,GAAQA,EAAKqhB,GAEfrV,EAAO0U,EAAO7hB,GAAGmN,QACb0U,EAAO7hB,GAAG8hB,SAAU,KACpBO,EAAU,GACL9P,EAAIiQ,EAAUjQ,EAAIkQ,EAAYlQ,IAC/B8P,EAAQtjB,KAAKoC,EAAKoR,GAAGpT,MAAM4D,KAAKtE,IAEpC8d,EAAMmG,YAAY,IAAIxV,EAAYC,EAAM,IAAIkO,GAAWgH,GAAStf,KAAKtE,SAClE,IACHsf,EAAMuE,GAAOA,EAAInjB,MAIT4e,EADA3f,MAAMC,QAAQ0f,GACR,IAAIjF,EAAgB,IAAIlH,EAAQ,GAAImM,IAGpCA,EAAIhb,KAAKtE,OAEhB,CAAA,IAAIojB,EAAO7hB,GAAGb,WAIX,CAAEY,KAAM,UAAWmK,gDAA0CvM,KAAKwP,kBAASsV,kBAAkB9kB,KAAKokB,YAHxGhE,EAAM8D,EAAO7hB,GAAGb,MAAM4D,KAAKof,GAC3B5F,EAAM3I,aAKV2I,EAAMmG,YAAY,IAAIxV,EAAYC,EAAM4Q,IACxCqE,EAAepiB,GAAK+d,KAIxB8D,EAAO7hB,GAAG8hB,UAAY3gB,MACjBoR,EAAIiQ,EAAUjQ,EAAIkQ,EAAYlQ,IAC/B6P,EAAe7P,GAAKpR,EAAKoR,GAAGpT,MAAM4D,KAAKtE,GAG/C+jB,WAGGjG,8CAIDzK,EAASnU,KAAKmU,MAAqBnU,KAAKmU,MAAMxR,IAAI,SAAAK,UAChDA,EAAEqT,cACKrT,EAAEqT,eAAc,GAEhBrT,IAJahD,KAAKmU,aAOlB,IAAI8P,EAAWjkB,KAAKwP,KAAMxP,KAAKkkB,OAAQ/P,EAAOnU,KAAK4N,UAAW5N,KAAKmkB,SAAUnkB,KAAKgS,qCAIhGlR,UACM,IAAImjB,EAAWjkB,KAAKwP,KAAMxP,KAAKkkB,OAAQlkB,KAAKmU,MAAOnU,KAAK4N,UAAW5N,KAAKmkB,SAAUnkB,KAAKgS,QAAU1U,EAAgBwD,EAAQkR,0CAG3HlR,EAAS0C,EAAMiM,OAIhB0E,EACAa,EAJEgQ,EAAa,GACbC,EAAcjlB,KAAKgS,OAAShS,KAAKgS,OAAOnO,OAAO/C,EAAQkR,QAAUlR,EAAQkR,OACzE4M,EAAQ5e,KAAKklB,WAAWpkB,EAAS,IAAIqQ,EAASY,KAAKjR,EAASmkB,GAAczhB,EAAMwhB,UAItFpG,EAAMmG,YAAY,IAAIxV,EAAY,aAAc,IAAImO,GAAWsH,GAAY5f,KAAKtE,KAEhFqT,EAAQ7W,EAAgB0C,KAAKmU,QAE7Ba,EAAU,IAAIf,EAAQ,KAAME,IACpBc,gBAAkBjV,KAC1BgV,EAAUA,EAAQ5P,KAAK,IAAI+L,EAASY,KAAKjR,EAAS,CAACd,KAAM4e,GAAO/a,OAAOohB,KACnExV,IACAuF,EAAUA,EAAQqB,iBAEfrB,yCAGIxR,EAAM1C,WACbd,KAAK4N,YAAc5N,KAAK4N,UAAUxI,KAClC,IAAI+L,EAASY,KAAKjR,EACd,CAACd,KAAKklB,WAAWpkB,MACTqQ,EAASY,KAAKjR,EAASd,KAAKgS,OAAShS,KAAKgS,OAAOnO,OAAO/C,EAAQkR,QAAUlR,EAAQkR,QAASxO,EAAM,KACxGK,OAAO7D,KAAKgS,QAAU,IACtBnO,OAAO/C,EAAQkR,6CAMlBxO,EAAM1C,OAER0N,EADE2W,EAAc3hB,GAAQA,EAAKtF,QAAW,EAEtCmmB,EAAqBrkB,KAAKqkB,mBAC1Be,EAAmB5hB,EAAWA,EAAKgT,OAAO,SAAC4F,EAAOmI,UAChDF,EAAmB3gB,QAAQ6gB,EAAE/U,MAAQ,EAC9B4M,EAAQ,EAERA,GAEZ,GAN6B,KAQ3Bpc,KAAKmkB,aAQFiB,EAAmBplB,KAAKskB,SAAW,SAC5B,MATK,IACZc,EAAkBplB,KAAKskB,gBAChB,KAEPa,EAAanlB,KAAKkkB,OAAOhmB,cAClB,EASfsQ,EAAMpP,KAAKoF,IAAI4gB,EAAiBplB,KAAKokB,WAEhC,IAAI/hB,EAAI,EAAGA,EAAImM,EAAKnM,QAChBrC,KAAKkkB,OAAO7hB,GAAGmN,OAASxP,KAAKkkB,OAAO7hB,GAAG8hB,UACpC3gB,EAAKnB,GAAGb,MAAM4D,KAAKtE,GAASqC,SAAWnD,KAAKkkB,OAAO7hB,GAAGb,MAAM4D,KAAKtE,GAASqC,eACnE,SAIZ,WAIf8gB,GAAWpf,UAAUzC,KAAO,kBAC5B6hB,GAAWpf,UAAU+Q,WAAY,MC5N3ByP,0BACU3X,EAAUlK,EAAMrC,EAAO0E,EAAiB4J,6BAC3CgF,SAAW,IAAIhH,EAASC,YACxB4X,UAAY9hB,GAAQ,YACpB5C,OAASO,WACTN,UAAYgF,WACZ4J,UAAYA,WACZL,WAAY,WACZpJ,mBAAeyO,yCARJjV,qCAWbiC,GACCzB,KAAKyU,gBACAA,SAAWhT,EAAQC,MAAM1B,KAAKyU,WAEnCzU,KAAKslB,UAAUpnB,cACVonB,UAAY7jB,EAAQuM,WAAWhO,KAAKslB,yCAI5CxkB,OACGykB,EACAC,EACAC,EAEAd,EACAe,EAGArjB,EACAsjB,EACAC,EACAC,EACAC,EAEAC,EAEAC,EAKA5J,EACAnH,EACAgR,EApBEziB,EAAO,GAGP2Q,EAAQ,GACVzR,GAAQ,EAMNwjB,EAAa,GAEbC,EAAkB,GAElBC,GAAsB,EACtBC,EAAU,EACVC,EAAU,EACVC,EAAW,WAORC,EAAahB,EAAOC,OACrBG,EACArB,EACAkC,MAECb,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpBO,EAAgBP,IAAK,EACrBhS,EAAYpS,MAAMokB,GACbrB,EAAI,EAAGA,EAAIkB,EAAUvnB,QAAUioB,EAAgBP,GAAIrB,KACpDkC,EAAYhB,EAAUlB,IACRmC,iBACVP,EAAgBP,GAAKO,EAAgBP,IAAMa,EAAUC,eAAe,KAAM5lB,IAG9E0kB,EAAMkB,iBACNP,EAAgBP,GAAKO,EAAgBP,IAAMJ,EAAMkB,eAAeljB,EAAM1C,WAG1EqlB,EAAgB,IAAMA,EAAgB,GAClCA,EAAgB,IAAMA,EAAgB,GAC/BA,EAAgB,GACnBG,EAAUC,EAGXF,EAEJD,WA5BN3R,SAAWzU,KAAKyU,SAASrP,KAAKtE,GA+B9BuB,EAAI,EAAGA,EAAIrC,KAAKslB,UAAUpnB,OAAQmE,OAEnCqjB,GADAf,EAAM3kB,KAAKslB,UAAUjjB,IACNb,MAAM4D,KAAKtE,GACtB6jB,EAAIgC,QAAUlmB,MAAMC,QAAQglB,EAASlkB,WACrCkkB,EAAWA,EAASlkB,MACfmkB,EAAI,EAAGA,EAAID,EAASxnB,OAAQynB,IAC7BniB,EAAKpC,KAAK,CAACI,MAAOkkB,EAASC,UAG/BniB,EAAKpC,KAAK,CAACoO,KAAMmV,EAAInV,KAAMhO,MAAOkkB,QAI1CO,EAAoB,SAAAnR,UAAQA,EAAK8R,UAAU,KAAM9lB,IAE5CuB,EAAI,EAAGA,EAAIvB,EAAQkR,OAAO9T,OAAQmE,QAC9BkjB,EAASzkB,EAAQkR,OAAO3P,GAAGgV,KAAKrX,KAAKyU,SAAU,KAAMwR,IAAoB/nB,OAAS,EAAG,KACtF4nB,GAAa,EAORH,EAAI,EAAGA,EAAIJ,EAAOrnB,OAAQynB,IAAK,KAChCH,EAAQD,EAAOI,GAAG7Q,KAClB2Q,EAAYF,EAAOI,GAAG9T,KACtBgU,GAAc,EACTD,EAAI,EAAGA,EAAI9kB,EAAQkR,OAAO9T,OAAQ0nB,SAC5BJ,aAAiBqB,KAAqBrB,KAAW1kB,EAAQkR,OAAO4T,GAAG3Q,iBAAmBnU,EAAQkR,OAAO4T,IAAK,CAC7GC,GAAc,QAIlBA,GAIAL,EAAMoB,UAAUpjB,EAAM1C,MACtBilB,EAAY,CAACP,MAAAA,EAAOzJ,MAAOyK,EAAahB,EAAOC,KAEjC1J,QAAUqK,GACpBF,EAAW9kB,KAAK2kB,GAGpBrjB,GAAQ,OAIhBkR,EAAYG,QAEZqI,EAAQ,CAAC,EAAG,EAAG,GACVuJ,EAAI,EAAGA,EAAIO,EAAWhoB,OAAQynB,IAC/BvJ,EAAM8J,EAAWP,GAAG5J,YAGpBK,EAAMiK,GAAW,EACjBL,EAAgBO,UAEhBP,EAAgBM,EACXlK,EAAMkK,GAAWlK,EAAMmK,GAAa,OAC/B,CAAEnkB,KAAM,UACVmK,wEAAqEvM,KAAK8mB,OAAOtjB,QACjFrC,MAAOnB,KAAKK,WAAYiM,SAAUtM,KAAKI,WAAWkM,cAIzDqZ,EAAI,EAAGA,EAAIO,EAAWhoB,OAAQynB,QAC/BI,EAAYG,EAAWP,GAAG5J,SACPsK,GAAaN,IAAcC,OAEtCR,EAAQU,EAAWP,GAAGH,iBACCqB,KACnB5R,EAAkBuQ,EAAMvQ,iBAAmBuQ,GAC3CA,EAAQ,IAAIqB,GAAgB,GAAI,GAAIrB,EAAMrR,MAAO,MAAM,EAAO,KAAMc,EAAgBnP,mBAC9EmP,gBAAkBA,OAEtB8R,EAAWvB,EAAMwB,SAASlmB,EAAS0C,EAAMxD,KAAKyP,WAAW0E,WAC1D8S,4BAA4BF,GACjCtmB,MAAMoE,UAAUzD,KAAKkW,MAAMnD,EAAO4S,GACpC,MAAOloB,QACC,CAAE0N,QAAS1N,EAAE0N,QAASpL,MAAOnB,KAAKK,WAAYiM,SAAUtM,KAAKI,WAAWkM,SAAUE,MAAO3N,EAAE2N,UAKzG9J,SACOyR,QAIf2R,EACM,CAAE1jB,KAAS,UACbmK,wDAAmDvM,KAAK8mB,OAAOtjB,QAC/DrC,MAASnB,KAAKK,WAAYiM,SAAUtM,KAAKI,WAAWkM,UAElD,CAAElK,KAAS,OACbmK,kBAAYvM,KAAKyU,SAAStR,QAAQoC,wBAClCpE,MAASnB,KAAKK,WAAYiM,SAAUtM,KAAKI,WAAWkM,8DAIpC4a,OACpB7kB,KAEArC,KAAKuhB,uBACAlf,EAAI,EAAGA,EAAI6kB,EAAYhpB,OAAQmE,IACzB6kB,EAAY7kB,GACdmf,oDAKVhe,mBACOxD,KAAKyU,SAAStR,QAAQoC,mBAAU/B,EAAOA,EAAKb,IAAI,SAAAf,OACtD8jB,EAAW,UACX9jB,EAAE4N,OACFkW,aAAe9jB,EAAE4N,WAEjB5N,EAAEJ,MAAM2B,MACRuiB,GAAY9jB,EAAEJ,MAAM2B,QAEpBuiB,GAAY,MAETA,IACRpkB,KAAK,MAAQ,iBAIpB+jB,GAAUxgB,UAAUzC,KAAO,mBC1KZ,CACX5C,KAAAA,EAAM+C,MAAAA,EAAOoY,OAAAA,EAAQQ,gBAAAA,EAAiBkC,UAAAA,GACtChB,UAAAA,GAAWjB,KAAAA,GAAMtM,QAAAA,EAAS4P,SAAAA,GAAUI,SAAAA,GACpC7K,QAAAA,EAASvO,QAAAA,EAAS6Z,UAAAA,GAAWla,WAAAA,EAAYoI,SAAAA,EACzC+R,OAAAA,GAAQ9B,WAAAA,GAAYnO,YAAAA,EAAa4O,KAAAA,GAAMgC,IAAAA,GAAKY,OAAAA,GAC5ChQ,QAAAA,EAAS9B,UAAAA,EAAWJ,MAAAA,EAAOyT,WAAAA,GAAYE,WAAAA,GACvCC,UAAAA,GAAWtd,MAAAA,EAAOob,MAAAA,GAAOsC,kBAAAA,GAAmBC,SAAAA,GAC5CC,OAAAA,GAAQU,aAAAA,GAAcG,eAAAA,GACtB4B,MAAO,CACHrH,KAAMkH,GACNpB,WAAY4C,QCnDL,CACXzZ,MAAO,SAAS+Z,QACPC,WAAW,QAASD,IAE7BE,KAAM,SAASF,QACNC,WAAW,OAAQD,IAE5BjlB,KAAM,SAASilB,QACNC,WAAW,OAAQD,IAE5BG,MAAO,SAASH,QACPC,WAAW,QAASD,IAE7BI,YAAa,SAASC,QACbC,WAAWrmB,KAAKomB,IAEzBE,eAAgB,SAASF,OAChB,IAAInlB,EAAI,EAAGA,EAAIrC,KAAKynB,WAAWvpB,OAAQmE,OACpCrC,KAAKynB,WAAWplB,KAAOmlB,mBAClBC,WAAWzR,OAAO3T,EAAG,IAKtC+kB,WAAY,SAAShlB,EAAM+kB,OAClB,IAAI9kB,EAAI,EAAGA,EAAIrC,KAAKynB,WAAWvpB,OAAQmE,IAAK,KACvCslB,EAAc3nB,KAAKynB,WAAWplB,GAAGD,GACnCulB,GACAA,EAAYR,KAIxBM,WAAY,ICzBVG,yBACUC,EAAqBC,kBACxBA,aAAeA,GAAgB,GACpCD,EAAsBA,GAAuB,WAGvCE,EAAoB,GACpBxU,EAAYwU,EAAkBlkB,OAFV,CAAC,eAAgB,aAAc,gBAAiB,0BAIjExB,EAAI,EAAGA,EAAIkR,EAAUrV,OAAQmE,IAAK,KACjC2lB,EAAWzU,EAAUlR,GACrB4lB,EAAkBJ,EAAoBG,GACxCC,OACKD,GAAYC,EAAgBjU,KAAK6T,GAC/BxlB,EAAI0lB,EAAkB7pB,aACxBmpB,0DAAmDW,sDAKrD1b,EAAU4b,EAAkB1rB,EAASorB,EAAaO,GAExD7b,GACD8b,GAAOf,KAAK,kFAEQ,MAApBa,GACAE,GAAOf,KAAK,yFAGZS,EAAe9nB,KAAK8nB,aACpBtrB,EAAQyiB,gBACR6I,EAAe,GAAGjkB,OAAOikB,GAAcjkB,OAAOrH,EAAQyiB,cAAcoJ,wBAEnE,IAAIhmB,EAAIylB,EAAa5pB,OAAS,EAAGmE,GAAK,EAAIA,IAAK,KAC1CimB,EAAcR,EAAazlB,MAC7BimB,EAAYH,EAAS,eAAiB,YAAY7b,EAAU4b,EAAkB1rB,EAASorB,UAChFU,SAGR,4CAGIA,QACNR,aAAa1mB,KAAKknB,oDAIlBR,aAAe,YCtDtBS,GAAsB,aAG5BA,GAAoB1jB,UAAUoc,QAAU,SAAA3U,OAChCsI,EAAItI,EAASkc,YAAY,YACzB5T,EAAI,IACJtI,EAAWA,EAASpH,MAAM,EAAG0P,KAEjCA,EAAItI,EAASkc,YAAY,MACjB,IACJ5T,EAAItI,EAASkc,YAAY,OAEzB5T,EAAI,EACG,GAEJtI,EAASpH,MAAM,EAAG0P,EAAI,IAGjC2T,GAAoB1jB,UAAU4jB,mBAAqB,SAAC5W,EAAM6W,SAAQ,yBAAyB5X,KAAKe,GAAQA,EAAOA,EAAO6W,GAEtHH,GAAoB1jB,UAAU8jB,uBAAyB,SAAS9W,UACrD7R,KAAKyoB,mBAAmB5W,EAAM,UAGzC0W,GAAoB1jB,UAAU+jB,aAAe,kBAAM,GAEnDL,GAAoB1jB,UAAUgkB,wBAA0B,kBAAM,GAE9DN,GAAoB1jB,UAAUikB,eAAiB,SAAAxc,SAAa,yBAA0BwE,KAAKxE,IAE3Fic,GAAoB1jB,UAAUvD,KAAO,SAACynB,EAAUC,UACvCD,EAGEA,EAAWC,EAFPA,GAKfT,GAAoB1jB,UAAUokB,SAAW,SAAkBC,EAAKC,OAMxD9mB,EACAkC,EACA6kB,EACAC,EANEC,EAAWtpB,KAAKupB,gBAAgBL,GAEhCM,EAAexpB,KAAKupB,gBAAgBJ,GAKtCM,EAAO,MACPH,EAASI,WAAaF,EAAaE,eAC5B,OAEXnlB,EAAMnF,KAAKmF,IAAIilB,EAAaG,YAAYzrB,OAAQorB,EAASK,YAAYzrB,QAChEmE,EAAI,EAAGA,EAAIkC,GACRilB,EAAaG,YAAYtnB,KAAOinB,EAASK,YAAYtnB,GADxCA,SAGrBgnB,EAAqBG,EAAaG,YAAYzkB,MAAM7C,GACpD+mB,EAAiBE,EAASK,YAAYzkB,MAAM7C,GACvCA,EAAI,EAAGA,EAAIgnB,EAAmBnrB,OAAS,EAAGmE,IAC3ConB,GAAQ,UAEPpnB,EAAI,EAAGA,EAAI+mB,EAAelrB,OAAS,EAAGmE,IACvConB,aAAWL,EAAe/mB,eAEvBonB,GAGXlB,GAAoB1jB,UAAU0kB,gBAAkB,SAAyBL,EAAKC,OAatE9mB,EACAmnB,EAPEI,EAAgB,kGAEhBN,EAAWJ,EAAIxmB,MAAMknB,GACrBC,EAAW,GACbC,EAAiB,GACfH,EAAc,OAIfL,QACK,IAAIxqB,8CAAuCoqB,WAIjDC,KAAaG,EAAS,IAAMA,EAAS,IAAK,MAC1CE,EAAeL,EAAQzmB,MAAMknB,UAEnB,IAAI9qB,4CAAqCqqB,QAEnDG,EAAS,GAAKA,EAAS,IAAME,EAAa,IAAM,GAC3CF,EAAS,KACVA,EAAS,GAAKE,EAAa,GAAKF,EAAS,OAI7CA,EAAS,OACTQ,EAAiBR,EAAS,GAAGhtB,QAAQ,MAAO,KAAKyG,MAAM,KAGlDV,EAAI,EAAGA,EAAIynB,EAAe5rB,OAAQmE,IAET,OAAtBynB,EAAeznB,GACfsnB,EAAYvZ,MAEe,MAAtB0Z,EAAeznB,IACpBsnB,EAAYvoB,KAAK0oB,EAAeznB,WAM5CwnB,EAASH,SAAWJ,EAAS,GAC7BO,EAASF,YAAcA,EACvBE,EAASE,SAAWT,EAAS,IAAM,IAAMQ,EAAexoB,KAAK,KAC7DuoB,EAAShY,MAAQyX,EAAS,IAAM,IAAMK,EAAYroB,KAAK,KACvDuoB,EAASvd,SAAWgd,EAAS,GAC7BO,EAASG,QAAUH,EAAShY,MAAQyX,EAAS,IAAM,IACnDO,EAASX,IAAMW,EAASG,SAAWV,EAAS,IAAM,IAC3CO,OCtHLI,0CAGOC,QAAU,kBAAM,mDAGdxd,EAAU5L,EAASuN,EAAS8b,EAAe/pB,OAE9CqhB,EACA2I,EACAC,EACApL,EACA3S,EACAP,EAEJkT,EAAgBne,EAAQme,cAEpB7e,IAEIkM,EADoB,iBAAblM,EACIA,EAGAA,EAASkM,cAGtBge,GAAa,IAAItqB,KAAKkf,KAAKqL,aAAehB,gBAAgBjd,GAAUA,YAEtEA,IACA8d,EAAYnL,EAAc9e,IAAImM,IAEf,IACXP,EAAS/L,KAAKwqB,cAAcJ,EAAW9d,EAAUge,EAAWH,UAEjDpe,MAGHqe,EAAUK,KACVL,EAAUK,IAAIxgB,KAAKjK,KAAKc,QAASspB,GAGzC,MAAOvrB,UACHA,EAAE0N,QAAU1N,EAAE0N,SAAW,4BAClB,IAAIJ,EAAUtN,EAAGwP,EAAS/B,UAE9B8d,EAGfC,EAAc,CACV5f,QAAS,GACTwU,cAAAA,EACA7e,SAAAA,GAEJqhB,EAAWpM,EAAiBrM,aAOf,IAAIoZ,SAAS,SAAU,UAAW,iBAAkB,YAAa,OAAQ,OAAQ,WAAY1V,EACtGge,CAAOL,EAAarqB,KAAKkqB,QAAQ5d,GANd,SAAAxF,GACnBsjB,EAAYtjB,GAKgD2a,EAAUzhB,KAAKkf,KAAKyL,KAAM3qB,KAAKkf,KAAM9e,GAErG,MAAOvB,UACI,IAAIsN,EAAUtN,EAAGwP,EAAS/B,MAGhC8d,IACDA,EAAYC,EAAY5f,UAE5B2f,EAAYpqB,KAAK4qB,eAAeR,EAAW9d,EAAUge,cAE5Bne,SACdie,MAGPA,SAoCO,IAAIje,EAAU,CAAEI,QAAS,sBAAwB8B,EAAS/B,MAnCjE8d,EAAU/b,QAAUA,EACpB+b,EAAU9d,SAAWA,IAGhB8d,EAAUS,YAAc7qB,KAAK8qB,eAAe,QAASV,EAAUS,YAAc,KAC9E9e,EAAS/L,KAAKwqB,cAAcJ,EAAW9d,EAAUge,EAAWH,WAGjDpe,KAKfkT,EAAc8L,UAAUX,EAAWhqB,EAASkM,SAAUmV,GACtD2I,EAAU7W,UAAYkO,EAAS/N,oBAG/B3H,EAAS/L,KAAKwqB,cAAcJ,EAAW9d,EAAUge,EAAWH,UAEjDpe,MAKHqe,EAAUK,KACVL,EAAUK,IAAIxgB,KAAKjK,KAAKc,QAASspB,GAGzC,MAAOvrB,UACHA,EAAE0N,QAAU1N,EAAE0N,SAAW,4BAClB,IAAIJ,EAAUtN,EAAGwP,EAAS/B,UAQlC8d,wCAGGY,EAAQ1e,EAAUkD,EAAMhT,MAC9BA,IAAYwuB,EAAOC,kBACZ,IAAI9e,EAAU,CACjBI,4DAAsDiD,0CAI1Dwb,EAAOC,YAAcD,EAAOC,WAAWzuB,GAE3C,MAAOqC,UACI,IAAIsN,EAAUtN,2CAIdmsB,EAAQ1e,EAAUkD,UACzBwb,GAGsB,mBAAXA,IACPA,EAAS,IAAIA,GAGbA,EAAOH,YACH7qB,KAAK8qB,eAAeE,EAAOH,WAAY7qB,KAAKkf,KAAKgM,SAAW,EACrD,IAAI/e,EAAU,CACjBI,yBAAmBiD,+BAAyBxP,KAAKmrB,gBAAgBH,EAAOH,eAI7EG,GAEJ,4CAGII,EAAUC,GACG,iBAAbD,IACPA,EAAWA,EAAS1oB,MAAM,6BACjBgM,YAER,IAAIrM,EAAI,EAAGA,EAAI+oB,EAASltB,OAAQmE,OAC7B+oB,EAAS/oB,KAAOgpB,EAAShpB,UAClBQ,SAASuoB,EAAS/oB,IAAMQ,SAASwoB,EAAShpB,KAAO,EAAI,SAG7D,0CAGK6oB,WACRI,EAAgB,GACXjpB,EAAI,EAAGA,EAAI6oB,EAAQhtB,OAAQmE,IAChCipB,IAAkBA,EAAgB,IAAM,IAAMJ,EAAQ7oB,UAEnDipB,qCAGAC,OACF,IAAIlpB,EAAI,EAAGA,EAAIkpB,EAAQrtB,OAAQmE,IAAK,KAC/B2oB,EAASO,EAAQlpB,GACnB2oB,EAAOQ,YACPR,EAAOQ,uBClLjBC,GAAa,CAAEC,aAAa,GAC9BC,IAAc,EAElB,SAASC,GAAMprB,UACJA,MA4BLqrB,yBACUC,kBACHC,gBAAkBD,OAClBE,cAAgB,QAChBC,eAAiB,GAEjBN,MA/Bb,SAASO,EAAezsB,EAAQ0sB,OAExBnnB,EAEA8C,MACC9C,KAAOvF,WAERqI,EAAQrI,EAAOuF,SAEN,WAGG8C,EAAMjD,WAAaiD,EAAMjD,UAAUzC,OACnC0F,EAAMjD,UAAUunB,UAAYD,eAG/B,SACDA,EAASD,EAAepkB,EAAOqkB,UAKpCA,EAUCD,CAAevB,GAAM,GACrBgB,IAAc,2CAIhBnrB,OACGA,SACMA,MAGL6rB,EAAgB7rB,EAAK4rB,cACtBC,SAEG7rB,EAAKgB,OAAShB,EAAKgB,MAAM4qB,gBACpB1qB,MAAMlB,EAAKgB,OAEbhB,MAOP8rB,EAJEC,EAAOvsB,KAAK+rB,gBACd1Y,EAAOrT,KAAKgsB,cAAcK,GAC1BG,EAAUxsB,KAAKisB,eAAeI,GAC5BI,EAAYhB,MAGlBgB,EAAUf,aAAc,EAEnBrY,IAEDA,EAAOkZ,EADPD,iBAAiB9rB,EAAK4B,QACCwpB,GACvBY,EAAUD,YAAQD,WAAgBV,QAC7BI,cAAcK,GAAiBhZ,OAC/B4Y,eAAeI,GAAiBG,GAGrCnZ,IAASuY,GAAO,KACVc,EAAUrZ,EAAKpJ,KAAKsiB,EAAM/rB,EAAMisB,GAClCjsB,GAAQ+rB,EAAKI,cACbnsB,EAAOksB,UAIXD,EAAUf,aAAelrB,GAAQA,EAAKosB,QACtCpsB,EAAKosB,OAAO5sB,MAGZwsB,GAAWZ,IACXY,EAAQviB,KAAKsiB,EAAM/rB,GAGhBA,qCAGAF,EAAOusB,OACTvsB,SACMA,MAIP+B,EADEyqB,EAAMxsB,EAAMpC,UAId2uB,IAAiB7sB,KAAK+rB,gBAAgBY,YAAa,KAC9CtqB,EAAI,EAAGA,EAAIyqB,EAAKzqB,SACZX,MAAMpB,EAAM+B,WAEd/B,MAILysB,EAAM,OACP1qB,EAAI,EAAGA,EAAIyqB,EAAKzqB,IAAK,KAChB2qB,EAAQhtB,KAAK0B,MAAMpB,EAAM+B,SACjB1C,IAAVqtB,IACCA,EAAMhX,OAEAgX,EAAM9uB,aACR+uB,QAAQD,EAAOD,GAFpBA,EAAI3rB,KAAK4rB,WAKVD,kCAGH/hB,EAAK+hB,OAKLD,EACAzqB,EACA4b,EACAiP,EACAtY,EACAuY,MATCJ,IACDA,EAAM,IAUL1qB,EAAI,EAAGyqB,EAAM9hB,EAAI9M,OAAQmE,EAAIyqB,EAAKzqB,YAEtB1C,KADbse,EAAOjT,EAAI3I,OAIN4b,EAAKjI,WAKLpB,EAAI,EAAGsY,EAAYjP,EAAK/f,OAAQ0W,EAAIsY,EAAWtY,SAE7BjV,KADnBwtB,EAAalP,EAAKrJ,MAIbuY,EAAWnX,OAELmX,EAAWjvB,aACb+uB,QAAQE,EAAYJ,GAFzBA,EAAI3rB,KAAK+rB,SAVbJ,EAAI3rB,KAAK6c,UAiBV8O,WC9JTK,yBACUC,kBACHhf,QAAU,QACVif,gBAAkB,QAClBC,kBAAoBF,OACpBG,cAAgB,8CAGf1R,OACA2R,EAAkBztB,KAElB0tB,EAAa,CACf5R,SAAAA,EACAtY,KAAM,KACNmqB,SAAS,eAGRtf,QAAQjN,KAAKssB,GACX,sCAAYlqB,2BAAAA,kBACfkqB,EAAWlqB,KAAO/C,MAAMoE,UAAUK,MAAM+E,KAAKzG,EAAM,GACnDkqB,EAAWC,SAAU,EACrBF,EAAgBG,oDAIN9R,QACTwR,gBAAgBlsB,KAAK0a,yCAIrB0R,2BAEY,MACFxtB,KAAKqO,QAAQnQ,OAAS,GAAG,KACtBwvB,EAAa1tB,KAAKqO,QAAQ,OAC3Bqf,EAAWC,oBAGXtf,QAAUrO,KAAKqO,QAAQnJ,MAAM,GAClCwoB,EAAW5R,SAASxE,MAAM,KAAMoW,EAAWlqB,SAEX,IAAhCxD,KAAKstB,gBAAgBpvB,iBAGnB2vB,EAAiB7tB,KAAKstB,gBAAgB,QACvCA,gBAAkBttB,KAAKstB,gBAAgBpoB,MAAM,GAClD2oB,kBAGCL,gBAEkB,IAAvBxtB,KAAKwtB,eAAuBxtB,KAAKutB,wBAC5BA,6BC/CXO,GAAgB,SAASC,EAAUC,QAEhCC,SAAW,IAAIpC,GAAQ7rB,WACvBkuB,UAAYH,OACZI,QAAUH,OACVltB,QAAU,IAAIqQ,EAASY,UACvBqc,YAAc,OACdC,qBAAuB,QACvBC,kBAAoB,QACpBC,WAAa,IAAInB,GAAgBptB,KAAKutB,kBAAkBvZ,KAAKhU,QAGtE8tB,GAAcjpB,UAAY,CACtB8nB,aAAa,EACb6B,IAAK,SAAUtZ,YAGF+Y,SAASvsB,MAAMwT,GAExB,MAAOrW,QACEuO,MAAQvO,OAGZ4vB,YAAa,OACbF,WAAWX,UAEpBL,kBAAmB,WACVvtB,KAAKyuB,iBAGLN,QAAQnuB,KAAKoN,QAEtBshB,YAAa,SAAUC,EAAYlC,OACzBmC,EAAYD,EAAWnyB,QAAQmT,WAEhCgf,EAAWzN,KAAO0N,EAAW,KAExB9tB,EAAU,IAAIqQ,EAASY,KAAK/R,KAAKc,QAASxD,EAAgB0C,KAAKc,QAAQkR,SACvE6c,EAAe/tB,EAAQkR,OAAO,QAE/Boc,cACDO,EAAWG,wBACNP,WAAWQ,kBAAkB/uB,KAAKgvB,kBAAkBhb,KAAKhU,KAAM2uB,EAAY7tB,EAAS+tB,SAEpFG,kBAAkBL,EAAY7tB,EAAS+tB,GAGpDpC,EAAUf,aAAc,GAE5BsD,kBAAmB,SAASL,EAAY7tB,EAAS+tB,OACzCI,EACEL,EAAYD,EAAWnyB,QAAQmT,WAGjCsf,EAAkBN,EAAWO,cAAcpuB,GAC7C,MAAOjC,GACAA,EAAEyN,WAAYzN,EAAEsC,MAAQwtB,EAAWtuB,WAAYxB,EAAEyN,SAAWqiB,EAAWvuB,WAAWkM,UAEvFqiB,EAAWzN,KAAM,EAEjByN,EAAWvhB,MAAQvO,MAGnBowB,GAAqBA,EAAgB/N,MAAO0N,OAqBvCR,cACDpuB,KAAKyuB,iBACAF,WAAWX,aAvBoC,CACpDqB,EAAgBzyB,QAAQ2yB,WACxBruB,EAAQsuB,gBAAiB,WAIvBzG,OAAiDhpB,IAAxBsvB,EAAgB/N,IAEtC7e,EAAI,EAAGA,EAAIwsB,EAAa1a,MAAMjW,OAAQmE,OACvCwsB,EAAa1a,MAAM9R,KAAOssB,EAAY,CACtCE,EAAa1a,MAAM9R,GAAK4sB,YAK1BI,EAAarvB,KAAKqvB,WAAWrb,KAAKhU,KAAMivB,EAAiBnuB,GACzDwuB,EAAsBtvB,KAAKuuB,WAAWgB,UAAUF,QAEjDnB,UAAU9sB,KAAK6tB,EAAgBhO,UAAW0H,EAAwBsG,EAAgB7uB,WACnF6uB,EAAgBzyB,QAAS8yB,KAQrCD,WAAY,SAAUV,EAAY7tB,EAASjC,EAAGqW,EAAMsa,EAAgBC,GAC5D5wB,IACKA,EAAEyN,WACHzN,EAAEsC,MAAQwtB,EAAWtuB,WAAYxB,EAAEyN,SAAWqiB,EAAWvuB,WAAWkM,eAEnEc,MAAQvO,OAGX6wB,EAAgB1vB,KAChB4uB,EAAYD,EAAWnyB,QAAQmT,OAC/BwR,EAAWwN,EAAWnyB,QAAQ2kB,SAC9BwO,EAAahB,EAAWnyB,QAAQozB,SAChCC,EAAkBL,GAAkBC,KAAYC,EAAcpB,qBAE/DxtB,EAAQsuB,iBAELT,EAAWjN,OADXmO,GAGkB,kBACVJ,KAAYC,EAAcrB,uBAG9BqB,EAAcrB,qBAAqBoB,IAAY,GACxC,MAKdA,GAAYE,IACbhB,EAAWjN,MAAO,GAGlBxM,IACAyZ,EAAWzZ,KAAOA,EAClByZ,EAAWhN,iBAAmB8N,GAEzBb,IAAczN,IAAargB,EAAQsuB,iBAAmBS,IAAkB,CACzEH,EAAcpB,kBAAkBmB,IAAY,MAEtCK,EAAa9vB,KAAKc,aACnBA,QAAUA,WAENmtB,SAASvsB,MAAMwT,GACtB,MAAOrW,QACAuO,MAAQvO,OAEZiC,QAAUgvB,EAIvBJ,EAActB,cAEVsB,EAAcjB,YACdiB,EAAcnB,WAAWX,UAGjCmC,iBAAkB,SAAUC,EAAUvD,GACN,oBAAxBuD,EAASxuB,MAAMY,UACVtB,QAAQkR,OAAOwD,QAAQwa,GAE5BvD,EAAUf,aAAc,GAGhCuE,oBAAqB,SAASD,GACE,oBAAxBA,EAASxuB,MAAMY,WACVtB,QAAQkR,OAAOtD,SAG5BwhB,YAAa,SAAUC,EAAY1D,QAC1B3rB,QAAQkR,OAAOwD,QAAQ2a,IAEhCC,eAAgB,SAAUD,QACjBrvB,QAAQkR,OAAOtD,SAExB2hB,qBAAsB,SAAUC,EAAqB7D,QAC5C3rB,QAAQkR,OAAOwD,QAAQ8a,IAEhCC,wBAAyB,SAAUD,QAC1BxvB,QAAQkR,OAAOtD,SAExB8hB,aAAc,SAAUC,EAAahE,QAC5B3rB,QAAQkR,OAAOwD,QAAQib,IAEhCC,gBAAiB,SAAUD,QAClB3vB,QAAQkR,OAAOtD,SAExBiiB,WAAY,SAAUC,EAAWnE,QACxB3rB,QAAQkR,OAAOwD,QAAQob,EAAUzc,MAAM,KAEhD0c,cAAe,SAAUD,QAChB9vB,QAAQkR,OAAOtD,cCzLtBoiB,yBACUC,kBACHA,QAAUA,wCAGf7b,QACKxT,MAAMwT,sCAGJ5U,OACFA,SACMA,MAIP+B,EADEyqB,EAAMxsB,EAAMpC,WAEbmE,EAAI,EAAGA,EAAIyqB,EAAKzqB,SACZX,MAAMpB,EAAM+B,WAEd/B,gCAGLE,UACGA,EAGDA,EAAK2M,cAAgB1M,MACdT,KAAKgO,WAAWxN,IAGtBA,EAAK+gB,kBAAoB/gB,EAAK+gB,mBACxB/gB,GAEPR,KAAK+wB,QACLvwB,EAAKwwB,mBAELxwB,EAAKywB,qBAGTzwB,EAAKosB,OAAO5sB,MACLQ,GAhBIA,WCjBb0wB,0CAEOjD,SAAW,IAAIpC,GAAQ7rB,WACvBmR,SAAW,QACXggB,gBAAkB,CAAC,0CAGxBjc,UACAA,EAAOlV,KAAKiuB,SAASvsB,MAAMwT,IACtBkc,WAAapxB,KAAKmxB,gBAAgB,GAChCjc,2CAGM8a,EAAUvD,GACvBA,EAAUf,aAAc,+CAGP4E,EAAqB7D,GACtCA,EAAUf,aAAc,uCAGf+E,EAAahE,OAClBgE,EAAYvb,UAIZ7S,EACAuS,EACAjG,EAEAhB,EADE0jB,EAAyB,GAIzBld,EAAQsc,EAAYtc,MAEpB+G,EAAU/G,EAAQA,EAAMjW,OAAS,MAClCmE,EAAI,EAAGA,EAAI6Y,EAAS7Y,IACjBouB,EAAYtc,MAAM9R,aAAcsoB,GAAK5H,SACrCsO,EAAuBjwB,KAAK+S,EAAM9R,IAClCouB,EAAYa,mBAAoB,OAMlC5f,EAAQ+e,EAAY/e,UACrBrP,EAAI,EAAGA,EAAIqP,EAAMxT,OAAQmE,IAAK,KACzBkvB,EAAe7f,EAAMrP,GAErBmvB,EADWD,EAAaA,EAAarzB,OAAS,GACrByP,gBAE/BA,EAAa6jB,EAAgBl0B,EAAgBk0B,GAAe3tB,OAAOwtB,GACtCA,KAGzB1jB,EAAaA,EAAWhL,IAAI,SAAA8uB,UAAsBA,EAAmB7qB,WAGpEgO,EAAI,EAAGA,EAAIjH,EAAWzP,OAAQ0W,SAC1B8c,cAAe,GACpB/iB,EAAShB,EAAWiH,IACb+c,kBAAkBJ,GACzB5iB,EAAOqG,QAAUyb,EACP,IAAN7b,IAAWjG,EAAOijB,+BAAgC,QACjDT,gBAAgBnxB,KAAKmxB,gBAAgBjzB,OAAS,GAAGkD,KAAKuN,QAI9DwC,SAAS/P,KAAKqvB,EAAYvc,oDAGnBuc,GACPA,EAAYvb,YACR/D,SAASjT,OAAS8B,KAAKmR,SAASjT,OAAS,sCAI3C0yB,EAAWnE,GAClBmE,EAAUQ,WAAa,QAClBD,gBAAgB/vB,KAAKwvB,EAAUQ,kDAG1BR,QACLO,gBAAgBjzB,OAAS8B,KAAKmxB,gBAAgBjzB,OAAS,sCAGpDiyB,EAAY1D,GACpB0D,EAAWiB,WAAa,QACnBD,gBAAgB/vB,KAAK+uB,EAAWiB,mDAG1BjB,QACNgB,gBAAgBjzB,OAAS8B,KAAKmxB,gBAAgBjzB,OAAS,WAI9D2zB,0CAEO5D,SAAW,IAAIpC,GAAQ7rB,4CAG5BkV,OACM4c,EAAe,IAAIZ,WACpBa,cAAgB,GACrBD,EAAatD,IAAItZ,IACZ4c,EAAaJ,oBAAuBxc,EACzCA,EAAKkc,WAAalc,EAAKkc,WAAWvtB,OAAO7D,KAAKgyB,iBAAiB9c,EAAKkc,WAAYlc,EAAKkc,kBAChFD,gBAAkB,CAACjc,EAAKkc,gBACvBa,EAAUjyB,KAAKiuB,SAASvsB,MAAMwT,eAC/Bgd,0BAA0Bhd,EAAKkc,YAC7Ba,oDAGetkB,OAChBwkB,EAAUnyB,KAAK+xB,cACrBpkB,EAAWoI,OAAO,SAAApH,UAAWA,EAAOyjB,iBAA+C,GAA5BzjB,EAAOwU,WAAWjlB,SAAayC,QAAQ,SAAAgO,OACtF8F,EAAW,gBAEXA,EAAW9F,EAAO8F,SAAStR,MAAM,IAErC,MAAOpG,IAEFo1B,YAAWxjB,EAAOxN,kBAASsT,MAC5B0d,YAAWxjB,EAAOxN,kBAASsT,KAAc,EACzC2T,GAAOf,uBAAgB5S,mEAKlB4d,EAAaC,EAAmBC,OAUzCC,EAEAC,EACAC,EAEAzkB,EAEAsjB,EACA5iB,EACAgkB,EACAC,EANEC,EAAe,GAEfC,EAAgB9yB,SAMtBuyB,EAAiBA,GAAkB,EAQ9BC,EAAc,EAAGA,EAAcH,EAAYn0B,OAAQs0B,QAC/CC,EAAoB,EAAGA,EAAoBH,EAAkBp0B,OAAQu0B,IAEtE9jB,EAAS0jB,EAAYG,GACrBG,EAAeL,EAAkBG,GAG5B9jB,EAAOwU,WAAWzf,QAASivB,EAAa1P,YAAe,IAG5DsO,EAAe,CAACoB,EAAanP,cAAc,KAC3CkP,EAAUI,EAAcC,UAAUpkB,EAAQ4iB,IAE9BrzB,SACRyQ,EAAOyjB,iBAAkB,EAGzBzjB,EAAO6U,cAAc7iB,QAAQ,SAAAqyB,OACnB9wB,EAAOywB,EAAa7sB,iBAG1BmI,EAAc6kB,EAAcG,eAAeP,EAASnB,EAAcyB,EAAcrkB,EAAOwJ,cAGvFya,EAAY,IAAIjI,GAAK5H,OAAQ4P,EAAale,SAAUke,EAAa3P,OAAQ,EAAG2P,EAAavyB,WAAY8B,IAC3FshB,cAAgBvV,EAG1BA,EAAYA,EAAY/P,OAAS,GAAGyP,WAAa,CAACilB,GAGlDC,EAAazxB,KAAKwxB,GAClBA,EAAU5d,QAAU2d,EAAa3d,QAGjC4d,EAAUzP,WAAayP,EAAUzP,WAAWtf,OAAO8uB,EAAaxP,WAAYxU,EAAOwU,YAK/EwP,EAAaf,gCACbgB,EAAUhB,+BAAgC,EAC1Ce,EAAa3d,QAAQtD,MAAMtQ,KAAK6M,WAOhD4kB,EAAa30B,OAAQ,SAGhBg1B,mBACDX,EAAiB,IAAK,KAClBY,EAAc,wBACdC,EAAc,4BAEdD,EAAcN,EAAa,GAAGrP,cAAc,GAAGrgB,QAC/CiwB,EAAcP,EAAa,GAAGpe,SAAStR,QAE3C,MAAOtE,SACD,CAAE0N,+FAAyF4mB,qBAAsBC,eAKpHP,EAAahvB,OAAOivB,EAAcd,iBAAiBa,EAAcP,EAAmBC,EAAiB,WAErGM,2CAIEQ,EAAU5G,GACvBA,EAAUf,aAAc,+CAGP4E,EAAqB7D,GACtCA,EAAUf,aAAc,wCAGd4H,EAAc7G,GACxBA,EAAUf,aAAc,uCAGf+E,EAAahE,OAClBgE,EAAYvb,UAGZwd,EACAa,EACAf,EAIAjB,EAHEH,EAAapxB,KAAKmxB,gBAAgBnxB,KAAKmxB,gBAAgBjzB,OAAS,GAChEs1B,EAAiB,GACjBV,EAAgB9yB,SAKjBwyB,EAAc,EAAGA,EAAcpB,EAAWlzB,OAAQs0B,QAC9Ce,EAAY,EAAGA,EAAY9C,EAAY/e,MAAMxT,OAAQq1B,OACtDhC,EAAed,EAAY/e,MAAM6hB,IAG7B9C,EAAYa,uBACV3jB,EAAa4jB,EAAaA,EAAarzB,OAAS,GAAGyP,WACrDA,GAAcA,EAAWzP,SAE7Bw0B,EAAU1yB,KAAK+yB,UAAU3B,EAAWoB,GAAcjB,IAEtCrzB,SACRkzB,EAAWoB,GAAaJ,iBAAkB,EAE1ChB,EAAWoB,GAAahP,cAAc7iB,QAAQ,SAAAqyB,OACtCS,EACJA,EAAoBX,EAAcG,eAAeP,EAASnB,EAAcyB,EAAc5B,EAAWoB,GAAara,aAC9Gqb,EAAepyB,KAAKqyB,MAKpChD,EAAY/e,MAAQ+e,EAAY/e,MAAM7N,OAAO2vB,sCAGvC7kB,EAAQ+kB,OAKVC,EAEAC,EACAC,EACAC,EACAC,EACA1xB,EAIA2xB,EAFEC,EAAiBtlB,EAAO8F,SAAS/G,SACjCwmB,EAAmB,GAEnBxB,EAAU,OAGXiB,EAAwB,EAAGA,EAAwBD,EAAqBx1B,OAAQy1B,QACjFC,EAAoBF,EAAqBC,GAEpCE,EAAwB,EAAGA,EAAwBD,EAAkBlmB,SAASxP,OAAQ21B,QAEvFC,EAAkBF,EAAkBlmB,SAASmmB,IAGzCllB,EAAOyU,aAA0C,IAA1BuQ,GAAyD,IAA1BE,IACtDK,EAAiB9yB,KAAK,CAACmyB,UAAWI,EAAuBxyB,MAAO0yB,EAAuBM,QAAS,EAC5FC,kBAAmBN,EAAgBnuB,aAGtCtD,EAAI,EAAGA,EAAI6xB,EAAiBh2B,OAAQmE,IACrC2xB,EAAiBE,EAAiB7xB,GAMT,MADzB0xB,EAAmBD,EAAgBnuB,WAAWnE,QACW,IAA1BqyB,IAC3BE,EAAmB,MA5Bb/zB,KAgCSq0B,qBAAqBJ,EAAeD,EAAeG,SAAS3yB,MAAOsyB,EAAgBtyB,QACjGwyB,EAAeG,QAAU,GAAKF,EAAeD,EAAeG,SAASxuB,WAAWnE,QAAUuyB,EAC3FC,EAAiB,KAEjBA,EAAeG,UAIfH,IACAA,EAAeM,SAAWN,EAAeG,UAAYF,EAAe/1B,OAChE81B,EAAeM,WACb3lB,EAAO0U,aACJwQ,EAAwB,EAAID,EAAkBlmB,SAASxP,QAAUy1B,EAAwB,EAAID,EAAqBx1B,UACvH81B,EAAiB,OAIrBA,EACIA,EAAeM,WACfN,EAAe91B,OAAS+1B,EAAe/1B,OACvC81B,EAAeO,aAAeZ,EAC9BK,EAAeQ,oBAAsBX,EAAwB,EAC7DK,EAAiBh2B,OAAS,EAC1Bw0B,EAAQtxB,KAAK4yB,KAGjBE,EAAiBle,OAAO3T,EAAG,GAC3BA,YAKTqwB,+CAGU+B,EAAeC,MACH,iBAAlBD,GAAuD,iBAAlBC,SACrCD,IAAkBC,KAEzBD,aAAyB9J,GAAKpL,iBAC1BkV,EAAc9yB,KAAO+yB,EAAc/yB,IAAM8yB,EAAczvB,MAAQ0vB,EAAc1vB,MAG5EyvB,EAAcjzB,OAAUkzB,EAAclzB,OAM3CizB,EAAgBA,EAAcjzB,MAAMA,OAASizB,EAAcjzB,UAC3DkzB,EAAgBA,EAAclzB,MAAMA,OAASkzB,EAAclzB,QANnDizB,EAAcjzB,QAASkzB,EAAclzB,UASjDizB,EAAgBA,EAAcjzB,MAC9BkzB,EAAgBA,EAAclzB,MAC1BizB,aAAyB9J,GAAKld,SAAU,MAClCinB,aAAyB/J,GAAKld,WAAagnB,EAAc/mB,SAASxP,SAAWw2B,EAAchnB,SAASxP,cAC/F,MAEN,IAAImE,EAAI,EAAGA,EAAKoyB,EAAc/mB,SAASxP,OAAQmE,IAAK,IACjDoyB,EAAc/mB,SAASrL,GAAGsD,WAAWnE,QAAUkzB,EAAchnB,SAASrL,GAAGsD,WAAWnE,QAC1E,IAANa,IAAYoyB,EAAc/mB,SAASrL,GAAGsD,WAAWnE,OAAS,QAAUkzB,EAAchnB,SAASrL,GAAGsD,WAAWnE,OAAS,aAC3G,MAGVxB,KAAKq0B,qBAAqBI,EAAc/mB,SAASrL,GAAGb,MAAOkzB,EAAchnB,SAASrL,GAAGb,cAC/E,SAGR,SAEJ,yCAGIkxB,EAASnB,EAAcoD,EAAqBxc,OAOnDyc,EACAngB,EACAogB,EACAnyB,EACAoyB,EARAC,EAA2B,EAE3BC,EAAkC,EAClCnjB,EAAO,OAON+iB,EAAa,EAAGA,EAAalC,EAAQx0B,OAAQ02B,IAE9CngB,EAAW8c,GADX7uB,EAAQgwB,EAAQkC,IACcrB,WAC9BsB,EAAe,IAAIlK,GAAKjlB,QACpBhD,EAAM0xB,kBACNO,EAAoBjnB,SAAS,GAAGlM,MAChCmzB,EAAoBjnB,SAAS,GAAG9H,WAChC+uB,EAAoBjnB,SAAS,GAAGrN,WAChCs0B,EAAoBjnB,SAAS,GAAGtN,YAGhCsC,EAAM6wB,UAAYwB,GAA4BC,EAAkC,IAChFnjB,EAAKA,EAAK3T,OAAS,GAAGwP,SAAWmE,EAAKA,EAAK3T,OAAS,GAC/CwP,SAAS7J,OAAO0tB,EAAawD,GAA0BrnB,SAASxI,MAAM8vB,IAC3EA,EAAkC,EAClCD,KAGJD,EAAcrgB,EAAS/G,SAClBxI,MAAM8vB,EAAiCtyB,EAAMvB,OAC7C0C,OAAO,CAACgxB,IACRhxB,OAAO8wB,EAAoBjnB,SAASxI,MAAM,IAE3C6vB,IAA6BryB,EAAM6wB,WAAaqB,EAAa,EAC7D/iB,EAAKA,EAAK3T,OAAS,GAAGwP,SAClBmE,EAAKA,EAAK3T,OAAS,GAAGwP,SAAS7J,OAAOixB,IAE1CjjB,EAAOA,EAAKhO,OAAO0tB,EAAarsB,MAAM6vB,EAA0BryB,EAAM6wB,aAEjEnyB,KAAK,IAAIupB,GAAKld,SACfqnB,IAGRC,EAA2BryB,EAAM6xB,cACjCS,EAAkCtyB,EAAM8xB,sBACDjD,EAAawD,GAA0BrnB,SAASxP,SACnF82B,EAAkC,EAClCD,YAIJA,EAA2BxD,EAAarzB,QAAU82B,EAAkC,IACpFnjB,EAAKA,EAAK3T,OAAS,GAAGwP,SAAWmE,EAAKA,EAAK3T,OAAS,GAC/CwP,SAAS7J,OAAO0tB,EAAawD,GAA0BrnB,SAASxI,MAAM8vB,IAC3ED,KAIJljB,GADAA,EAAOA,EAAKhO,OAAO0tB,EAAarsB,MAAM6vB,EAA0BxD,EAAarzB,UACjEyE,IAAI,SAAAsyB,OAENC,EAAUD,EAAarmB,cAAcqmB,EAAavnB,iBACpDyK,EACA+c,EAAQlE,mBAERkE,EAAQjE,qBAELiE,uCAKJtE,EAAWnE,OACd0I,EAAgBvE,EAAUQ,WAAWvtB,OAAO7D,KAAKmxB,gBAAgBnxB,KAAKmxB,gBAAgBjzB,OAAS,IACnGi3B,EAAgBA,EAActxB,OAAO7D,KAAKgyB,iBAAiBmD,EAAevE,EAAUQ,kBAC/ED,gBAAgB/vB,KAAK+zB,yCAGhBvE,OACJnoB,EAAYzI,KAAKmxB,gBAAgBjzB,OAAS,OAC3CizB,gBAAgBjzB,OAASuK,sCAGtB0nB,EAAY1D,OAChB0I,EAAgBhF,EAAWiB,WAAWvtB,OAAO7D,KAAKmxB,gBAAgBnxB,KAAKmxB,gBAAgBjzB,OAAS,IACpGi3B,EAAgBA,EAActxB,OAAO7D,KAAKgyB,iBAAiBmD,EAAehF,EAAWiB,kBAChFD,gBAAgB/vB,KAAK+zB,0CAGfhF,OACL1nB,EAAYzI,KAAKmxB,gBAAgBjzB,OAAS,OAC3CizB,gBAAgBjzB,OAASuK,WClfhC2sB,0CAEOjkB,SAAW,CAAC,SACZ8c,SAAW,IAAIpC,GAAQ7rB,4CAG5BkV,UACOlV,KAAKiuB,SAASvsB,MAAMwT,4CAGd8a,EAAUvD,GACvBA,EAAUf,aAAc,+CAGP4E,EAAqB7D,GACtCA,EAAUf,aAAc,uCAGf+E,EAAahE,OAGlBvY,EAFEpT,EAAUd,KAAKmR,SAASnR,KAAKmR,SAASjT,OAAS,GAC/CwT,EAAQ,QAGTP,SAAS/P,KAAKsQ,GAEd+e,EAAYvb,QACbhB,EAAYuc,EAAYvc,aAEpBA,EAAYA,EAAU6B,OAAO,SAAAtB,UAAYA,EAAS4gB,gBAClD5E,EAAYvc,UAAYA,EAAUhW,OAASgW,EAAaA,EAAY,KAChEA,GAAauc,EAAY6E,cAAc5jB,EAAO5Q,EAASoT,IAE1DA,IAAauc,EAAYtc,MAAQ,MACtCsc,EAAY/e,MAAQA,2CAIZ+e,QACPtf,SAASjT,OAAS8B,KAAKmR,SAASjT,OAAS,qCAGvC0yB,EAAWnE,OACZ3rB,EAAUd,KAAKmR,SAASnR,KAAKmR,SAASjT,OAAS,GACrD0yB,EAAUzc,MAAM,GAAGe,KAA2B,IAAnBpU,EAAQ5C,QAAgB4C,EAAQ,GAAG6f,+CAGtDwP,EAAY1D,OACd3rB,EAAUd,KAAKmR,SAASnR,KAAKmR,SAASjT,OAAS,GACjDiyB,EAAWhc,OAASgc,EAAWhc,MAAMjW,SACrCiyB,EAAWhc,MAAM,GAAGe,KAAQib,EAAWvV,UAA+B,IAAnB9Z,EAAQ5C,QAAgB,eChDjFq3B,yBACUz0B,kBACHmtB,SAAW,IAAIpC,GAAQ7rB,WACvBw1B,SAAW10B,kEAGU20B,OACtB3gB,MACC2gB,SACM,MAEN,IAAIzyB,EAAI,EAAGA,EAAIyyB,EAAUv3B,OAAQ8E,QAClC8R,EAAO2gB,EAAUzyB,IACR0yB,UAAY5gB,EAAK4gB,SAAS11B,KAAKw1B,YAAc1gB,EAAKyM,0BAGhD,SAGR,gDAGWoU,GACdA,GAASA,EAAMxhB,QACfwhB,EAAMxhB,MAAQwhB,EAAMxhB,MAAM4B,OAAO,SAAA6f,UAASA,EAAMzd,+CAIhDwd,UACIA,IAASA,EAAMxhB,OACO,IAAvBwhB,EAAMxhB,MAAMjW,kDAGJuyB,YACPA,IAAeA,EAAY/e,QAC5B+e,EAAY/e,MAAMxT,OAAS,4CAGpBsC,EAAMq1B,OACfr1B,EAAK+gB,mBAAoB,IACtBvhB,KAAKqB,QAAQb,KAAUR,KAAK81B,8BAA8BD,iBAIvDr1B,MAGLu1B,EAAoBv1B,EAAK2T,MAAM,WAChC6hB,sBAAsBD,IAEvB/1B,KAAKqB,QAAQ00B,UAIjBv1B,EAAKwwB,mBACLxwB,EAAKy1B,wBAEEz1B,2CAGMiwB,WACTA,EAAYtb,YAIZnV,KAAKqB,QAAQovB,OAIZA,EAAYvb,OAASlV,KAAKk2B,mBAAmBzF,aAQpDrR,GAAe,SAASte,QACrBmtB,SAAW,IAAIpC,GAAQ7rB,WACvBw1B,SAAW10B,OACXxD,MAAQ,IAAIi4B,GAAgBz0B,IAGrCse,GAAava,UAAY,CACrB8nB,aAAa,EACb6B,IAAK,SAAUtZ,UACJlV,KAAKiuB,SAASvsB,MAAMwT,IAG/B6a,iBAAkB,SAAUC,EAAUvD,OAC9BuD,EAASzO,qBAAsByO,EAASpgB,gBAGrCogB,GAGXK,qBAAsB,SAAU8F,EAAW1J,GAGvC0J,EAAUnkB,OAAS,IAGvBokB,YAAa,SAAUC,EAAY5J,KAGnC6J,aAAc,SAAUC,EAAa9J,OAC7B8J,EAAYhV,qBAAsBgV,EAAYb,SAAS11B,KAAKw1B,iBAGzDe,GAGX5F,WAAY,SAASC,EAAWnE,OACtBoJ,EAAgBjF,EAAUzc,MAAM,GAAGA,aACzCyc,EAAUhE,OAAO5sB,KAAKiuB,UACtBxB,EAAUf,aAAc,EAEjB1rB,KAAK1C,MAAMk5B,kBAAkB5F,EAAWiF,IAGnDnH,YAAa,SAAUC,EAAYlC,OAC3BkC,EAAWpN,0BAGRoN,GAGXuB,YAAa,SAASC,EAAY1D,UAC1B0D,EAAWhc,OAASgc,EAAWhc,MAAMjW,OAC9B8B,KAAKy2B,oBAAoBtG,EAAY1D,GAErCzsB,KAAK02B,uBAAuBvG,EAAY1D,IAIvDkK,eAAgB,SAASC,EAAenK,OAC/BmK,EAAcrV,0BACfqV,EAAchK,OAAO5sB,KAAKiuB,UACnB2I,GAIfH,oBAAqB,SAAStG,EAAY1D,OAkBhCoJ,WAXgB1F,OACZ0G,EAAY1G,EAAWhc,sBALTgc,OACdsF,EAAYtF,EAAWhc,aACD,IAArBshB,EAAUv3B,UAAkBu3B,EAAU,GAAG/jB,OAAuC,IAA9B+jB,EAAU,GAAG/jB,MAAMxT,QAIxE44B,CAAe3G,GACR0G,EAAU,GAAG1iB,MAGjB0iB,EAKWE,CAAa5G,UACnCA,EAAWvD,OAAO5sB,KAAKiuB,UACvBxB,EAAUf,aAAc,EAEnB1rB,KAAK1C,MAAM+D,QAAQ8uB,SACf9Q,YAAY8Q,EAAWhc,MAAM,GAAGA,OAGlCnU,KAAK1C,MAAMk5B,kBAAkBrG,EAAY0F,IAGpDa,uBAAwB,SAASvG,EAAY1D,OACrC0D,EAAW5O,uBAIS,aAApB4O,EAAW3gB,KAAqB,IAI5BxP,KAAKg3B,QAAS,IACV7G,EAAW9f,UAAW,KAChB4mB,EAAU,IAAItM,GAAK5Z,qBAAcof,EAAWhtB,MAAMnD,KAAKw1B,UAAUl5B,QAAQ,MAAO,qBACtF26B,EAAQ5mB,UAAY8f,EAAW9f,UACxBrQ,KAAKiuB,SAASvsB,MAAMu1B,eAI9BD,SAAU,SAGZ7G,IAGX+G,gBAAiB,SAAS/iB,EAAOgjB,MACxBhjB,MAIA,IAAI9R,EAAI,EAAGA,EAAI8R,EAAMjW,OAAQmE,IAAK,KAC7BgxB,EAAWlf,EAAM9R,MACnB80B,GAAU9D,aAAoB1I,GAAKpb,cAAgB8jB,EAASzjB,cACtD,CAAErD,QAAS,wEACbpL,MAAOkyB,EAAShzB,WAAYiM,SAAU+mB,EAASjzB,YAAcizB,EAASjzB,WAAWkM,aAErF+mB,aAAoB1I,GAAKxM,UACnB,CAAE5R,4BAAsB8mB,EAAS7jB,uBACnCrO,MAAOkyB,EAAShzB,WAAYiM,SAAU+mB,EAASjzB,YAAcizB,EAASjzB,WAAWkM,aAErF+mB,EAASjxB,OAASixB,EAASjkB,eACrB,CAAE7C,kBAAY8mB,EAASjxB,uDACzBjB,MAAOkyB,EAAShzB,WAAYiM,SAAU+mB,EAASjzB,YAAcizB,EAASjzB,WAAWkM,YAKjGkkB,aAAc,SAAUC,EAAahE,OAE7B3X,EAEEsC,EAAW,WAEZ8f,gBAAgBzG,EAAYtc,MAAOsc,EAAYtb,WAE/Csb,EAAYvb,KA6Bbub,EAAY7D,OAAO5sB,KAAKiuB,UACxBxB,EAAUf,aAAc,MA9BL,MAEd0L,qBAAqB3G,WAGpBoG,EAAYpG,EAAYtc,MAE1BkjB,EAAcR,EAAYA,EAAU34B,OAAS,EACxCmE,EAAI,EAAGA,EAAIg1B,IAChBviB,EAAO+hB,EAAUx0B,KACLyS,EAAKX,OAEbiD,EAAShW,KAAKpB,KAAKiuB,SAASvsB,MAAMoT,IAClC+hB,EAAU7gB,OAAO3T,EAAG,GACpBg1B,KAGJh1B,IAKAg1B,EAAc,EACd5G,EAAY7D,OAAO5sB,KAAKiuB,UAExBwC,EAAYtc,MAAQ,KAExBsY,EAAUf,aAAc,SAMxB+E,EAAYtc,aACPkL,YAAYoR,EAAYtc,YACxBmjB,sBAAsB7G,EAAYtc,QAIvCnU,KAAK1C,MAAMi6B,iBAAiB9G,KAC5BA,EAAYO,mBACZ5Z,EAASpB,OAAO,EAAG,EAAGya,IAGF,IAApBrZ,EAASlZ,OACFkZ,EAAS,GAEbA,GAGXggB,qBAAsB,SAAS3G,GACvBA,EAAY/e,QACZ+e,EAAY/e,MAAQ+e,EAAY/e,MAC3BqE,OAAO,SAAAwO,OACAliB,MACsC,MAAtCkiB,EAAE,GAAG7W,SAAS,GAAG/H,WAAWnE,QAC5B+iB,EAAE,GAAG7W,SAAS,GAAG/H,WAAa,IAAIglB,GAAKtlB,WAAY,KAElDhD,EAAI,EAAGA,EAAIkiB,EAAErmB,OAAQmE,OAClBkiB,EAAEliB,GAAG8V,aAAeoM,EAAEliB,GAAGgzB,qBAClB,SAGR,MAKvBiC,sBAAuB,SAASnjB,MACvBA,OAKDqjB,EACA1iB,EACAzS,EAJEo1B,EAAY,OAMbp1B,EAAI8R,EAAMjW,OAAS,EAAGmE,GAAK,EAAIA,QAChCyS,EAAOX,EAAM9R,cACOsoB,GAAKpb,eAChBkoB,EAAU3iB,EAAKtF,MAEb,EACHgoB,EAAWC,EAAU3iB,EAAKtF,iBACFmb,GAAKpb,cACzBioB,EAAWC,EAAU3iB,EAAKtF,MAAQ,CAACioB,EAAU3iB,EAAKtF,MAAMrM,MAAMnD,KAAKw1B,gBAEjEkC,EAAU5iB,EAAK3R,MAAMnD,KAAKw1B,WACG,IAA/BgC,EAAS9zB,QAAQg0B,GACjBvjB,EAAM6B,OAAO3T,EAAG,GAEhBm1B,EAASp2B,KAAKs2B,QAVlBD,EAAU3iB,EAAKtF,MAAQsF,IAiBvCuK,YAAa,SAASlL,MACbA,WAICwjB,EAAY,GACZC,EAAY,GAETv1B,EAAI,EAAGA,EAAI8R,EAAMjW,OAAQmE,IAAK,KAC7ByS,EAAOX,EAAM9R,MACfyS,EAAKpF,MAAO,KACN1K,EAAM8P,EAAKtF,KACjBmoB,EAAO3yB,GAAOmP,EAAM6B,OAAO3T,IAAK,GAC5Bu1B,EAAUx2B,KAAKu2B,EAAO3yB,GAAO,IACjC2yB,EAAO3yB,GAAK5D,KAAK0T,IAIzB8iB,EAAUj3B,QAAQ,SAAAob,MACVA,EAAM7d,OAAS,EAAG,KACZ6N,EAASgQ,EAAM,GACjB8b,EAAS,GACPC,EAAS,CAAC,IAAInN,GAAKjN,WAAWma,IACpC9b,EAAMpb,QAAQ,SAAAmU,GACU,MAAfA,EAAKpF,OAAmBmoB,EAAM35B,OAAS,GACxC45B,EAAM12B,KAAK,IAAIupB,GAAKjN,WAAWma,EAAQ,KAE3CA,EAAMz2B,KAAK0T,EAAKtT,OAChBuK,EAAO0D,UAAY1D,EAAO0D,WAAaqF,EAAKrF,YAEhD1D,EAAOvK,MAAQ,IAAImpB,GAAK9b,MAAMipB,gBC7V/B,CACXjM,QAAAA,GACAiC,cAAAA,GACAiK,4BAAAA,GACAC,cAAAA,GACA5C,oBAAAA,GACAhW,aAAAA,sBCTA3S,EAGAmI,EAMAqjB,EAGAC,EAGAC,EAGAC,EAGAC,EAfAC,EAAY,GAiBNC,EAAc,GACdC,EAAiB,GACjBC,EAAe,EACfC,EAAc,GACdC,EAAc,GAGdC,EAAyB,YAGtBC,EAAe36B,WAOhB0E,EACAk2B,EACA7B,EARE8B,EAAOR,EAAYl2B,EACnB22B,EAAOpkB,EACPqkB,EAAOV,EAAYl2B,EAAIg2B,EACvBa,EAAWX,EAAYl2B,EAAI+1B,EAAQl6B,OAAS+6B,EAC5CE,EAAOZ,EAAYl2B,GAAKnE,EACxBk7B,EAAM3sB,EAKL8rB,EAAYl2B,EAAI62B,EAAUX,EAAYl2B,IAAK,IAC9CO,EAAIw2B,EAAIC,WAAWd,EAAYl2B,GAE3Bk2B,EAAYe,mBAAqB12B,IAAMg2B,EAAwB,IAE9C,OADjBE,EAAWM,EAAIjzB,OAAOoyB,EAAYl2B,EAAI,IAChB,CAClB40B,EAAU,CAAC91B,MAAOo3B,EAAYl2B,EAAG2O,eAAe,OAC5CuoB,EAAcH,EAAI11B,QAAQ,KAAM60B,EAAYl2B,EAAI,GAChDk3B,EAAc,IACdA,EAAcL,GAElBX,EAAYl2B,EAAIk3B,EAChBtC,EAAQuC,KAAOJ,EAAI5rB,OAAOypB,EAAQ91B,MAAOo3B,EAAYl2B,EAAI40B,EAAQ91B,OACjEo3B,EAAYkB,aAAar4B,KAAK61B,YAE3B,GAAiB,MAAb6B,EAAkB,KACnBY,EAAgBN,EAAI11B,QAAQ,KAAM60B,EAAYl2B,EAAI,MACpDq3B,GAAiB,EAAG,CACpBzC,EAAU,CACN91B,MAAOo3B,EAAYl2B,EACnBm3B,KAAMJ,EAAI5rB,OAAO+qB,EAAYl2B,EAAGq3B,EAAgB,EAAInB,EAAYl2B,GAChE2O,eAAe,GAEnBunB,EAAYl2B,GAAK40B,EAAQuC,KAAKt7B,OAAS,EACvCq6B,EAAYkB,aAAar4B,KAAK61B,sBAOrCr0B,IAAM41B,GAAoB51B,IAAM81B,GAAiB91B,IAAM61B,GAAkB71B,IAAM+1B,WAKxFP,EAAUA,EAAQlzB,MAAMhH,EAASq6B,EAAYl2B,EAAI82B,EAAMF,GACvDZ,EAAaE,EAAYl2B,GAEpB+1B,EAAQl6B,OAAQ,IACb0W,EAAIujB,EAAOj6B,OAAS,SACpBk6B,EAAUD,IAASvjB,GACnBikB,EAAe,IACR,EAEXN,EAAYjE,UAAW,SAGpByE,IAASR,EAAYl2B,GAAK22B,IAASpkB,SAG9C2jB,EAAYoB,KAAO,WACftB,EAAaE,EAAYl2B,EACzBi2B,EAAUl3B,KAAM,CAAEg3B,QAAAA,EAAS/1B,EAAGk2B,EAAYl2B,EAAGuS,EAAAA,KAEjD2jB,EAAYqB,QAAU,SAAAC,IAEdtB,EAAYl2B,EAAI41B,GAAaM,EAAYl2B,IAAM41B,GAAY4B,IAAyB3B,KACpFD,EAAWM,EAAYl2B,EACvB61B,EAA+B2B,OAE7BC,EAAQxB,EAAUloB,MACxBgoB,EAAU0B,EAAM1B,QAChBC,EAAaE,EAAYl2B,EAAIy3B,EAAMz3B,EACnCuS,EAAIklB,EAAMllB,GAEd2jB,EAAYwB,OAAS,WACjBzB,EAAUloB,OAEdmoB,EAAYyB,aAAe,SAAAC,OACjBC,EAAM3B,EAAYl2B,GAAK43B,GAAU,GACjCE,EAAO1tB,EAAM4sB,WAAWa,UACtBC,IAAS3B,GAAkB2B,IAASxB,GAAewB,IAAS1B,GAAgB0B,IAASzB,GAIjGH,EAAY6B,IAAM,SAAAC,GACV9B,EAAYl2B,EAAIg2B,IAChBD,EAAUA,EAAQlzB,MAAMqzB,EAAYl2B,EAAIg2B,GACxCA,EAAaE,EAAYl2B,OAGvBsjB,EAAI0U,EAAIC,KAAKlC,UACdzS,GAILkT,EAAelT,EAAE,GAAGznB,QACH,iBAANynB,EACAA,EAGS,IAAbA,EAAEznB,OAAeynB,EAAE,GAAKA,GARpB,MAWf4S,EAAYgC,MAAQ,SAAAF,UACZ5tB,EAAMtG,OAAOoyB,EAAYl2B,KAAOg4B,EACzB,MAEXxB,EAAe,GACRwB,IAGX9B,EAAYiC,KAAO,SAAAH,WACTI,EAAYJ,EAAIn8B,OAGbmE,EAAI,EAAGA,EAAIo4B,EAAWp4B,OACvBoK,EAAMtG,OAAOoyB,EAAYl2B,EAAIA,KAAOg4B,EAAIl0B,OAAO9D,UACxC,YAIfw2B,EAAe4B,GACRJ,GAGX9B,EAAYmC,QAAU,SAAA/tB,OACZutB,EAAMvtB,GAAO4rB,EAAYl2B,EACzBs4B,EAAYluB,EAAMtG,OAAO+zB,MAEb,MAAdS,GAAoC,MAAdA,WAGpBz8B,EAASuO,EAAMvO,OACf08B,EAAkBV,EAEf73B,EAAI,EAAGA,EAAIu4B,EAAkB18B,EAAQmE,IAAK,QAC9BoK,EAAMtG,OAAO9D,EAAIu4B,QAEzB,KACDv4B,iBAEC,SACA,gBAEAs4B,MACKrtB,EAAMb,EAAMe,OAAOotB,EAAiBv4B,EAAI,UACzCsK,GAAe,IAARA,EAIL,CAACguB,EAAWrtB,IAHfurB,EAAex2B,EAAI,GACZiL,WAMhB,OAOXirB,EAAYsC,YAAc,SAAAR,OAYlBS,EAXAnb,EAAQ,GACRob,EAAY,KACZC,GAAY,EACZC,EAAa,EACXC,EAAa,GACbC,EAAc,GACdj9B,EAASuO,EAAMvO,OACfk9B,EAAW7C,EAAYl2B,EACzBg5B,EAAU9C,EAAYl2B,EACtBA,EAAIk2B,EAAYl2B,EAChBi5B,GAAO,EAIPR,EADe,iBAART,EACI,SAAAkB,UAAQA,IAASlB,GAEjB,SAAAkB,UAAQlB,EAAIvpB,KAAKyqB,MAG7B,KAEKzC,EAAWrsB,EAAMtG,OAAO9D,MACT,IAAf44B,GAAoBH,EAAShC,IAC7BiC,EAAYtuB,EAAMe,OAAO6tB,EAASh5B,EAAIg5B,IAElCF,EAAY/5B,KAAK25B,GAGjBI,EAAY/5B,KAAK,KAErB25B,EAAYI,EACZtC,EAAex2B,EAAI+4B,GACnBE,GAAO,MACJ,IACCN,EAAW,CACM,MAAblC,GACwB,MAAxBrsB,EAAMtG,OAAO9D,EAAI,KACjBA,IACA44B,IACAD,GAAY,GAEhB34B,oBAGIy2B,OACC,KACDz2B,IACAy2B,EAAWrsB,EAAMtG,OAAO9D,GACxB84B,EAAY/5B,KAAKqL,EAAMe,OAAO6tB,EAASh5B,EAAIg5B,EAAU,IACrDA,EAAUh5B,EAAI,YAEb,IAC2B,MAAxBoK,EAAMtG,OAAO9D,EAAI,KACjBA,IACA24B,GAAY,EACZC,eAGH,QACA,KACDtb,EAAQ4Y,EAAYmC,QAAQr4B,KAExB84B,EAAY/5B,KAAKqL,EAAMe,OAAO6tB,EAASh5B,EAAIg5B,GAAU1b,GAErD0b,GADAh5B,GAAKsd,EAAM,GAAGzhB,OAAS,GACT,IAGd26B,EAAex2B,EAAI+4B,GACnBL,EAAYjC,EACZwC,GAAO,aAGV,IACDJ,EAAW95B,KAAK,KAChB65B,cAEC,IACDC,EAAW95B,KAAK,KAChB65B,cAEC,IACDC,EAAW95B,KAAK,KAChB65B,cAEC,QACA,QACA,QACKO,EAAWN,EAAW9qB,MACxB0oB,IAAa0C,EACbP,KAGApC,EAAex2B,EAAI+4B,GACnBL,EAAYS,EACZF,GAAO,KAGnBj5B,EACQnE,IACJo9B,GAAO,UAIVA,UAEFP,GAAwB,MAGnCxC,EAAYe,mBAAoB,EAChCf,EAAYkB,aAAe,GAC3BlB,EAAYjE,UAAW,EAIvBiE,EAAYkD,KAAO,SAAApB,MACI,iBAARA,EAAkB,KAEpB,IAAIh4B,EAAI,EAAGA,EAAIg4B,EAAIn8B,OAAQmE,OACxBoK,EAAMtG,OAAOoyB,EAAYl2B,EAAIA,KAAOg4B,EAAIl0B,OAAO9D,UACxC,SAGR,SAEAg4B,EAAIvpB,KAAKsnB,IAMxBG,EAAYmD,SAAW,SAAArB,UAAO5tB,EAAMtG,OAAOoyB,EAAYl2B,KAAOg4B,GAE9D9B,EAAYoD,YAAc,kBAAMlvB,EAAMtG,OAAOoyB,EAAYl2B,IAEzDk2B,EAAYqD,SAAW,kBAAMnvB,EAAMtG,OAAOoyB,EAAYl2B,EAAI,IAE1Dk2B,EAAYsD,SAAW,kBAAMpvB,GAE7B8rB,EAAYuD,eAAiB,eACnBl5B,EAAI6J,EAAM4sB,WAAWd,EAAYl2B,UAE/BO,EApTO,IAoTWA,EAvTR,IAuT8BA,IAAMg2B,GAtTnC,KAsT6Dh2B,GAGpF21B,EAAYwD,MAAQ,SAACzuB,EAAK0uB,EAAYC,GAClCxvB,EAAQa,EACRirB,EAAYl2B,EAAIuS,EAAIyjB,EAAaJ,EAAW,EAaxCE,EADA6D,WCvWIvvB,EAAOyvB,OAIfC,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,EACAC,EACAvI,EAbE3lB,EAAM/B,EAAMvO,OACdy+B,EAAQ,EACRC,EAAa,EAKXzE,EAAS,GACX0E,EAAW,WAONC,EAAUC,OACTvuB,EAAM+tB,EAAsBM,EAC5BruB,EAAM,MAASuuB,IAAWvuB,IAGhC2pB,EAAO/2B,KAAKqL,EAAMvH,MAAM23B,EAAUN,EAAsB,IACxDM,EAAWN,EAAsB,OAGhCA,EAAsB,EAAGA,EAAsB/tB,EAAK+tB,UACrDE,EAAKhwB,EAAM4sB,WAAWkD,KACV,IAAQE,GAAM,KAAUA,EAAK,WAKjCA,QACC,GACDG,IACAR,EAAmBG,gBAElB,QACKK,EAAa,SACRV,EAAK,sBAAuBK,iBAGtC,GACIK,GAAcE,kBAElB,IACDH,IACAR,EAAcI,gBAEb,SACKI,EAAQ,SACHT,EAAK,sBAAuBK,GAElCI,GAAUC,GAAcE,kBAE5B,MACGP,EAAsB/tB,EAAM,EAAG,CAAE+tB,oBAC9BL,EAAK,iBAAkBK,QAC7B,QACA,QACA,OACDpI,EAAU,EACVqI,EAAyBD,EACpBA,GAA4C,EAAGA,EAAsB/tB,EAAK+tB,UAC3EG,EAAMjwB,EAAM4sB,WAAWkD,IACb,QACNG,GAAOD,EAAI,CAAEtI,EAAU,WAChB,IAAPuI,EAAW,IACPH,GAAuB/tB,EAAM,SACtB0tB,EAAK,iBAAkBK,GAElCA,QAGJpI,kBACG+H,uBAAoBvf,OAAOqgB,aAAaP,QAASD,QACvD,MACGI,GAAeL,GAAuB/tB,EAAM,cAErC,KADXkuB,EAAMjwB,EAAM4sB,WAAWkD,EAAsB,QAGpCA,GAA4C,EAAGA,EAAsB/tB,OACtEkuB,EAAMjwB,EAAM4sB,WAAWkD,KACX,KAAgB,IAAPG,GAAsB,IAAPA,GAFuCH,UAI5E,GAAW,IAAPG,EAAW,KAElBL,EAAmBG,EAAyBD,EACvCA,GAA4C,EAAGA,EAAsB/tB,EAAM,IAEjE,MADXkuB,EAAMjwB,EAAM4sB,WAAWkD,MACLD,EAA2BC,GAClC,IAAPG,GAC6C,IAA7CjwB,EAAM4sB,WAAWkD,EAAsB,IAJoCA,QAM/EA,GAAuB/tB,EAAM,SACtB0tB,EAAK,uBAAwBM,GAExCD,kBAGH,MACIA,EAAsB/tB,EAAM,GAAoD,IAA7C/B,EAAM4sB,WAAWkD,EAAsB,UACpEL,EAAK,iBAAkBK,mBAMhC,IAAVI,EAEWT,EADNG,EAAmBF,GAAiBG,EAA2BD,EACpD,8BAEA,sBAF+BF,GAIzB,IAAfS,EACAV,EAAK,sBAAuBE,IAGvCU,GAAU,GACH3E,GDiPU8E,CAAQ3vB,EAAK2uB,GAEb,CAAC3uB,GAGd8qB,EAAUD,EAAO,GAEjBU,EAAe,IAGnBN,EAAY2E,IAAM,eACV3wB,EACEkiB,EAAa8J,EAAYl2B,GAAKoK,EAAMvO,cAEtCq6B,EAAYl2B,EAAI41B,IAChB1rB,EAAU2rB,EACVK,EAAYl2B,EAAI41B,GAEb,CACHxJ,WAAAA,EACAwJ,SAAUM,EAAYl2B,EACtB61B,6BAA8B3rB,EAC9B4wB,mBAAoB5E,EAAYl2B,GAAKoK,EAAMvO,OAAS,EACpDk/B,aAAc3wB,EAAM8rB,EAAYl2B,KAIjCk2B,GE5VL8E,GAAS,SAASA,EAAOv8B,EAASuN,EAASjO,OACzCk9B,EACE/E,EAAcgF,cAEXnwB,EAAM+Z,EAAK/kB,SACV,IAAI+J,EACN,CACIhL,MAAOo3B,EAAYl2B,EACnBiK,SAAUlM,EAASkM,SACnBlK,KAAMA,GAAQ,SACdmK,QAAS4a,GAEb9Y,YAICmvB,EAAO7Y,EAAKwC,OAEXpb,EAAU4Y,aAAevC,SAAYuC,EAAI1a,KAAKqzB,GAAW/E,EAAY6B,IAAIzV,MAC3E5Y,SACOA,EAGXqB,EAAM+Z,IAAuB,iBAARxC,sBACFA,oBAAa4T,EAAYoD,mBACtC,8BAID8B,EAAW9Y,EAAKwC,MACjBoR,EAAYgC,MAAM5V,UACXA,EAEXvX,EAAM+Z,uBAAoBxC,oBAAa4T,EAAYoD,6BAG9C1qB,EAAa9P,OACZmL,EAAWlM,EAASkM,eAEnB,CACHqE,WAAYrT,EAAkB6D,EAAOo3B,EAAYsD,YAAYhxB,KAAO,EACpE+F,SAAUtE,SAuDX,CACHisB,YAAAA,EACAlqB,QAAAA,EACAjO,SAAAA,EACAgO,mBA/Ced,EAAKowB,EAAWC,EAAcv9B,EAAU0b,OACnD/P,EACE6xB,EAAc,GACdC,EAAStF,MAGXsF,EAAO9B,MAAMzuB,GAAK,EAAO,SAAc6Z,EAAKhmB,GACxC2a,EAAS,CACLvP,QAAS4a,EACThmB,MAAOA,EAAQw8B,UAGlB,IAAWpZ,EAAGliB,EAAVsC,EAAI,EAAU4f,EAAImZ,EAAU/4B,GAAKA,IACtCtC,EAAIw7B,EAAOx7B,GACX0J,EAASuxB,EAAQ/Y,OAEbxY,EAAOnL,OAASyB,EAAIs7B,EACpB5xB,EAAOlL,UAAYT,EACnBw9B,EAAYx8B,KAAK2K,IAGjB6xB,EAAYx8B,KAAK,MAITy8B,EAAOX,MACXzO,WACR3S,EAAS,KAAM8hB,GAGf9hB,GAAS,EAAM,MAErB,MAAOjd,SACC,IAAIsN,EAAU,CAChBhL,MAAOtC,EAAEsC,MAAQw8B,EACjBpxB,QAAS1N,EAAE0N,SACZ8B,EAASjO,EAASkM,YAkBzBxP,MAAO,SAAUwQ,EAAKwO,EAAUgiB,OACxB5oB,EAEA6oB,EACAC,EACAC,EAHA7wB,EAAQ,KAIR8wB,EAAU,MAEdH,EAAcD,GAAkBA,EAAeC,qBAAiBV,EAAOc,cAAcL,EAAeC,kBAAkB,GACtHC,EAAcF,GAAkBA,EAAeE,uBAAmBX,EAAOc,cAAcL,EAAeE,aAAgB,GAElHl9B,EAAQme,sBACFmf,EAAgBt9B,EAAQme,cAAcof,mBACnCh8B,EAAI,EAAGA,EAAI+7B,EAAclgC,OAAQmE,IACtCiL,EAAM8wB,EAAc/7B,GAAGi8B,QAAQhxB,EAAK,CAAExM,QAAAA,EAASuN,QAAAA,EAASjO,SAAAA,KAI5D29B,GAAeD,GAAkBA,EAAeS,UAChDL,GAAYJ,GAAkBA,EAAeS,OAAUT,EAAeS,OAAS,IAAMR,GACrFE,EAAU5vB,EAAQmwB,sBACVp+B,EAASkM,UAAY2xB,EAAQ79B,EAASkM,WAAa,EAC3D2xB,EAAQ79B,EAASkM,WAAa4xB,EAAQhgC,QAK1CoP,EAAM4wB,GAFN5wB,EAAMA,EAAIhR,QAAQ,SAAU,OAERA,QAAQ,UAAW,IAAM0hC,EAC7C3vB,EAAQ3B,SAAStM,EAASkM,UAAYgB,MAOlCirB,EAAYwD,MAAMzuB,EAAKxM,EAAQk7B,WAAY,SAAc7U,EAAKhmB,SACpD,IAAIgL,EAAU,CAChBhL,MAAAA,EACAiB,KAAM,QACNmK,QAAS4a,EACT7a,SAAUlM,EAASkM,UACpB+B,KAGPsc,GAAKnrB,KAAKqF,UAAU/H,MAAQkD,KAC5BkV,EAAO,IAAIyV,GAAK1W,QAAQ,KAAMjU,KAAKs9B,QAAQmB,WAC3C9T,GAAKnrB,KAAKqF,UAAUhF,SAAWqV,EAC/BA,EAAKA,MAAO,EACZA,EAAKC,WAAY,EACjBD,EAAKG,iBAAmBA,EAAiB1B,UAE3C,MAAO9U,UACEid,EAAS,IAAI3P,EAAUtN,EAAGwP,EAASjO,EAASkM,eAWjDoyB,EAAUnG,EAAY2E,UACvBwB,EAAQjQ,WAAY,KAEjBliB,EAAUmyB,EAAQxG,6BAEjB3rB,IACDA,EAAU,qBACmB,MAAzBmyB,EAAQtB,aACR7wB,GAAW,iCACqB,MAAzBmyB,EAAQtB,aACf7wB,GAAW,iCACJmyB,EAAQvB,qBACf5wB,GAAW,iCAInBa,EAAQ,IAAIjB,EAAU,CAClB/J,KAAM,QACNmK,QAAAA,EACApL,MAAOu9B,EAAQzG,SACf3rB,SAAUlM,EAASkM,UACpB+B,OAGD2f,EAAS,SAAAnvB,UACXA,EAAIuO,GAASvO,GAAKwP,EAAQjB,QAGhBvO,aAAasN,IACftN,EAAI,IAAIsN,EAAUtN,EAAGwP,EAASjO,EAASkM,WAGpCwP,EAASjd,IAGTid,EAAS,KAAM5G,QAIC,IAA3BpU,EAAQ69B,sBAID3Q,QAHH7O,GAAS2O,cAAczf,EAAS2f,GAC/BQ,IAAItZ,IAmCjBooB,QAASA,EAAU,CAgBfmB,QAAS,mBAGDj+B,EAFEglB,EAAQxlB,KAAKwlB,MACftQ,EAAO,KAGE,MAEL1U,EAAOR,KAAKi3B,WAEZ/hB,EAAK9T,KAAKZ,MAGV+3B,EAAYjE,kBAGZiE,EAAYkD,KAAK,cAIrBj7B,EAAOR,KAAK4+B,aAER1pB,EAAOA,EAAKrR,OAAOrD,WAIvBA,EAAOglB,EAAMqZ,cAAgB7+B,KAAK8+B,eAAiB9+B,KAAKgV,WACpDwQ,EAAMvb,MAAK,GAAO,IAAUjK,KAAK++B,gBAAkB/+B,KAAKg/B,SAAS/0B,QAAUjK,KAAKi/B,SAEhF/pB,EAAK9T,KAAKZ,OACP,SACC0+B,GAAiB,EACd3G,EAAYgC,MAAM,MACrB2E,GAAiB,MAEhBA,gBAMNhqB,GAKX+hB,QAAS,cACDsB,EAAYkB,aAAav7B,OAAQ,KAC3B+4B,EAAUsB,EAAYkB,aAAa/qB,eAClC,IAAIic,GAAK5Z,QAASkmB,EAAQuC,KAAMvC,EAAQjmB,cAAeimB,EAAQ91B,MAAOf,KAOrF4+B,SAAU,CACNG,YAAa,kBACF7B,EAAQ9X,MAAMvb,MAAK,GAAM,IAOpCm1B,OAAQ,SAAUC,OACV/xB,EACEnM,EAAQo3B,EAAYl2B,EACtBi9B,GAAY,KAEhB/G,EAAYoB,OACRpB,EAAYgC,MAAM,KAClB+E,GAAY,OACT,GAAID,cACP9G,EAAYqB,aAIhBtsB,EAAMirB,EAAYmC,iBAKlBnC,EAAYwB,SAEL,IAAIpP,GAAKnL,OAAQlS,EAAInH,OAAO,GAAImH,EAAIE,OAAO,EAAGF,EAAIpP,OAAS,GAAIohC,EAAWn+B,EAAOf,GALpFm4B,EAAYqB,WAapB70B,QAAS,eACCgV,EAAIwe,EAAYgC,MAAM,MAAQhC,EAAY6B,IAAI,8DAChDrgB,SACO4Q,GAAKpoB,MAAMuC,YAAYiV,IAAM,IAAI4Q,GAAK7b,QAASiL,IAW9D9P,KAAM,eACEuF,EACAhM,EACA6P,EACElS,EAAQo3B,EAAYl2B,MAGtBk2B,EAAYkD,KAAK,cAIrBlD,EAAYoB,OAEZnqB,EAAO+oB,EAAY6B,IAAI,oCAMvB5qB,EAAOA,EAAK,IACZ6D,EAAOrT,KAAKu/B,eAAe/vB,MAEvBhM,EAAO6P,EAAKvW,UACAuW,EAAKmsB,YACbjH,EAAYwB,SACLv2B,KAIfA,EAAOxD,KAAKslB,UAAU9hB,GAEjB+0B,EAAYgC,MAAM,YAKvBhC,EAAYwB,SAEL,IAAIpP,GAAKxM,KAAM3O,EAAMhM,EAAMrC,EAAOf,GANrCm4B,EAAYqB,QAAQ,sDAjBpBrB,EAAYwB,UAmCpBwF,eAAgB,SAAU/vB,SAIf,CACH1M,MAAS8iB,EAAE0X,EAAQmC,SAAS,GAC5BC,QAAS9Z,EAAEhY,MACFgY,EAAEhY,IACb4B,EAAKvK,wBAEE2gB,EAAE9oB,EAAO0iC,SACP,CACH1iC,MAAAA,EACA0iC,KAAAA,YAKC5xB,UACE,CAAC4vB,EAAOF,EAAQ1vB,UAAW,yBAI1C0X,UAAW,SAAUqa,OAGbC,EACAp+B,EAHAq+B,EAAYF,GAAY,GACtBG,EAAgB,OAItBvH,EAAYoB,SAEC,IACLgG,EACAA,GAAW,MACR,MACHn+B,EAAQ87B,EAAQ5Z,mBAAqB1jB,KAAK+/B,cAAgBzC,EAAQtb,oBAK9DxgB,EAAMA,OAA+B,GAAtBA,EAAMA,MAAMtD,SAC3BsD,EAAQA,EAAMA,MAAM,IAGxBq+B,EAAUz+B,KAAKI,GAGf+2B,EAAYgC,MAAM,OAIlBhC,EAAYgC,MAAM,MAAQqF,KAC1BA,GAAuB,EACvBp+B,EAASq+B,EAAU3hC,OAAS,EAAK2hC,EAAU,GACrC,IAAIlV,GAAK9b,MAAMgxB,GACrBC,EAAc1+B,KAAKI,GACnBq+B,EAAY,WAIpBtH,EAAYwB,SACL6F,EAAuBE,EAAgBD,GAElDG,QAAS,kBACEhgC,KAAKigC,aACLjgC,KAAKqD,SACLrD,KAAKo/B,UACLp/B,KAAKkgC,qBAShBH,WAAY,eACJ/6B,EACAxD,KACJ+2B,EAAYoB,OACZ30B,EAAMuzB,EAAY6B,IAAI,oBAKjB7B,EAAYgC,MAAM,SAIvB/4B,EAAQ87B,EAAQ6C,gBAEZ5H,EAAYwB,SACL,IAAIpP,GAAKnI,WAAYxd,EAAKxD,GAEjC+2B,EAAYqB,eARZrB,EAAYqB,eAJZrB,EAAYqB,WAuBpB1Q,IAAK,eACG1nB,EACEL,EAAQo3B,EAAYl2B,KAE1Bk2B,EAAYe,mBAAoB,EAE3Bf,EAAYiC,KAAK,eAKtBh5B,EAAQxB,KAAKo/B,UAAYp/B,KAAK4P,YAAc5P,KAAK+e,YACzCwZ,EAAY6B,IAAI,mCAAqC,GAE7D7B,EAAYe,mBAAoB,EAEhCmE,EAAW,KAEJ,IAAI9S,GAAKxK,IAAqB,MAAf3e,EAAMA,OACxBA,aAAiBmpB,GAAKjM,UACtBld,aAAiBmpB,GAAK7L,SACtBtd,EAAQ,IAAImpB,GAAK1b,UAAWzN,EAAOL,GAAQA,EAAOf,GAdlDm4B,EAAYe,mBAAoB,GAyBxC1pB,SAAU,eACFwwB,EACA5wB,EACErO,EAAQo3B,EAAYl2B,KAE1Bk2B,EAAYoB,OACsB,MAA9BpB,EAAYoD,gBAA0BnsB,EAAO+oB,EAAY6B,IAAI,eAAgB,IAElE,OADXgG,EAAK7H,EAAYoD,gBACQ,MAAPyE,IAAe7H,EAAYqD,WAAWl5B,MAAM,OAAQ,KAE5DqJ,EAASuxB,EAAQyB,aAAavvB,MAChCzD,SACAwsB,EAAYwB,SACLhuB,SAGfwsB,EAAYwB,SACL,IAAIpP,GAAKjM,SAAUlP,EAAMrO,EAAOf,GAE3Cm4B,EAAYqB,WAIhByG,cAAe,eACPC,EACEn/B,EAAQo3B,EAAYl2B,KAEQ,MAA9Bk2B,EAAYoD,gBAA0B2E,EAAQ/H,EAAY6B,IAAI,0BACvD,IAAIzP,GAAKjM,oBAAc4hB,EAAM,IAAMn/B,EAAOf,IAQzD2e,SAAU,eACFvP,EACErO,EAAQo3B,EAAYl2B,KAEQ,MAA9Bk2B,EAAYoD,gBAA0BnsB,EAAO+oB,EAAY6B,IAAI,qBACtD,IAAIzP,GAAK7L,SAAUtP,EAAMrO,EAAOf,IAK/CmgC,cAAe,eACPD,EACEn/B,EAAQo3B,EAAYl2B,KAEQ,MAA9Bk2B,EAAYoD,gBAA0B2E,EAAQ/H,EAAY6B,IAAI,2BACvD,IAAIzP,GAAK7L,oBAAcwhB,EAAM,IAAMn/B,EAAOf,IAUzDiD,MAAO,eACCb,KACJ+1B,EAAYoB,OAEsB,MAA9BpB,EAAYoD,gBAA0Bn5B,EAAM+1B,EAAY6B,IAAI,oEACvD53B,EAAI,UACL+1B,EAAYwB,SACL,IAAIpP,GAAKpoB,MAAOC,EAAI,QAAI7C,EAAW6C,EAAI,IAGtD+1B,EAAYqB,WAGhB4G,aAAc,WACVjI,EAAYoB,WACNL,EAAoBf,EAAYe,kBACtCf,EAAYe,mBAAoB,MAC1Bvf,EAAIwe,EAAY6B,IAAI,gCAC1B7B,EAAYe,kBAAoBA,EAC3Bvf,GAILwe,EAAYqB,cACNv2B,EAAQsnB,GAAKpoB,MAAMuC,YAAYiV,UACjC1W,GACAk1B,EAAYiC,KAAKzgB,GACV1W,UAPPk1B,EAAYwB,UAgBpBkG,UAAW,eACH1H,EAAYuD,sBAIVt6B,EAAQ+2B,EAAY6B,IAAI,yCAC1B54B,EACO,IAAImpB,GAAKtO,UAAW7a,EAAM,GAAIA,EAAM,aASnD0+B,kBAAmB,eACXO,KAEJA,EAAKlI,EAAY6B,IAAI,8CAEV,IAAIzP,GAAK9H,kBAAmB4d,EAAG,KAS9CC,WAAY,eACJC,EACEx/B,EAAQo3B,EAAYl2B,EAE1Bk2B,EAAYoB,WAENiH,EAASrI,EAAYgC,MAAM,QACjBhC,EAAYgC,MAAM,SAOlCoG,EAAKpI,EAAY6B,IAAI,kBAEjB7B,EAAYwB,SACL,IAAIpP,GAAKrI,WAAYqe,EAAGnzB,OAAO,EAAGmzB,EAAGziC,OAAS,GAAImR,QAAQuxB,GAASz/B,EAAOf,GAErFm4B,EAAYqB,QAAQ,sCAThBrB,EAAYqB,YAkBxBhqB,SAAU,eACFJ,KAE8B,MAA9B+oB,EAAYoD,gBAA0BnsB,EAAO+oB,EAAY6B,IAAI,0BAA6B5qB,EAAK,IAWvGuvB,aAAc,SAAU8B,OAChB/c,EACArU,EACEpN,EAAIk2B,EAAYl2B,EAChBy+B,IAAYD,EACdrxB,EAAOqxB,KAEXtI,EAAYoB,OAERnqB,GAAuC,MAA9B+oB,EAAYoD,gBACjBnsB,EAAO+oB,EAAY6B,IAAI,yBAA2B,MAEtDtW,EAAU9jB,KAAKwlB,MAAMub,iBAEHD,GAAsC,OAA3BvI,EAAYiC,KAAK,OAAgC,OAAZhrB,EAAK,gBACnE+oB,EAAYqB,QAAQ,2CAInBkH,IACDtxB,EAAOA,EAAK,IAGZsU,GAAWwZ,EAAQ7tB,cACnBA,GAAY,OAGVxF,EAAO,IAAI0gB,GAAKlH,aAAajU,EAAMnN,EAAGjC,UACvC0gC,GAAWxD,EAAQJ,OACpB3E,EAAYwB,SACL9vB,IAGPsuB,EAAYwB,SACL,IAAIpP,GAAK/G,eAAe3Z,EAAM6Z,EAASrU,EAAWpN,EAAGjC,IAIpEm4B,EAAYqB,WAMhBjrB,OAAQ,SAASqyB,OACTtzB,EACA7O,EAEAmkB,EACArV,EACAgB,EAHExN,EAAQo3B,EAAYl2B,KAKrBk2B,EAAYiC,KAAKwG,EAAS,YAAc,eAI1C,KACChe,EAAS,KACTtV,EAAW,OACFsV,EAASuV,EAAY6B,IAAI,0BAC9Bv7B,EAAImB,KAAK4Y,YAILlL,EACAA,EAAStM,KAAKvC,GAEd6O,EAAW,CAAE7O,GAIrBmkB,EAASA,GAAUA,EAAO,GACrBtV,GACDN,EAAM,0CAEVuB,EAAS,IAAIgc,GAAK5H,OAAQ,IAAI4H,GAAKld,SAAUC,GAAWsV,EAAQ7hB,EAAOf,GACnEuN,EACAA,EAAWvM,KAAKuN,GAEhBhB,EAAa,CAAEgB,SAEd4pB,EAAYgC,MAAM,aAE3BiD,EAAO,OAEHwD,GACAxD,EAAO,MAGJ7vB,IAMXixB,WAAY,kBACD5+B,KAAK2O,QAAO,IAMvB6W,MAAO,CAiBHvb,KAAM,SAAU62B,EAASG,OAGjBnd,EAEApW,EACAlK,EACA09B,EANEl9B,EAAIu0B,EAAYoD,cAClBlsB,GAAY,EAEVtO,EAAQo3B,EAAYl2B,KAKhB,MAAN2B,GAAmB,MAANA,MAEjBu0B,EAAYoB,OAEZjsB,EAAW1N,KAAK0N,WAEF,IACN6qB,EAAYgC,MAAM,OAClB/2B,EAAOxD,KAAKwD,MAAK,GAAMA,KACvBi6B,EAAW,KACXyD,GAAY,IAGE,IAAdD,IACAnd,EAAU9jB,KAAK+gC,gBAED,IAAdE,IAAuBnd,cACvByU,EAAYqB,aAIZkH,IAAYhd,IAAYod,cAExB3I,EAAYqB,cAIXkH,GAAWxD,EAAQ7tB,cACpBA,GAAY,GAGZqxB,GAAWxD,EAAQJ,MAAO,CAC1B3E,EAAYwB,aACNvU,EAAQ,IAAImF,GAAKnF,MAAMrH,KAAMzQ,EAAUlK,EAAMrC,EAAOf,GAAW0jB,GAAWrU,UAC5EqU,EACO,IAAI6G,GAAK/G,eAAe4B,EAAO1B,EAASrU,GAGxC+V,GAKnB+S,EAAYqB,YAMhBlsB,SAAU,mBACFA,EACA7O,EACA+D,EACAu+B,EACAC,EACEl3B,EAAK,wDAEPk3B,EAAY7I,EAAYl2B,EACxBxD,EAAI05B,EAAY6B,IAAIlwB,IAKpBi3B,EAAO,IAAIxW,GAAKjlB,QAAS9C,EAAG/D,GAAG,EAAOuiC,EAAWhhC,GAC7CsN,EACAA,EAAStM,KAAK+/B,GAEdzzB,EAAW,CAAEyzB,GAEjBv+B,EAAI21B,EAAYgC,MAAM,YAEnB7sB,GAEXlK,KAAM,SAAU69B,OAMRzB,EACA0B,EACA9xB,EACA+xB,EACA//B,EACAmjB,EACAgC,EAXEqY,EAAW1B,EAAQ0B,SACnBnV,EAAW,CAAErmB,KAAK,KAAM2gB,UAAU,GACpCqd,EAAc,GACZ1B,EAAgB,GAChBD,EAAY,GAQd4B,GAAS,MAEblJ,EAAYoB,SAEC,IACL0H,EACA1c,EAAM2Y,EAAQ5Z,mBAAqB4Z,EAAQtb,iBACxC,IACHuW,EAAYkB,aAAav7B,OAAS,EAC9Bq6B,EAAYiC,KAAK,OAAQ,CACzB3Q,EAAS1F,UAAW,EAChBoU,EAAYgC,MAAM,OAASqF,IAC3BA,GAAuB,IAE1BA,EAAuBE,EAAgBD,GACnCz+B,KAAK,CAAE+iB,UAAU,UAG1BQ,EAAMqa,EAASpvB,YAAcovB,EAASjgB,YAAcigB,EAASgB,WAAahB,EAASj6B,WAAa/E,KAAKiK,MAAK,OAGzG0a,IAAQ8c,QAIbF,EAAW,KACP5c,EAAI+c,mBACJ/c,EAAI+c,oBAERlgC,EAAQmjB,MACJvE,EAAM,QAENihB,EAEI1c,EAAInjB,OAA6B,GAApBmjB,EAAInjB,MAAMtD,SACvBkiB,EAAMuE,EAAInjB,MAAM,IAGpB4e,EAAMuE,EAGNvE,IAAQA,aAAeuK,GAAKjM,UAAY0B,aAAeuK,GAAK7L,aACxDyZ,EAAYgC,MAAM,KAAM,IACpBiH,EAAYtjC,OAAS,IACjB0hC,GACAxyB,EAAM,yCAEVk0B,GAA0B,KAG9B9/B,EAAQ87B,EAAQ5Z,mBAAqB4Z,EAAQtb,cAEjC,KACJqf,SAGA9I,EAAYqB,UACZ/P,EAASrmB,KAAO,GACTqmB,EAJPzc,EAAM,iDAOdm0B,EAAY/xB,EAAO4Q,EAAI5Q,UACpB,GAAI+oB,EAAYiC,KAAK,OAAQ,KAC3B6G,EAAQ,CACTxX,EAAS1F,UAAW,EAChBoU,EAAYgC,MAAM,OAASqF,IAC3BA,GAAuB,IAE1BA,EAAuBE,EAAgBD,GACnCz+B,KAAK,CAAEoO,KAAMmV,EAAInV,KAAM2U,UAAU,UAGtCwC,GAAS,OAEL0a,IACR7xB,EAAO+xB,EAAWnhB,EAAI5Q,KACtBhO,EAAQ,MAIZA,GACAggC,EAAYpgC,KAAKI,GAGrBq+B,EAAUz+B,KAAK,CAAEoO,KAAK+xB,EAAU//B,MAAAA,EAAOmlB,OAAAA,IAEnC4R,EAAYgC,MAAM,KAClBkH,GAAS,IAGbA,EAAoC,MAA3BlJ,EAAYgC,MAAM,OAEbqF,KAEN0B,GACAl0B,EAAM,yCAGVwyB,GAAuB,EAEnB4B,EAAYtjC,OAAS,IACrBsD,EAAQ,IAAImpB,GAAK9b,MAAO2yB,IAE5B1B,EAAc1+B,KAAK,CAAEoO,KAAAA,EAAMhO,MAAAA,EAAOmlB,OAAAA,IAElCnX,EAAO,KACPgyB,EAAc,GACdF,GAA0B,UAIlC/I,EAAYwB,SACZlQ,EAASrmB,KAAOo8B,EAAuBE,EAAgBD,EAChDhW,GAqBXgV,WAAY,eACJrvB,EAEA9M,EACAsS,EACA2sB,EAHAzd,EAAS,GAITC,GAAW,OACoB,MAA9BoU,EAAYoD,eAAuD,MAA9BpD,EAAYoD,eAClDpD,EAAYkD,KAAK,gBAIrBlD,EAAYoB,OAEZj3B,EAAQ61B,EAAY6B,IAAI,gEACb,CACP5qB,EAAO9M,EAAM,OAEPk/B,EAAU5hC,KAAKwD,MAAK,MAC1B0gB,EAAS0d,EAAQp+B,KACjB2gB,EAAWyd,EAAQzd,UAOdoU,EAAYgC,MAAM,iBACnBhC,EAAYqB,QAAQ,0BAIxBrB,EAAYkB,aAAav7B,OAAS,EAE9Bq6B,EAAYiC,KAAK,UACjBmH,EAAOnE,EAAOF,EAAQuE,WAAY,uBAGtC7sB,EAAUsoB,EAAQwE,eAGdvJ,EAAYwB,SACL,IAAIpP,GAAKnF,MAAMvB,WAAYzU,EAAM0U,EAAQlP,EAAS2sB,EAAMxd,GAE/DoU,EAAYqB,eAGhBrB,EAAYwB,UAIpBgH,YAAa,eACLjsB,EAEEgP,EAAU,MAEkB,MAA9ByU,EAAYoD,sBAIH,IACTpD,EAAYoB,SAEZ7kB,EAAO9U,KAAK+hC,gBACU,KAATjtB,EAAa,CACtByjB,EAAYqB,gBAGhB9V,EAAQ1iB,KAAK0T,GACbyjB,EAAYwB,gBAEZjW,EAAQ5lB,OAAS,EACV4lB,WAIfie,YAAa,cACTxJ,EAAYoB,OAEPpB,EAAYgC,MAAM,UAKjB/qB,EAAO+oB,EAAY6B,IAAI,mCAExB7B,EAAYgC,MAAM,YAKnB/qB,GAAiB,KAATA,GACR+oB,EAAYwB,SACLvqB,QAGX+oB,EAAYqB,UATRrB,EAAYqB,eAPZrB,EAAYqB,YAuBxBuG,OAAQ,eACEnB,EAAWh/B,KAAKg/B,gBAEfh/B,KAAKi3B,WAAa+H,EAASgB,WAAahB,EAASpvB,YAAcovB,EAAS9V,OAC3E8V,EAASjgB,YAAcigB,EAAS/0B,QAAU+0B,EAASj6B,WAAa/E,KAAKwlB,MAAMvb,MAAK,IAChF+0B,EAAS0B,cAQjBxD,IAAK,kBACM3E,EAAYgC,MAAM,MAAQhC,EAAYkD,KAAK,MAQtDgE,QAAS,eACDj+B,KAGC+2B,EAAY6B,IAAI,qBACrB54B,EAAQ+2B,EAAY6B,IAAI,WAEpB54B,EAAQg8B,EAAOF,EAAQ0B,SAASpvB,SAAU,yBAC1CpO,cAAaA,EAAMgO,KAAKtK,MAAM,SAElCu4B,EAAW,KACJ,IAAI9S,GAAKnL,OAAO,2BAAqBhe,SAehDoX,QAAS,eACD/Z,EACA+D,EACA8B,EACEvD,EAAQo3B,EAAYl2B,KAE1BO,EAAI5C,KAAK2F,cAET9G,EAAI05B,EAAY6B,IAAI,uBAChB7B,EAAY6B,IAAI,+EAChB7B,EAAYgC,MAAM,MAAQhC,EAAYgC,MAAM,MAAQv6B,KAAKgiC,aACzDzJ,EAAY6B,IAAI,kBAAqB7B,EAAY6B,IAAI,iBACrDp6B,KAAKg/B,SAASqB,mBAGd9H,EAAYoB,OACRpB,EAAYgC,MAAM,MACb71B,EAAI1E,KAAKyU,UAAS,KAAW8jB,EAAYgC,MAAM,MAChD17B,EAAI,IAAI8rB,GAAKxlB,MAAOT,GACpB6zB,EAAYwB,UAEZxB,EAAYqB,QAAQ,uBAGxBrB,EAAYwB,UAIhBl7B,SAAY,IAAI8rB,GAAKjlB,QAAS9C,EAAG/D,EAAGA,aAAa8rB,GAAKjM,SAAUvd,EAAOf,IAY/EuF,WAAY,eACJ/C,EAAI21B,EAAYoD,iBAEV,MAAN/4B,EAAW,CACX21B,EAAYoB,WACNsI,EAAoB1J,EAAY6B,IAAI,mBACtC6H,SACA1J,EAAYwB,SACL,IAAIpP,GAAKtlB,WAAY48B,GAEhC1J,EAAYqB,aAGN,MAANh3B,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,EAAW,KAC/D21B,EAAYl2B,IACF,MAANO,GAA2C,MAA9B21B,EAAYoD,gBACzB/4B,EAAI,KACJ21B,EAAYl2B,KAETk2B,EAAYyB,gBAAkBzB,EAAYl2B,WAC1C,IAAIsoB,GAAKtlB,WAAYzC,GACzB,OAAI21B,EAAYyB,cAAc,GAC1B,IAAIrP,GAAKtlB,WAAY,KAErB,IAAIslB,GAAKtlB,WAAY,OAYpCoP,SAAU,SAAUytB,OAEZx0B,EACAC,EACA/K,EACA/D,EACAuyB,EACA+Q,EACAv0B,EAPEzM,EAAQo3B,EAAYl2B,MAQ1B6/B,GAAoB,IAAXA,GACDA,IAAWv0B,EAAa3N,KAAK2O,WAAeuzB,IAAWC,EAAO5J,EAAYiC,KAAK,WAAc37B,EAAImB,KAAK4Y,cACtGupB,EACAv0B,EAAY4vB,EAAOx9B,KAAK6hC,WAAY,sBAC7Bj0B,EACPR,EAAM,qDACCO,EAEHyjB,EADAA,EACaA,EAAWvtB,OAAO8J,GAElBA,GAGbyjB,GAAchkB,EAAM,kDACxBxK,EAAI21B,EAAYoD,cACZjuB,EACAA,EAAStM,KAAKvC,GAEd6O,EAAW,CAAE7O,GAEjBA,EAAI,MAEE,MAAN+D,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,QAKxD8K,SAAmB,IAAIid,GAAKld,SAAUC,EAAU0jB,EAAYxjB,EAAWzM,EAAOf,GAC9EgxB,GAAchkB,EAAM,2EAE5B8G,UAAW,mBACHlQ,EACAkQ,GAEAlQ,EAAIhE,KAAKyU,cAILP,EACAA,EAAU9S,KAAK4C,GAEfkQ,EAAY,CAAElQ,GAElBu0B,EAAYkB,aAAav7B,OAAS,EAC9B8F,EAAE4J,WAAasG,EAAUhW,OAAS,GAClCkP,EAAM,2DAELmrB,EAAYgC,MAAM,OACnBv2B,EAAE4J,WACFR,EAAM,2DAEVmrB,EAAYkB,aAAav7B,OAAS,SAE/BgW,GAEX8tB,UAAW,cACFzJ,EAAYgC,MAAM,UAGnBv1B,EACAob,EACAze,EAHEq9B,EAAWh/B,KAAKg/B,gBAKhBh6B,EAAMg6B,EAASqB,mBACjBr7B,EAAMw4B,EAAO,oDAGjB77B,EAAK42B,EAAY6B,IAAI,iBAEjBha,EAAM4e,EAASI,UAAY7G,EAAY6B,IAAI,aAAe7B,EAAY6B,IAAI,YAAc4E,EAASqB,iBAGrG5C,EAAW,KAEJ,IAAI9S,GAAKpL,UAAWva,EAAKrD,EAAIye,KAOxC0hB,MAAO,eACCriB,KACA8Y,EAAYgC,MAAM,OAAS9a,EAAUzf,KAAKy+B,YAAclG,EAAYgC,MAAM,YACnE9a,GAIf2iB,aAAc,eACNN,EAAQ9hC,KAAK8hC,eAEbA,IACAA,EAAQ,IAAInX,GAAK1W,QAAQ,KAAM6tB,IAE5BA,GAGXpe,gBAAiB,eACTke,EACA1d,EACAC,KAEJoU,EAAYoB,QACRpB,EAAY6B,IAAI,aAQhBlW,GADA0d,EAAU5hC,KAAKwlB,MAAMhiB,MAAK,IACTA,KACjB2gB,EAAWyd,EAAQzd,SACdoU,EAAYgC,MAAM,WAKrB6H,EAAepiC,KAAKoiC,kBACtBA,SACA7J,EAAYwB,SACR7V,EACO,IAAIyG,GAAKnF,MAAMvB,WAAW,KAAMC,EAAQke,EAAc,KAAMje,GAEhE,IAAIwG,GAAKxP,gBAAgBinB,GAEpC7J,EAAYqB,eAZJrB,EAAYqB,WAkBxB5kB,QAAS,eACDd,EACAC,EACA9D,KAEJkoB,EAAYoB,OAER74B,EAAQ0P,kBACRH,EAAYY,EAAasnB,EAAYl2B,KAGzC6R,EAAYlU,KAAKkU,eAECC,EAAQnU,KAAK8hC,SAAU,CACrCvJ,EAAYwB,aACN/kB,EAAU,IAAI2V,GAAK1W,QAASC,EAAWC,EAAOrT,EAAQsT,sBACxDtT,EAAQ0P,kBACRwE,EAAQ3E,UAAYA,GAEjB2E,EAEPujB,EAAYqB,WAGpBkF,YAAa,eACLtvB,EACAhO,EAEA6gC,EAEA5yB,EACAC,EACA9J,EALEzE,EAAQo3B,EAAYl2B,EAEpBO,EAAI21B,EAAYoD,iBAKZ,MAAN/4B,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,KAE3C21B,EAAYoB,OAEZnqB,EAAOxP,KAAK4P,YAAc5P,KAAKsiC,eACrB,KACN18B,EAA6B,iBAAT4J,KAGhBhO,EAAQxB,KAAK0jB,qBAET2e,GAAQ,GAIhB9J,EAAYkB,aAAav7B,OAAS,GAC7BsD,EAAO,IAIRkO,GAAS9J,GAAc4J,EAAKtR,OAAS,GAAKsR,EAAKY,MAAM5O,MAIjDA,EADAgO,EAAK,GAAGhO,OAAuC,OAA9BgO,EAAK,GAAGhO,MAAM0D,MAAM,EAAG,GAChClF,KAAKuiC,kBAKLviC,KAAKwiC,wBAGbjK,EAAYwB,SAEL,IAAKpP,GAAKpb,YAAaC,EAAMhO,GAAO,EAAOkO,EAAOvO,EAAOf,GAG/DoB,IACDA,EAAQxB,KAAKwB,SAGbA,EACAiO,EAAYzP,KAAKyP,YACV7J,IAEPpE,EAAQxB,KAAKuiC,sBAIjB/gC,IAAUxB,KAAKk9B,OAASmF,UACxB9J,EAAYwB,SACL,IAAKpP,GAAKpb,YAAaC,EAAMhO,EAAOiO,EAAWC,EAAOvO,EAAOf,GAGpEm4B,EAAYqB,eAGhBrB,EAAYqB,WAGpB4I,eAAgB,eACNrhC,EAAQo3B,EAAYl2B,EACpBK,EAAQ61B,EAAY6B,IAAI,gCAC1B13B,SACO,IAAIioB,GAAK1b,UAAWvM,EAAM,GAAIvB,IAY7CohC,gBAAiB,SAAUE,OACnBpgC,EACAxD,EACA6jC,EACAlhC,EACE64B,EAAMoI,GAAe,IACrBthC,EAAQo3B,EAAYl2B,EACpB0J,EAAS,YAEN42B,QACCpH,EAAOhD,EAAYoD,oBACN,iBAARtB,EACAkB,IAASlB,EAETA,EAAIvpB,KAAKyqB,OAGpBoH,KAGJnhC,EAAQ,OAEJ3C,EAAImB,KAAKi3B,WAELz1B,EAAMJ,KAAKvC,IAGfA,EAAImB,KAAKmgC,WAEL3+B,EAAMJ,KAAKvC,SAEVA,MAET6jC,EAAOC,IAEHnhC,EAAMtD,OAAS,EAAG,IAClBsD,EAAQ,IAAImpB,GAAKjN,WAAYlc,GACzBkhC,SACOlhC,EAGPuK,EAAO3K,KAAKI,GAGe,MAA3B+2B,EAAYqD,YACZ7vB,EAAO3K,KAAK,IAAIupB,GAAK1b,UAAU,IAAK9N,OAG5Co3B,EAAYoB,OAEZn4B,EAAQ+2B,EAAYsC,YAAYR,GAErB,IACc,iBAAV74B,GACP4L,sBAAmB5L,OAAU,SAEZ,IAAjBA,EAAMtD,QAA6B,MAAbsD,EAAM,UAC5B+2B,EAAYwB,SACL,IAAIpP,GAAK1b,UAAU,GAAI9N,OAE9B8c,MACC5b,EAAI,EAAGA,EAAIb,EAAMtD,OAAQmE,OAC1B4b,EAAOzc,EAAMa,GACT5B,MAAMC,QAAQud,GAEdlS,EAAO3K,KAAK,IAAIupB,GAAKnL,OAAOvB,EAAK,GAAIA,EAAK,IAAI,EAAM9c,EAAOf,QAE1D,CACGiC,IAAMb,EAAMtD,OAAS,IACrB+f,EAAOA,EAAK1Y,YAGVoa,EAAQ,IAAIgL,GAAKnL,OAAO,IAAMvB,GAAM,EAAM9c,EAAOf,GACvDuf,EAAMC,cAAgB,aACtBD,EAAME,UAAY,cAClB9T,EAAO3K,KAAKue,UAGpB4Y,EAAYwB,SACL,IAAIpP,GAAKjN,WAAW3R,GAAQ,GAEvCwsB,EAAYqB,mBAaN,eACF/nB,EACA2O,EACErf,EAAQo3B,EAAYl2B,EAEpBugC,EAAMrK,EAAY6B,IAAI,mBAExBwI,EAAK,KACCpmC,GAAWomC,EAAM5iC,KAAK6iC,gBAAkB,OAAS,MAElDhxB,EAAO7R,KAAKg/B,SAASI,UAAYp/B,KAAKg/B,SAAS9V,aAChD1I,EAAWxgB,KAAK8iC,gBAEXvK,EAAYgC,MAAM,OACnBhC,EAAYl2B,EAAIlB,EAChBiM,EAAM,gEAEVoT,EAAWA,GAAY,IAAImK,GAAK9b,MAAO2R,GAChC,IAAImK,GAAK5J,OAAQlP,EAAM2O,EAAUhkB,EAAS2E,EAAOf,GAGxDm4B,EAAYl2B,EAAIlB,EAChBiM,EAAM,gCAKlBy1B,cAAe,eACP74B,EAEA+4B,EACAvhC,EAFEhF,EAAU,OAKX+7B,EAAYgC,MAAM,YAAe,WAElCvwB,EAAIhK,KAAKgjC,eACF,QAEHxhC,GAAQ,EADRuhC,EAAa/4B,OAGJ,MACD+4B,EAAa,OACbvhC,GAAQ,YAEP,OACDuhC,EAAa,WACbvhC,GAAQ,KAGhBhF,EAAQumC,GAAcvhC,GACjB+2B,EAAYgC,MAAM,kBAEtBvwB,UACTyzB,EAAW,KACJjhC,GAGXwmC,aAAc,eACJtmC,EAAM67B,EAAY6B,IAAI,0DACxB19B,SACOA,EAAI,IAInBumC,aAAc,eAGNpkC,EACA0lB,EAHEya,EAAWh/B,KAAKg/B,SAChB1+B,EAAQ,GAGdi4B,EAAYoB,WAER96B,EAAImgC,EAASj6B,WAAai6B,EAASpvB,YAAcovB,EAASG,eAEtD7+B,EAAMc,KAAKvC,GACJ05B,EAAYgC,MAAM,OACzBhW,EAAIvkB,KAAK+e,WACTlgB,EAAImB,KAAKwB,QACL+2B,EAAYgC,MAAM,KACdhW,GAAK1lB,EACLyB,EAAMc,KAAK,IAAIupB,GAAKxlB,MAAO,IAAIwlB,GAAKpb,YAAagV,EAAG1lB,EAAG,KAAM,KAAM05B,EAAYl2B,EAAGjC,GAAU,KACrFvB,EACPyB,EAAMc,KAAK,IAAIupB,GAAKxlB,MAAOtG,IAE3BuO,EAAM,yCAGVA,EAAM,sBAAyB,gBAGlCvO,MAET05B,EAAYwB,SACRz5B,EAAMpC,OAAS,SACR,IAAIysB,GAAKjN,WAAYpd,IAIpCwiC,cAAe,eAGPjkC,EAFEmgC,EAAWh/B,KAAKg/B,SAChBxe,EAAW,SAGb3hB,EAAImB,KAAKijC,mBAELziB,EAASpf,KAAKvC,IACT05B,EAAYgC,MAAM,oBAEvB17B,EAAImgC,EAASpvB,YAAcovB,EAASG,iBAEhC3e,EAASpf,KAAKvC,IACT05B,EAAYgC,MAAM,kBAG1B17B,UAEF2hB,EAAStiB,OAAS,EAAIsiB,EAAW,MAG5C3iB,MAAO,eACC2iB,EACArM,EACAtW,EACAwS,EACElP,EAAQo3B,EAAYl2B,KAEtBvB,EAAQ0P,kBACRH,EAAYY,EAAa9P,IAG7Bo3B,EAAYoB,OAERpB,EAAYiC,KAAK,iBACjBha,EAAWxgB,KAAK8iC,iBAEhB3uB,EAAQnU,KAAK8hC,UAGT10B,EAAM,iEAGVmrB,EAAYwB,SAEZl8B,EAAQ,IAAI8sB,GAAKpK,MAAOpM,EAAOqM,EAAUrf,EAAOf,GAC5CU,EAAQ0P,kBACR3S,EAAMwS,UAAYA,GAGfxS,EAGX06B,EAAYqB,WAShB5O,OAAQ,eACAnZ,EACArO,EACAhH,EACE2E,EAAQo3B,EAAYl2B,KACZk2B,EAAY6B,IAAI,gBAErB,IAID59B,GAHJgH,EAAOxD,KAAKkjC,cAGE,CACNA,WAAY1/B,EACZ2d,UAAU,GAIJ,CAAEA,UAAU,GAGrBtP,EAAO7R,KAAKg/B,SAASI,UAAYp/B,KAAKg/B,SAAS9V,aAE3CqP,EAAYgC,MAAM,OACnBhC,EAAYl2B,EAAIlB,EAChBiM,EAAM,kCAEH,IAAIud,GAAK5J,OAAQlP,EAAM,KAAMrV,EAAS2E,EAAOf,GAGpDm4B,EAAYl2B,EAAIlB,EAChBiM,EAAM,iCAKlB81B,WAAY,cAER3K,EAAYoB,QACPpB,EAAYgC,MAAM,YACnBhC,EAAYqB,UACL,SAELp2B,EAAO+0B,EAAY6B,IAAI,6BACzB52B,EAAK,IACL+0B,EAAYwB,SACLv2B,EAAK,GAAG+B,SAGfgzB,EAAYqB,UACL,OASfqF,OAAQ,eAEAzvB,EACAhO,EACA2S,EACAgvB,EACAC,EACAC,EACAC,EAPEniC,EAAQo3B,EAAYl2B,EAQtBkhC,GAAW,EACX3oB,GAAW,KAEmB,MAA9B2d,EAAYoD,kBAEhBn6B,EAAQxB,KAAA,UAAoBA,KAAKgrB,UAAYhrB,KAAKnC,eAEvC2D,KAGX+2B,EAAYoB,OAEZnqB,EAAO+oB,EAAY6B,IAAI,qBAIvB+I,EAAwB3zB,EACF,KAAlBA,EAAKrJ,OAAO,IAAaqJ,EAAK9L,QAAQ,IAAK,GAAK,IAChDy/B,aAA4B3zB,EAAKtK,MAAMsK,EAAK9L,QAAQ,IAAK,GAAK,KAG1Dy/B,OACC,WACDC,GAAgB,EAChBG,GAAW,YAEV,aACDF,GAAgB,EAChBE,GAAW,YAEV,iBACA,iBACDH,GAAgB,YAEf,gBACA,YACDE,GAAa,EACb1oB,GAAW,gBAGX0oB,GAAa,KAIrB/K,EAAYkB,aAAav7B,OAAS,EAE9BklC,GACA5hC,EAAQxB,KAAKmgC,WAET/yB,qBAAkBoC,kBAEf6zB,GACP7hC,EAAQxB,KAAKgiB,eAET5U,qBAAkBoC,kBAEf8zB,IACP9hC,EAAQxB,KAAKuiC,gBAAgB,SAC7BgB,EAA0C,MAA9BhL,EAAYoD,cACnBn6B,EAKKA,EAAMA,QACZA,EAAQ,MALH+hC,GAA0C,MAA9BhL,EAAYoD,eACzBvuB,YAASoC,mDAQjB+zB,IACApvB,EAAQnU,KAAKoiC,gBAGbjuB,IAAWovB,GAAY/hC,GAAS+2B,EAAYgC,MAAM,YAClDhC,EAAYwB,SACL,IAAKpP,GAAKhQ,OAAQnL,EAAMhO,EAAO2S,EAAOhT,EAAOf,EAChDU,EAAQ0P,gBAAkBS,EAAa9P,GAAS,KAChDyZ,GAIR2d,EAAYqB,QAAQ,qCAWxBp4B,MAAO,eACC3C,EACE2iC,EAAc,GACdrgC,EAAQo3B,EAAYl2B,SAGtBxD,EAAImB,KAAKgiB,gBAELwf,EAAYpgC,KAAKvC,IACZ05B,EAAYgC,MAAM,kBAEtB17B,MAEL2iC,EAAYtjC,OAAS,SACd,IAAIysB,GAAK9b,MAAO2yB,EAAargC,IAG5CsO,UAAW,cAC2B,MAA9B8oB,EAAYoD,qBACLpD,EAAY6B,IAAI,kBAG/BoJ,IAAK,eACG5hC,EACA/C,KAEJ05B,EAAYoB,OACRpB,EAAYgC,MAAM,YAClB34B,EAAI5B,KAAKyjC,aACAlL,EAAYgC,MAAM,MACvBhC,EAAYwB,UACZl7B,EAAI,IAAI8rB,GAAKjN,WAAY,CAAC9b,KACxBic,QAAS,EACJhf,QAEX05B,EAAYqB,QAAQ,gBAGxBrB,EAAYqB,WAEhB8J,eAAgB,eACR/d,EACA/jB,EACAD,EACAgiC,EACApmB,KACJoI,EAAI3lB,KAAK4jC,UACF,KACHrmB,EAAWgb,EAAYyB,cAAc,IAE7BzB,EAAYkD,KAAK,aADZ,IAKTlD,EAAYoB,SAEZh4B,EAAK42B,EAAYgC,MAAM,MAAQhC,EAAYgC,MAAM,MAAQhC,EAAYiC,KAAK,OAEjE,CAAEjC,EAAYwB,oBAEvBn4B,EAAI5B,KAAK4jC,WAED,CAAErL,EAAYqB,gBACtBrB,EAAYwB,SAEZpU,EAAE7H,YAAa,EACflc,EAAEkc,YAAa,EACf6lB,EAAY,IAAIhZ,GAAKtN,UAAW1b,EAAI,CAACgiC,GAAahe,EAAG/jB,GAAI2b,GACzDA,EAAWgb,EAAYyB,cAAc,UAElC2J,GAAahe,IAG5B8d,SAAU,eACF9d,EACA/jB,EACAD,EACAgiC,EACApmB,KACJoI,EAAI3lB,KAAK0jC,iBACF,KACHnmB,EAAWgb,EAAYyB,cAAc,IAEjCr4B,EAAK42B,EAAY6B,IAAI,cAAiB7c,IAAagb,EAAYgC,MAAM,MAAQhC,EAAYgC,MAAM,SAI/F34B,EAAI5B,KAAK0jC,mBAKT/d,EAAE7H,YAAa,EACflc,EAAEkc,YAAa,EACf6lB,EAAY,IAAIhZ,GAAKtN,UAAW1b,EAAI,CAACgiC,GAAahe,EAAG/jB,GAAI2b,GACzDA,EAAWgb,EAAYyB,cAAc,UAElC2J,GAAahe,IAG5Bkc,WAAY,eACJjgC,EACAC,EAEA+L,EADEzM,EAAQo3B,EAAYl2B,KAG1BT,EAAI5B,KAAK4N,WAAU,GACZ,MAEM2qB,EAAYkD,KAAK,qBAAwBlD,EAAYgC,MAAM,OAGhE14B,EAAI7B,KAAK4N,WAAU,KAInBA,EAAY,IAAI+c,GAAKlI,UAAW,KAAM7U,GAAahM,EAAGC,EAAGV,UAEtDyM,GAAahM,IAG5BgM,UAAW,SAAUi2B,OACb93B,EACA+3B,EACAC,KAKJh4B,EAAS/L,KAAKgkC,aAAaH,OAI3BC,EAPWvL,EAAYiC,KAAK,MAQf,MACTuJ,EAAO/jC,KAAK4N,UAAUi2B,WAElB93B,EAAS,IAAI4e,GAAKlI,UAAWqhB,EAAS/3B,EAAQg4B,UAK/Ch4B,IAEXi4B,aAAc,SAAUH,OAChB93B,EACA+3B,EACAC,EAGMpC,EAFJ5hC,EAAOC,QAYb+L,GAVU41B,EAAO5hC,EAAKkkC,iBAAiBJ,IAAgB9jC,EAAKmkC,qBAAqBL,KAC/DA,EAGPlC,EAFI5hC,EAAKokC,gBAAgBN,OAYpCC,EAPWvL,EAAYiC,KAAK,OAQf,MACTuJ,EAAO/jC,KAAKgkC,aAAaH,WAErB93B,EAAS,IAAI4e,GAAKlI,UAAWqhB,EAAS/3B,EAAQg4B,UAK/Ch4B,IAEXk4B,iBAAkB,SAAUJ,MACpBtL,EAAYiC,KAAK,OAAQ,KACnBzuB,EAAS/L,KAAKkkC,qBAAqBL,UACrC93B,IACAA,EAAO2W,QAAU3W,EAAO2W,QAErB3W,IAGfm4B,qBAAsB,SAAUL,OAiBxBO,KACJ7L,EAAYoB,OACPpB,EAAYiC,KAAK,SAItB4J,WAtB2CC,OACnCD,KACJ7L,EAAYoB,OACZyK,EAAOC,EAAGz2B,UAAUi2B,OAKftL,EAAYgC,MAAM,YAIvBhC,EAAYwB,SACLqK,EAJH7L,EAAYqB,eAJZrB,EAAYqB,UAiBb0K,CAAkCtkC,aAErCu4B,EAAYwB,SACLqK,KAGXA,EAAOpkC,KAAKmkC,gBAAgBN,OAKvBtL,EAAYgC,MAAM,YAIvBhC,EAAYwB,SACLqK,EAJH7L,EAAYqB,oCAA6BrB,EAAYoD,yBAJrDpD,EAAYqB,eAXZrB,EAAYqB,WAqBpBuK,gBAAiB,SAAUN,OAGnBjiC,EACAC,EACAe,EACAjB,EALEq9B,EAAWh/B,KAAKg/B,SAChB79B,EAAQo3B,EAAYl2B,WAMjBs/B,WACE3hC,KAAKyjC,YAAczE,EAASj6B,WAAai6B,EAASI,UAAYJ,EAASG,iBAIlFv9B,GAFA+/B,EAAOA,EAAK3tB,KAAKhU,gBAITu4B,EAAYgC,MAAM,KAEd54B,EADA42B,EAAYgC,MAAM,KACb,KAEA,IAGThC,EAAYgC,MAAM,KAEd54B,EADA42B,EAAYgC,MAAM,KACb,KAEA,IAGThC,EAAYgC,MAAM,OAEd54B,EADA42B,EAAYgC,MAAM,KACb,KACEhC,EAAYgC,MAAM,KACpB,KAEA,KAGT54B,GACAE,EAAI8/B,KAEA/+B,EAAI,IAAI+nB,GAAKlI,UAAW9gB,EAAIC,EAAGC,EAAGV,GAAO,GAEzCiM,EAAM,uBAGVxK,EAAI,IAAI+nB,GAAKlI,UAAW,IAAK7gB,EAAG,IAAI+oB,GAAK7b,QAAS,QAAS3N,GAAO,GAE/DyB,GAQfghC,QAAS,eAEDlhB,EADEsc,EAAWh/B,KAAKg/B,SAGlBzG,EAAYkD,KAAK,eACjB/Y,EAAS6V,EAAYgC,MAAM,UAG3BvwB,EAAIhK,KAAKwjC,OAASxE,EAASiB,aACvBjB,EAAS37B,SAAW27B,EAASpvB,YAC7BovB,EAASjgB,YAAcigB,EAAS/0B,QAChC+0B,EAASI,QAAO,IAASJ,EAASwB,gBAClCxB,EAASG,qBAEbzc,IACA1Y,EAAE8T,YAAa,EACf9T,EAAI,IAAI2gB,GAAK7H,SAAU9Y,IAGpBA,GAUXgY,WAAY,eAEJnjB,EACA0lC,EAFEvF,EAAW,GAGX79B,EAAQo3B,EAAYl2B,MAGtBxD,EAAImB,KAAKi3B,WAEL+H,EAAS59B,KAAKvC,IAGlBA,EAAImB,KAAKyjC,YAAczjC,KAAKmgC,YAExBnB,EAAS59B,KAAKvC,GAET05B,EAAYkD,KAAK,cAClB8I,EAAQhM,EAAYgC,MAAM,OAEtByE,EAAS59B,KAAK,IAAIupB,GAAK1b,UAAWs1B,EAAOpjC,WAIhDtC,MACLmgC,EAAS9gC,OAAS,SACX,IAAIysB,GAAKjN,WAAYshB,IAGpCjgB,SAAU,eACAvP,EAAO+oB,EAAY6B,IAAI,iCACzB5qB,SACOA,EAAK,IAGpB8yB,aAAc,eAGNt+B,EACA+V,EAHAvK,EAAO,GACLrO,EAAQ,GAIdo3B,EAAYoB,WAEN6K,EAAiBjM,EAAY6B,IAAI,4BACnCoK,SACAh1B,EAAO,CAAC,IAAImb,GAAK7b,QAAS01B,EAAe,KACzCjM,EAAYwB,SACLvqB,WAGF9M,EAAMwH,OACL7H,EAAIk2B,EAAYl2B,EAChBnB,EAAQq3B,EAAY6B,IAAIlwB,MAC1BhJ,SACAC,EAAMC,KAAKiB,GACJmN,EAAKpO,KAAKF,EAAM,QAI/BwB,EAAM,UAEGA,EAAM,0CAKV8M,EAAKtR,OAAS,GAAMwE,EAAM,sBAAuB,KAClD61B,EAAYwB,SAII,KAAZvqB,EAAK,KACLA,EAAKd,QACLvN,EAAMuN,SAELqL,EAAI,EAAGA,EAAIvK,EAAKtR,OAAQ6b,IACzB/V,EAAIwL,EAAKuK,GACTvK,EAAKuK,GAAsB,MAAhB/V,EAAEmC,OAAO,IAA8B,MAAhBnC,EAAEmC,OAAO,GACvC,IAAIwkB,GAAK7b,QAAS9K,GACD,MAAhBA,EAAEmC,OAAO,GACN,IAAIwkB,GAAKjM,oBAAc1a,EAAEkB,MAAM,GAAI,IAAM/D,EAAM4Y,GAAI3Z,GACnD,IAAIuqB,GAAK7L,oBAAc9a,EAAEkB,MAAM,GAAI,IAAM/D,EAAM4Y,GAAI3Z,UAExDoP,EAEX+oB,EAAYqB,cAK5ByD,GAAOc,cAAgB,SAAAxnB,OACf3S,EAAI,OAEH,IAAMwL,KAAQmH,KACX1W,OAAOrD,eAAeqN,KAAK0M,EAAMnH,GAAO,KAClChO,EAAQmV,EAAKnH,GACnBxL,cAAsB,MAAZwL,EAAK,GAAc,GAAK,KAAOA,eAAShO,UAAqC,MAA5Bmb,OAAOnb,GAAO0D,OAAO,GAAc,GAAK,YAIpGlB,OCx2EPygC,MCQW,CAAE/E,QATjB,SAAiB9xB,UACNA,EAAYkB,EAAQC,KAAOD,EAAQE,UAG9C,SAAYpB,EAAW82B,EAAWC,UACvB/2B,EAAY82B,EACZC,GAAc,IAAI11B,IDH7B,SAAStL,GAAMyc,UACJhhB,KAAKoF,IAAI,EAAGpF,KAAKmF,IAAI,EAAG6b,IAEnC,SAASwkB,GAAKC,EAAWC,OACfzhC,EAAQohC,GAAeG,KAAKE,EAAI/gC,EAAG+gC,EAAI9gC,EAAG8gC,EAAI7gC,EAAG6gC,EAAIljC,MACvDyB,SACIwhC,EAAUrjC,OACV,aAAasP,KAAK+zB,EAAUrjC,OAC5B6B,EAAM7B,MAAQqjC,EAAUrjC,MAExB6B,EAAM7B,MAAQ,MAEX6B,EAGf,SAASS,GAAMT,MACPA,EAAMS,aACCT,EAAMS,cAEP,IAAIhF,MAAM,2CAIxB,SAASimC,GAAM1hC,MACPA,EAAM0hC,aACC1hC,EAAM0hC,cAEP,IAAIjmC,MAAM,2CAIxB,SAASkmC,GAAOp6B,MACRA,aAAayR,UACNE,WAAW3R,EAAE0R,KAAKX,GAAG,KAAO/Q,EAAEpJ,MAAQ,IAAMoJ,EAAEpJ,OAClD,GAAiB,iBAANoJ,SACPA,OAED,CACFxI,KAAM,WACNmK,QAAS,qDAWrBk4B,GAAiB,CACbjiC,IAAK,SAAUQ,EAAGC,EAAGpB,OACXwB,EAAQohC,GAAeQ,KAAKjiC,EAAGC,EAAGpB,EAAG,MACvCwB,SACAA,EAAM7B,MAAQ,MACP6B,GAGf4hC,KAAM,SAAUjiC,EAAGC,EAAGpB,EAAGD,UAEboB,aAAaT,SAETX,EADAqB,EACI+hC,GAAO/hC,GAEPD,EAAEF,MAEH,IAAIP,EAAMS,EAAER,IAAKZ,EAAG,YAEzBY,EAAM,CAACQ,EAAGC,EAAGpB,GAAGc,IAAI,SAAAC,UAzBnBsiC,EAyBkC,KAzBrCt6B,EAyBkChI,aAxB7ByZ,IAAazR,EAAE0R,KAAKX,GAAG,KAC7BY,WAAW3R,EAAEpJ,MAAQ0jC,EAAO,KAE5BF,GAAOp6B,GAJtB,IAAgBA,EAAGs6B,WA0BPtjC,EAAIojC,GAAOpjC,GACJ,IAAIW,EAAMC,EAAKZ,EAAG,QAE7B,MAAO/C,MAEXimC,IAAK,SAAU/gC,EAAGC,EAAGC,OACXZ,EAAQohC,GAAeG,KAAK7gC,EAAGC,EAAGC,EAAG,MACvCZ,SACAA,EAAM7B,MAAQ,MACP6B,GAGfuhC,KAAM,SAAU7gC,EAAGC,EAAGC,EAAGrC,WAWbujC,EACAC,EAEKC,EAAT,SAAathC,UAED,GADRA,EAAIA,EAAI,EAAIA,EAAI,EAAKA,EAAI,EAAIA,EAAI,EAAIA,GACzB,EACDohC,GAAMC,EAAKD,GAAMphC,EAAI,EAEnB,EAAJA,EAAQ,EACNqhC,EAEE,EAAJrhC,EAAQ,EACNohC,GAAMC,EAAKD,IAAO,EAAI,EAAIphC,GAAK,EAG/BohC,MAxBXphC,aAAaxB,SAETX,EADAoC,EACIghC,GAAOhhC,GAEPD,EAAEjB,MAEH,IAAIP,EAAMwB,EAAEvB,IAAKZ,EAAG,QAsB/BmC,EAAKihC,GAAOjhC,GAAK,IAAO,IACxBC,EAAIL,GAAMqhC,GAAOhhC,IAAIC,EAAIN,GAAMqhC,GAAO/gC,IAAIrC,EAAI+B,GAAMqhC,GAAOpjC,IAG3DujC,EAAS,EAAJlhC,GADLmhC,EAAKnhC,GAAK,GAAMA,GAAKD,EAAI,GAAKC,EAAID,EAAIC,EAAID,OAGpCxB,EAAM,CACS,IAAjB6iC,EAAIthC,EAAI,EAAI,GACG,IAAfshC,EAAIthC,GACa,IAAjBshC,EAAIthC,EAAI,EAAI,WAEhBnC,EAAIojC,GAAOpjC,GACJ,IAAIW,EAAMC,EAAKZ,EAAG,QAE7B,MAAO/C,MAGXymC,IAAK,SAASvhC,EAAGC,EAAGU,UACT+/B,GAAec,KAAKxhC,EAAGC,EAAGU,EAAG,IAGxC6gC,KAAM,SAASxhC,EAAGC,EAAGU,EAAG9C,OAIhBS,EACAujB,EAJJ7hB,EAAMihC,GAAOjhC,GAAK,IAAO,IAAO,IAChCC,EAAIghC,GAAOhhC,GAAGU,EAAIsgC,GAAOtgC,GAAG9C,EAAIojC,GAAOpjC,OAOjC4jC,EAAK,CAAC9gC,EACRA,GAAK,EAAIV,GACTU,GAAK,GAJTkhB,EAAK7hB,EAAI,IADT1B,EAAIjD,KAAKqmC,MAAO1hC,EAAI,GAAM,KAKTC,GACbU,GAAK,GAAK,EAAIkhB,GAAK5hB,IACjB0hC,EAAO,CAAC,CAAC,EAAG,EAAG,GACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,WAEJjB,GAAeQ,KAAsB,IAAjBO,EAAGE,EAAKrjC,GAAG,IACjB,IAAjBmjC,EAAGE,EAAKrjC,GAAG,IACM,IAAjBmjC,EAAGE,EAAKrjC,GAAG,IACXT,IAGRyjC,IAAK,SAAUhiC,UACJ,IAAIgZ,GAAUvY,GAAMT,GAAOU,IAEtC4hC,WAAY,SAAUtiC,UACX,IAAIgZ,GAA2B,IAAjBvY,GAAMT,GAAOW,EAAS,MAE/C4hC,UAAW,SAAUviC,UACV,IAAIgZ,GAA2B,IAAjBvY,GAAMT,GAAOY,EAAS,MAE/C4hC,OAAQ,SAASxiC,UACN,IAAIgZ,GAAU0oB,GAAM1hC,GAAOU,IAEtC+hC,cAAe,SAAUziC,UACd,IAAIgZ,GAA2B,IAAjB0oB,GAAM1hC,GAAOW,EAAS,MAE/C+hC,SAAU,SAAU1iC,UACT,IAAIgZ,GAA2B,IAAjB0oB,GAAM1hC,GAAOqB,EAAS,MAE/CshC,IAAK,SAAU3iC,UACJ,IAAIgZ,GAAUhZ,EAAMb,IAAI,KAEnCyjC,MAAO,SAAU5iC,UACN,IAAIgZ,GAAUhZ,EAAMb,IAAI,KAEnC0jC,KAAM,SAAU7iC,UACL,IAAIgZ,GAAUhZ,EAAMb,IAAI,KAEnCM,MAAO,SAAUO,UACN,IAAIgZ,GAAUvY,GAAMT,GAAOzB,IAEtCukC,KAAM,SAAU9iC,UACL,IAAIgZ,GAAUhZ,EAAM8iC,OAAS9iC,EAAMP,MAAQ,IAAK,MAE3DsjC,UAAW,SAAU/iC,OACX+iC,EACD,MAAS/iC,EAAMb,IAAI,GAAK,IACpB,MAASa,EAAMb,IAAI,GAAK,IACxB,MAASa,EAAMb,IAAI,GAAK,WAE1B,IAAI6Z,GAAU+pB,EAAY/iC,EAAMP,MAAQ,IAAK,MAExDujC,SAAU,SAAUhjC,EAAOijC,EAAQC,OAG1BljC,EAAMb,WACA,SAELsiC,EAAMhhC,GAAMT,eAEI,IAAXkjC,GAA2C,aAAjBA,EAAO/kC,MACxCsjC,EAAI9gC,GAAM8gC,EAAI9gC,EAAIsiC,EAAO9kC,MAAQ,IAGjCsjC,EAAI9gC,GAAKsiC,EAAO9kC,MAAQ,IAE5BsjC,EAAI9gC,EAAIL,GAAMmhC,EAAI9gC,GACX4gC,GAAKvhC,EAAOyhC,IAEvB0B,WAAY,SAAUnjC,EAAOijC,EAAQC,OAC3BzB,EAAMhhC,GAAMT,eAEI,IAAXkjC,GAA2C,aAAjBA,EAAO/kC,MACxCsjC,EAAI9gC,GAAM8gC,EAAI9gC,EAAIsiC,EAAO9kC,MAAQ,IAGjCsjC,EAAI9gC,GAAKsiC,EAAO9kC,MAAQ,IAE5BsjC,EAAI9gC,EAAIL,GAAMmhC,EAAI9gC,GACX4gC,GAAKvhC,EAAOyhC,IAEvB2B,QAAS,SAAUpjC,EAAOijC,EAAQC,OACxBzB,EAAMhhC,GAAMT,eAEI,IAAXkjC,GAA2C,aAAjBA,EAAO/kC,MACxCsjC,EAAI7gC,GAAM6gC,EAAI7gC,EAAIqiC,EAAO9kC,MAAQ,IAGjCsjC,EAAI7gC,GAAKqiC,EAAO9kC,MAAQ,IAE5BsjC,EAAI7gC,EAAIN,GAAMmhC,EAAI7gC,GACX2gC,GAAKvhC,EAAOyhC,IAEvB4B,OAAQ,SAAUrjC,EAAOijC,EAAQC,OACvBzB,EAAMhhC,GAAMT,eAEI,IAAXkjC,GAA2C,aAAjBA,EAAO/kC,MACxCsjC,EAAI7gC,GAAM6gC,EAAI7gC,EAAIqiC,EAAO9kC,MAAQ,IAGjCsjC,EAAI7gC,GAAKqiC,EAAO9kC,MAAQ,IAE5BsjC,EAAI7gC,EAAIN,GAAMmhC,EAAI7gC,GACX2gC,GAAKvhC,EAAOyhC,IAEvB6B,OAAQ,SAAUtjC,EAAOijC,EAAQC,OACvBzB,EAAMhhC,GAAMT,eAEI,IAAXkjC,GAA2C,aAAjBA,EAAO/kC,MACxCsjC,EAAIljC,GAAMkjC,EAAIljC,EAAI0kC,EAAO9kC,MAAQ,IAGjCsjC,EAAIljC,GAAK0kC,EAAO9kC,MAAQ,IAE5BsjC,EAAIljC,EAAI+B,GAAMmhC,EAAIljC,GACXgjC,GAAKvhC,EAAOyhC,IAEvB8B,QAAS,SAAUvjC,EAAOijC,EAAQC,OACxBzB,EAAMhhC,GAAMT,eAEI,IAAXkjC,GAA2C,aAAjBA,EAAO/kC,MACxCsjC,EAAIljC,GAAMkjC,EAAIljC,EAAI0kC,EAAO9kC,MAAQ,IAGjCsjC,EAAIljC,GAAK0kC,EAAO9kC,MAAQ,IAE5BsjC,EAAIljC,EAAI+B,GAAMmhC,EAAIljC,GACXgjC,GAAKvhC,EAAOyhC,IAEvB+B,KAAM,SAAUxjC,EAAOijC,OACbxB,EAAMhhC,GAAMT,UAElByhC,EAAIljC,EAAI0kC,EAAO9kC,MAAQ,IACvBsjC,EAAIljC,EAAI+B,GAAMmhC,EAAIljC,GACXgjC,GAAKvhC,EAAOyhC,IAEvBgC,KAAM,SAAUzjC,EAAOijC,OACbxB,EAAMhhC,GAAMT,GACZgiC,GAAOP,EAAI/gC,EAAIuiC,EAAO9kC,OAAS,WAErCsjC,EAAI/gC,EAAIshC,EAAM,EAAI,IAAMA,EAAMA,EAEvBT,GAAKvhC,EAAOyhC,IAMvBiC,IAAK,SAAUC,EAAQC,EAAQC,GACtBA,IACDA,EAAS,IAAI7qB,GAAU,SAErBkI,EAAI2iB,EAAO1lC,MAAQ,IACnB2lC,EAAQ,EAAJ5iB,EAAQ,EACZ3iB,EAAIkC,GAAMkjC,GAAQplC,EAAIkC,GAAMmjC,GAAQrlC,EAEpCwlC,IAAQD,EAAIvlC,IAAM,EAAKulC,GAAKA,EAAIvlC,IAAM,EAAIulC,EAAIvlC,IAAM,GAAK,EACzDylC,EAAK,EAAID,EAET5kC,EAAM,CAACwkC,EAAOxkC,IAAI,GAAK4kC,EAAKH,EAAOzkC,IAAI,GAAK6kC,EAC9CL,EAAOxkC,IAAI,GAAK4kC,EAAKH,EAAOzkC,IAAI,GAAK6kC,EACrCL,EAAOxkC,IAAI,GAAK4kC,EAAKH,EAAOzkC,IAAI,GAAK6kC,GAEnCvkC,EAAQkkC,EAAOlkC,MAAQyhB,EAAI0iB,EAAOnkC,OAAS,EAAIyhB,UAE9C,IAAIhiB,EAAMC,EAAKM,IAE1BwkC,UAAW,SAAUjkC,UACVohC,GAAe+B,WAAWnjC,EAAO,IAAIgZ,GAAU,OAE1DkrB,SAAU,SAAUlkC,EAAOmkC,EAAMC,EAAOC,OAG/BrkC,EAAMb,WACA,aAEU,IAAVilC,IACPA,EAAQhD,GAAeQ,KAAK,IAAK,IAAK,IAAK,SAE3B,IAATuC,IACPA,EAAO/C,GAAeQ,KAAK,EAAG,EAAG,EAAG,IAGpCuC,EAAKrB,OAASsB,EAAMtB,OAAQ,KACtBwB,EAAIF,EACVA,EAAQD,EACRA,EAAOG,SAGPD,OADqB,IAAdA,EACK,IAEA1C,GAAO0C,GAEnBrkC,EAAM8iC,OAASuB,EACRD,EAEAD,GAyCfI,KAAM,SAAUvkC,UACL,IAAI4L,EAAU5L,EAAMwkC,WAE/BxkC,MAAO,SAAST,MACPA,aAAa4c,IACb,uDAAuD1O,KAAKlO,EAAEpB,OAAS,KAClE4e,EAAMxd,EAAEpB,MAAM0D,MAAM,UACnB,IAAI3C,EAAM6d,OAAKzgB,aAAeygB,OAEpCxd,aAAaL,IAAWK,EAAIL,EAAMuC,YAAYlC,EAAEpB,eACjDoB,EAAEpB,WAAQ7B,EACHiD,OAEL,CACFR,KAAS,WACTmK,QAAS,oEAGjBu7B,KAAM,SAASzkC,EAAOijC,UACX7B,GAAesC,IAAItC,GAAejiC,IAAI,IAAK,IAAK,KAAMa,EAAOijC,IAExEyB,MAAO,SAAS1kC,EAAOijC,UACZ7B,GAAesC,IAAItC,GAAejiC,IAAI,EAAG,EAAG,GAAIa,EAAOijC,KEvZtE,SAAS0B,GAAWC,EAAMjB,EAAQC,OAI9BiB,EAKAC,EAEIC,EACAC,EAXEC,EAAKtB,EAAOlkC,MAKZylC,EAAKtB,EAAOnkC,MAOZE,EAAI,GAEVolC,EAAKG,EAAKD,GAAM,EAAIC,OACf,IAAIlmC,EAAI,EAAGA,EAAI,EAAGA,IAGnBgmC,EAAKJ,EAFLC,EAAKlB,EAAOxkC,IAAIH,GAAK,IACrB8lC,EAAKlB,EAAOzkC,IAAIH,GAAK,KAEjB+lC,IACAC,GAAME,EAAKJ,EAAKG,GAAMJ,EAChBK,GAAML,EAAKC,EAAKE,KAAQD,GAElCplC,EAAEX,GAAU,IAALgmC,SAGJ,IAAI9lC,EAAMS,EAAGolC,GAGxB,IAAMI,GAA0B,CAC5BC,SAAU,SAASP,EAAIC,UACZD,EAAKC,GAEhBO,OAAQ,SAASR,EAAIC,UACVD,EAAKC,EAAKD,EAAKC,GAE1BQ,QAAS,SAAST,EAAIC,UAClBD,GAAM,IACQ,EACVM,GAAwBC,SAASP,EAAIC,GACrCK,GAAwBE,OAAOR,EAAK,EAAGC,IAE/CS,UAAW,SAASV,EAAIC,OAChB1jC,EAAI,EACJ5F,EAAIqpC,SACJC,EAAK,KACLtpC,EAAI,EACJ4F,EAAKyjC,EAAK,IAAQ9oC,KAAKypC,KAAKX,KACpB,GAAKA,EAAK,IAAMA,EAAK,GAAKA,GAE/BA,GAAM,EAAI,EAAIC,GAAMtpC,GAAK4F,EAAIyjC,IAExCY,UAAW,SAASZ,EAAIC,UACbK,GAAwBG,QAAQR,EAAID,IAE/Ca,WAAY,SAASb,EAAIC,UACd/oC,KAAK4pC,IAAId,EAAKC,IAEzBc,UAAW,SAASf,EAAIC,UACbD,EAAKC,EAAK,EAAID,EAAKC,GAI9Be,QAAS,SAAShB,EAAIC,UACVD,EAAKC,GAAM,GAEvBgB,SAAU,SAASjB,EAAIC,UACZ,EAAI/oC,KAAK4pC,IAAId,EAAKC,EAAK,KAItC,IAAK,IAAMviB,MAAK4iB,GACRA,GAAwB5rC,eAAegpB,MACvCoiB,GAAWpiB,IAAKoiB,GAAWh0B,KAAK,KAAMw0B,GAAwB5iB,UCtEhEwjB,GAAmB,SAAA5oC,UAGPC,MAAMC,QAAQF,EAAKgB,OAC7BhB,EAAKgB,MAAQf,MAAMD,OAKZ,CACX6oC,MAAO,SAASz+B,UACLA,GAEXqC,QAAS,SAASq8B,EAAQnoC,UACtBA,EAAQA,EAAMK,MAAQ,EAEf4nC,GAAiBE,GAAQnoC,IAEpCjD,OAAQ,SAASorC,UACN,IAAIjtB,GAAU+sB,GAAiBE,GAAQprC,SAUlDqrC,MAAO,SAASxN,EAAOmB,EAAKsM,OACpBC,EACAC,EACAC,EAAY,EACVC,EAAO,GACT1M,GACAwM,EAAKxM,EACLuM,EAAO1N,EAAMv6B,MACTgoC,IACAG,EAAYH,EAAKhoC,SAIrBioC,EAAO,EACPC,EAAK3N,OAGJ,IAAI15B,EAAIonC,EAAMpnC,GAAKqnC,EAAGloC,MAAOa,GAAKsnC,EACnCC,EAAKxoC,KAAK,IAAIib,GAAUha,EAAGqnC,EAAGptB,cAG3B,IAAIoB,GAAWksB,IAE1BC,KAAM,SAASD,EAAME,OAEb/iB,EACAgjB,EAFE51B,EAAQ,GAWV41B,GAPAH,EAAKpoC,OAAWooC,aAAgBI,GAMzBJ,EAAK50B,QACD40B,EAAK50B,QAAQb,MACjBy1B,EAAKz1B,MACDy1B,EAAKz1B,MACT1T,MAAMC,QAAQkpC,GACVA,EAEA,CAACA,GAZRnpC,MAAMC,QAAQkpC,EAAKpoC,OACRooC,EAAKpoC,MAEL,CAACooC,EAAKpoC,WAYrByoC,EAAY,SACZC,EAAU,OACVC,EAAY,SAEZL,EAAG5lB,QACH+lB,EAAYH,EAAG5lB,OAAO,IAAM4lB,EAAG5lB,OAAO,GAAG1U,KACzC06B,EAAUJ,EAAG5lB,OAAO,IAAM4lB,EAAG5lB,OAAO,GAAG1U,KACvC26B,EAAYL,EAAG5lB,OAAO,IAAM4lB,EAAG5lB,OAAO,GAAG1U,KACzCs6B,EAAKA,EAAG31B,OAER21B,EAAKA,EAAG90B,YAGP,IAAI3S,EAAI,EAAGA,EAAI0nC,EAAS7rC,OAAQmE,IAAK,KAClC2C,SACAxD,SACEyc,EAAO8rB,EAAS1nC,GAClB4b,aAAgB1O,GAChBvK,EAA2B,iBAAdiZ,EAAKzO,KAAoByO,EAAKzO,KAAOyO,EAAKzO,KAAK,GAAGhO,MAC/DA,EAAQyc,EAAKzc,QAEbwD,EAAM,IAAIqX,GAAUha,EAAI,GACxBb,EAAQyc,GAGRA,aAAgBlN,IAIpBgW,EAAW+iB,EAAG31B,MAAMjP,MAAM,GACtB+kC,GACAljB,EAAS3lB,KAAK,IAAImO,EAAY06B,EAC1BzoC,GACA,GAAO,EAAOxB,KAAKmB,MAAOnB,KAAK6F,kBAEnCskC,GACApjB,EAAS3lB,KAAK,IAAImO,EAAY46B,EAC1B,IAAI9tB,GAAUha,EAAI,IAClB,GAAO,EAAOrC,KAAKmB,MAAOnB,KAAK6F,kBAEnCqkC,GACAnjB,EAAS3lB,KAAK,IAAImO,EAAY26B,EAC1BllC,GACA,GAAO,EAAOhF,KAAKmB,MAAOnB,KAAK6F,kBAGvCsO,EAAM/S,KAAK,IAAI6S,EAAQ,CAAE,IAAIxG,EAAU,CAAE,IAAI/H,EAAQ,GAAI,QACrDqhB,EACA+iB,EAAG11B,cACH01B,EAAGhkC,2BAIJ,IAAImO,EAAQ,CAAE,IAAIxG,EAAU,CAAE,IAAI/H,EAAQ,GAAI,QAC7CyO,EACA21B,EAAG11B,cACH01B,EAAGhkC,kBACLV,KAAKpF,KAAKc,WCzIlBspC,GAAa,SAACC,EAAI/tB,EAAM1R,QACpBA,aAAayR,SACT,CAAEja,KAAM,WAAYmK,QAAS,oCAE3B,MAAR+P,EACAA,EAAO1R,EAAE0R,KAET1R,EAAIA,EAAEoS,QAEH,IAAIX,GAAUguB,EAAG9tB,WAAW3R,EAAEpJ,QAAS8a,ICT5CguB,GAAgB,CAElBC,KAAO,KACP9E,MAAO,KACPoD,KAAO,KACPG,IAAO,KACPwB,IAAO,GACPC,IAAO,GACPC,IAAO,GACPC,KAAO,MACPC,KAAO,MACPC,KAAO,OAGX,IAAK,IAAMjlB,MAAK0kB,GACRA,GAAc1tC,eAAegpB,MAC7B0kB,GAAc1kB,IAAKklB,GAAW92B,KAAK,KAAM5U,KAAKwmB,IAAI0kB,GAAc1kB,MAIxE0kB,GAAc1mC,MAAQ,SAACgH,EAAGgb,OAChBmlB,OAAwB,IAANnlB,EAAoB,EAAIA,EAAEpkB,aAC3CspC,GAAW,SAAAE,UAAOA,EAAI/oC,QAAQ8oC,IAAW,KAAMngC,ICpB1D,ICyJIqgC,GDzJEC,GAAS,SAAUC,EAAO3nC,WAC5BA,EAAO/C,MAAMoE,UAAUK,MAAM+E,KAAKzG,IACrBtF,aACJ,OAAS,CAAEkE,KAAM,WAAYmK,QAAS,sCAE3ClK,EACAuS,EACAwjB,EACAgT,EACAC,EACA/uB,EACAgvB,EACAC,EAGJC,EAAS,GAEHlC,EAAS,OAEVjnC,EAAI,EAAGA,EAAImB,EAAKtF,OAAQmE,QACzB+1B,EAAU50B,EAAKnB,cACUga,MAQzBivB,EAAsB,MADtBhvB,EAA0C,MAD1C8uB,EAA6C,KAA5BhT,EAAQ9b,KAAK1X,iBAAmCjF,IAAd4rC,EAA0B,IAAIlvB,GAAU+b,EAAQ52B,MAAO+pC,GAAWvuB,QAAUob,EAAQpb,SACjHV,KAAK1X,iBAAoCjF,IAAf2rC,EAA2BA,EAAaF,EAAe9uB,KAAK1X,kBACjEjF,IAAf2rC,GAAqC,KAAThvB,GAAoD,KAArCkvB,EAAM,GAAGxuB,QAAQV,KAAK1X,WAAoB0X,EAAOgvB,EACxHC,EAAqB,KAATjvB,QAA6B3c,IAAd4rC,EAA0BnT,EAAQ9b,KAAK1X,WAAa2mC,OAErE5rC,KADViV,OAAmBjV,IAAf2pC,EAAO,KAA8B,KAAThtB,GAAeA,IAASgvB,EAAahC,EAAO,IAAMA,EAAOhtB,IASzF+uB,EAAgD,KAA7BG,EAAM52B,GAAG0H,KAAK1X,iBAAmCjF,IAAd4rC,EAA0B,IAAIlvB,GAAUmvB,EAAM52B,GAAGpT,MAAO+pC,GAAWvuB,QAAUwuB,EAAM52B,GAAGoI,SACvImuB,GAASC,EAAe5pC,MAAQ6pC,EAAiB7pC,QACjD2pC,GAASC,EAAe5pC,MAAQ6pC,EAAiB7pC,SAClDgqC,EAAM52B,GAAKwjB,gBAVQz4B,IAAf2rC,GAA4BhvB,IAASgvB,OAC/B,CAAElpC,KAAM,WAAYmK,QAAS,sBAEvC+8B,EAAOhtB,GAAQkvB,EAAMttC,OACrBstC,EAAMpqC,KAAKg3B,QAfP33B,MAAMC,QAAQ8C,EAAKnB,GAAGb,QACtBf,MAAMoE,UAAUzD,KAAKkW,MAAM9T,EAAM/C,MAAMoE,UAAUK,MAAM+E,KAAKzG,EAAKnB,GAAGb,eAuB5D,GAAhBgqC,EAAMttC,OACCstC,EAAM,IAEjBhoC,EAAOgoC,EAAM7oC,IAAI,SAAUf,UAAYA,EAAEuB,MAAMnD,KAAKc,WAAaQ,KAAKtB,KAAKc,QAAQyC,SAAW,IAAM,MAC7F,IAAI0L,YAAak8B,EAAQ,MAAQ,kBAAS3nC,aAGtC,CACXgB,IAAK,sCAAYhB,2BAAAA,yBACN0nC,IAAO,EAAM1nC,IAExBe,IAAK,sCAAYf,2BAAAA,yBACN0nC,IAAO,EAAO1nC,IAEzBioC,QAAS,SAAUrrB,EAAK9D,UACb8D,EAAIvD,UAAUP,EAAK9a,QAE9BkqC,GAAI,kBACO,IAAIrvB,GAAUjd,KAAKC,KAE9BssC,IAAK,SAAS/pC,EAAGC,UACN,IAAIwa,GAAUza,EAAEJ,MAAQK,EAAEL,MAAOI,EAAE0a,OAE9CpZ,IAAK,SAASyB,EAAGinC,MACI,iBAANjnC,GAA+B,iBAANinC,EAChCjnC,EAAI,IAAI0X,GAAU1X,GAClBinC,EAAI,IAAIvvB,GAAUuvB,QACf,KAAMjnC,aAAa0X,IAAgBuvB,aAAavvB,SAC7C,CAAEja,KAAM,WAAYmK,QAAS,oCAGhC,IAAI8P,GAAUjd,KAAK8D,IAAIyB,EAAEnD,MAAOoqC,EAAEpqC,OAAQmD,EAAE2X,OAEvDuvB,WAAY,SAAUjhC,UACHkgC,GAAW,SAAAE,UAAa,IAANA,GAAW,IAAKpgC,QE/E1C,CACX/L,EAAG,SAAUyO,UACF,IAAI08B,GAAM,IAAK18B,aAAegV,GAAahV,EAAIw+B,UAAYx+B,EAAI9L,OAAO,IAEjFo/B,OAAQ,SAAUtzB,UACP,IAAI2B,EACP88B,UAAUz+B,EAAI9L,OAAOlF,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAC7FA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,SAElDA,QAAS,SAAUimB,EAAQypB,EAAS9kB,EAAa/c,OACzC4B,EAASwW,EAAO/gB,aACpB0lB,EAAoC,WAArBA,EAAY9kB,KACvB8kB,EAAY1lB,MAAQ0lB,EAAY/jB,QACpC4I,EAASA,EAAOzP,QAAQ,IAAIgM,OAAO0jC,EAAQxqC,MAAO2I,EAAQA,EAAM3I,MAAQ,IAAK0lB,GACtE,IAAI1H,GAAO+C,EAAO5C,OAAS,GAAI5T,EAAQwW,EAAO7C,cAEpD,SAAU6C,WACL/e,EAAO/C,MAAMoE,UAAUK,MAAM+E,KAAKqb,UAAW,GAC/CvZ,EAASwW,EAAO/gB,iBAEXa,GAEL0J,EAASA,EAAOzP,QAAQ,UAAW,SAAA2vC,OACzBzqC,EAA2B,WAAjBgC,EAAKnB,GAAGD,MACpB6pC,EAAMvpC,MAAM,MAASc,EAAKnB,GAAGb,MAAQgC,EAAKnB,GAAGc,eAC1C8oC,EAAMvpC,MAAM,UAAYwpC,mBAAmB1qC,GAASA,KAL1Da,EAAI,EAAGA,EAAImB,EAAKtF,OAAQmE,MAAxBA,UAQT0J,EAASA,EAAOzP,QAAQ,MAAO,KACxB,IAAIkjB,GAAO+C,EAAO5C,OAAS,GAAI5T,EAAQwW,EAAO7C,WCzBvDysB,GAAM,SAACvhC,EAAGwhC,UAAUxhC,aAAawhC,EAAQt9B,EAAQC,KAAOD,EAAQE,OAChEq9B,GAAS,SAACzhC,EAAG0R,WACF3c,IAAT2c,OACM,CAAEla,KAAM,WAAYmK,QAAS,sDAGnB,iBADpB+P,EAA6B,iBAAfA,EAAK9a,MAAqB8a,EAAK9a,MAAQ8a,QAE3C,CAAEla,KAAM,WAAYmK,QAAS,kEAE/B3B,aAAayR,IAAczR,EAAE0R,KAAKX,GAAGW,GAAQxN,EAAQC,KAAOD,EAAQE,UAGjE,CACXs9B,UAAW,SAAU1hC,UACVuhC,GAAIvhC,EAAGuQ,IAElBoxB,QAAS,SAAU3hC,UACRuhC,GAAIvhC,EAAGrI,IAElBiqC,SAAU,SAAU5hC,UACTuhC,GAAIvhC,EAAGyR,KAElBowB,SAAU,SAAU7hC,UACTuhC,GAAIvhC,EAAG4U,KAElBktB,UAAW,SAAU9hC,UACVuhC,GAAIvhC,EAAGkE,IAElB69B,MAAO,SAAU/hC,UACNuhC,GAAIvhC,EAAGuV,KAElBysB,QAAS,SAAUhiC,UACRyhC,GAAOzhC,EAAG,OAErBiiC,aAAc,SAAUjiC,UACbyhC,GAAOzhC,EAAG,MAErBkiC,KAAM,SAAUliC,UACLyhC,GAAOzhC,EAAG,OAErByhC,OAAAA,GACA/vB,KAAM,SAAU8D,EAAK9D,QACX8D,aAAe/D,SACX,CAAEja,KAAM,WACVmK,6DAAuD6T,aAAe/C,GAAY,oCAAsC,YAIxHf,EAFJA,EACIA,aAAgBxN,EACTwN,EAAK9a,MAEL8a,EAAKnZ,QAGT,GAEJ,IAAIkZ,GAAU+D,EAAI5e,MAAO8a,eAExB,SAAU1R,UACX,IAAIqE,EAAUrE,EAAE0R,oBCpDhBsL,OACLrU,EAAY,CAAE8B,iBAAAA,EAAkB2I,eAAAA,WAGtC3I,EAAiB/B,YAAYosB,IAC7BrqB,EAAiB/B,YAAYM,GAC7ByB,EAAiB/B,YAAYjQ,IAC7BgS,EAAiB/B,YAAYy5B,IAC7B13B,EAAiB/B,qBClBNsU,OAELolB,EAAW,SAACC,EAAczsC,UAAS,IAAI2f,GAAI3f,EAAMysC,EAAa9rC,MAAO8rC,EAAapnC,iBAAiBT,KAAK6nC,EAAansC,gBAEpH,YAAc,SAASosC,EAAcC,GAEnCA,IACDA,EAAeD,EACfA,EAAe,UAGfE,EAAWF,GAAgBA,EAAa1rC,MACxC6rC,EAAWF,EAAa3rC,MACtBqE,EAAkB7F,KAAK6F,gBACvBqiB,EAAmBriB,EAAgBgG,YACrChG,EAAgBqiB,iBAAmBriB,EAAgBynC,UAEjDC,EAAgBF,EAAS3pC,QAAQ,KACnCmd,EAAW,IACQ,IAAnB0sB,IACA1sB,EAAWwsB,EAASnoC,MAAMqoC,GAC1BF,EAAWA,EAASnoC,MAAM,EAAGqoC,QAE3BzsC,EAAUxD,EAAY0C,KAAKc,SACjCA,EAAQ0sC,WAAY,MAEdllB,EAAcV,EAAY6lB,eAAeJ,EAAUnlB,EAAkBpnB,EAAS8mB,GAAa,OAE5FU,SACM0kB,EAAShtC,KAAMmtC,OAGtBO,GAAY,KAGXR,EAcDQ,EAAY,WAAW58B,KAAKs8B,OAdb,IAIE,mBAFjBA,EAAWxlB,EAAY+lB,WAAWN,IAG9BK,GAAY,MACT,KAEG1W,EAAUpP,EAAYgmB,cAAcR,GAC1CM,EAAY,CAAC,WAAY,SAAShqC,QAAQszB,GAAW,EAErD0W,IAAaN,GAAY,eAM3BS,EAAWvlB,EAAYwlB,aAAaT,EAAUnlB,EAAkBpnB,EAAS8mB,OAC1EimB,EAASnhC,gBACV0b,GAAOf,6CAAsCgmB,8BACtCL,EAAShtC,KAAMmtC,GAAgBD,OAEtCa,EAAMF,EAASnhC,YACfghC,IAAc9lB,EAAYomB,oBACnBhB,EAAShtC,KAAMmtC,GAG1BY,EAAML,EAAY9lB,EAAYomB,aAAaD,GAAO7B,mBAAmB6B,OAE/DE,iBAAcb,cAAYW,UAAMltB,UAE/B,IAAIV,GAAI,IAAIX,cAAWyuB,OAAQA,GAAK,EAAOjuC,KAAKmB,MAAOnB,KAAK6F,iBAAkB7F,KAAKmB,MAAOnB,KAAK6F,mBDhD7EqoC,CAAQtmB,IACrCvS,EAAiB/B,YAAYs2B,IAC7Bv0B,EAAiB/B,YAAY5H,IAC7B2J,EAAiB/B,YAAY0xB,IAC7B3vB,EAAiB/B,YAAYiP,IAC7BlN,EAAiB/B,YErBV,gBAAkB,SAAS66B,OAC1BC,EACAC,EAIAxkB,EAEAxnB,EACAgB,EACAirC,EACAC,EACAzrC,EATA0rC,EAAe,SACfC,EAAqB,mCACnBC,EAAY,CAACnrC,UAAU,GAEvBorC,EAAiBR,EAAUhrC,MAAMurC,YAO9BE,SACC,CAAExsC,KAAM,WACVmK,QAAS,gJAIO,GAApB+Y,UAAUpnB,QACNonB,UAAU,GAAG9jB,MAAMtD,OAAS,GAC5B0wC,IAEJR,EAAQ9oB,UAAU,GAAG9jB,OACd8jB,UAAUpnB,OAAS,EAC1B0wC,IAEAR,EAAQ3tC,MAAMoE,UAAUK,MAAM+E,KAAKqb,UAAW,GAG1CqpB,OACC,YACDN,EAAuB,8CAEtB,WACDA,EAAuB,8CAEtB,kBACDA,EAAuB,gDAEtB,eACDA,EAAuB,gDAEtB,cACA,oBACDG,EAAe,SACfH,EAAuB,4BACvBI,EAAqB,8DAGf,CAAErsC,KAAM,WAAYmK,QAAS,wHAG3Csd,uEAAyE2kB,6BAA+BH,OAEnGhsC,EAAI,EAAGA,EAAI+rC,EAAMlwC,OAAQmE,GAAK,EAC3B+rC,EAAM/rC,aAAcqb,IACpBra,EAAQ+qC,EAAM/rC,GAAGb,MAAM,GACvB8sC,EAAWF,EAAM/rC,GAAGb,MAAM,KAE1B6B,EAAQ+qC,EAAM/rC,GACdisC,OAAW3uC,GAGT0D,aAAiBd,KAAoB,IAANF,GAAWA,EAAI,IAAM+rC,EAAMlwC,cAAwByB,IAAb2uC,GAA6BA,aAAoBjyB,KACxHuyB,IAEJL,EAAgBD,EAAWA,EAASnrC,MAAMurC,GAAmB,IAANrsC,EAAU,KAAO,OACxES,EAAQO,EAAMP,MACd+mB,2BAA6B0kB,2BAA8BlrC,EAAMa,oBAAWpB,EAAQ,2BAAsBA,OAAW,gBAEzH+mB,eAAiB2kB,4BAA8BC,8BAE/C5kB,EAAWqiB,mBAAmBriB,GAE9BA,+BAAiCA,GAC1B,IAAI1J,GAAI,IAAIX,cAAWqK,OAAaA,GAAU,EAAO7pB,KAAKmB,MAAOnB,KAAK6F,iBAAkB7F,KAAKmB,MAAOnB,KAAK6F,oBFvDpHwP,EAAiB/B,YAAYu7B,IAEtBt7B,eG3BK2B,OACR45B,EADctyC,yDAAU,GAExBka,EAAYla,EAAQka,UAClBq4B,EAAU,IAAI59B,EAASY,KAAKvV,GAeT,WAArByJ,EAAOyQ,IAA2BjW,MAAMC,QAAQgW,KAChDA,EAAYzW,OAAOuT,KAAKkD,GAAW/T,IAAI,SAAAoX,OAC/BvY,EAAQkV,EAAUqD,UAEhBvY,aAAiBmpB,GAAK9b,QAClBrN,aAAiBmpB,GAAKjN,aACxBlc,EAAQ,IAAImpB,GAAKjN,WAAW,CAAClc,KAEjCA,EAAQ,IAAImpB,GAAK9b,MAAM,CAACrN,KAErB,IAAImpB,GAAKpb,uBAAgBwK,GAAKvY,GAAO,EAAO,KAAM,KAE7DutC,EAAQ/8B,OAAS,CAAC,IAAI2Y,GAAK1W,QAAQ,KAAMyC,SAWzChS,EACAsqC,EATE7vB,EAAW,CACT,IAAI1d,GAAQ2zB,oBACZ,IAAI3zB,GAAQs2B,6BAA4B,GACxC,IAAIt2B,GAAQu2B,cACZ,IAAIv2B,GAAQ2d,aAAa,CAAC7b,SAAU8L,QAAQ7S,EAAQ+G,aAGtD0rC,EAAkB,MASpBzyC,EAAQyiB,cAAe,CACvB+vB,EAAkBxyC,EAAQyiB,cAAcxd,cACnC,IAAIY,EAAI,EAAGA,EAAI,EAAGA,QACnB2sC,EAAgBE,QACRxqC,EAAIsqC,EAAgB7uC,OACpBuE,EAAEyqC,iBACQ,IAAN9sC,IAA2C,IAAhC4sC,EAAgBvrC,QAAQgB,KACnCuqC,EAAgB7tC,KAAKsD,GACrBA,EAAE8pB,IAAItZ,IAIA,IAAN7S,IAAoC,IAAzB8c,EAASzb,QAAQgB,KACxBA,EAAE0qC,aACFjwB,EAAS3J,QAAQ9Q,GAGjBya,EAAS/d,KAAKsD,IAQtCoqC,EAAY55B,EAAK9P,KAAK2pC,OAEb1sC,EAAI,EAAGA,EAAI8c,EAASjhB,OAAQmE,IACjC8c,EAAS9c,GAAGmsB,IAAIsgB,MAIhBtyC,EAAQyiB,kBACR+vB,EAAgBE,QACRxqC,EAAIsqC,EAAgB7uC,QACK,IAAzBgf,EAASzb,QAAQgB,KAA6C,IAAhCuqC,EAAgBvrC,QAAQgB,IACtDA,EAAE8pB,IAAIsgB,UAKXA,GN3FLO,yBACUnwB,kBACHA,KAAOA,OACPC,SAAW,QACXif,cAAgB,QAChBkR,eAAiB,QACjBC,iBAAmB,QACnBznB,aAAe,QACfiiB,UAAY,OACZyF,YAAc,QACdC,OAAS,IAAIvwB,EAAKwwB,aAAaxwB,gDAO7BqM,MACHA,MACK,IAAIlpB,EAAI,EAAGA,EAAIkpB,EAAQrtB,OAAQmE,SAC3B0oB,UAAUQ,EAAQlpB,sCAUzB2oB,EAAQ1e,EAAU+I,QACnBk6B,iBAAiBnuC,KAAK4pB,GACvB1e,SACKkjC,YAAYljC,GAAY0e,GAE7BA,EAAO2kB,SACP3kB,EAAO2kB,QAAQ3vC,KAAKkf,KAAMlf,KAAMqV,GAAoBrV,KAAKkf,KAAK3L,UAAU8B,8CAQ5E/I,UACOtM,KAAKwvC,YAAYljC,sCAQjB7K,QACF0d,SAAS/d,KAAKK,2CAQPmuC,EAAcC,OACtBC,MACCA,EAAkB,EAAGA,EAAkB9vC,KAAKo+B,cAAclgC,UACvD8B,KAAKo+B,cAAc0R,GAAiBD,UAAYA,GADeC,UAKlE1R,cAAcpoB,OAAO85B,EAAiB,EAAG,CAACF,aAAAA,EAAcC,SAAAA,6CAQhDE,EAAeF,OACxBC,MACCA,EAAkB,EAAGA,EAAkB9vC,KAAKsvC,eAAepxC,UACxD8B,KAAKsvC,eAAeQ,GAAiBD,UAAYA,GADeC,UAKnER,eAAet5B,OAAO85B,EAAiB,EAAG,CAACC,cAAAA,EAAeF,SAAAA,2CAOpDG,QACNloB,aAAa1mB,KAAK4uC,sDASjB5R,EAAgB,GACb/7B,EAAI,EAAGA,EAAIrC,KAAKo+B,cAAclgC,OAAQmE,IAC3C+7B,EAAch9B,KAAKpB,KAAKo+B,cAAc/7B,GAAGutC,qBAEtCxR,sDASDkR,EAAiB,GACdjtC,EAAI,EAAGA,EAAIrC,KAAKsvC,eAAepxC,OAAQmE,IAC5CitC,EAAeluC,KAAKpB,KAAKsvC,eAAejtC,GAAG0tC,sBAExCT,+CASAtvC,KAAKmf,+CAINpf,EAAOC,WACN,CACHkvC,MAAO,kBACHnvC,EAAKgqC,UAAY,EACVhqC,EAAKof,SAASpf,EAAKgqC,WAE9B5pC,IAAK,kBACDJ,EAAKgqC,UAAY,EACVhqC,EAAKof,SAASpf,EAAKgqC,6DAW3B/pC,KAAK8nB,sBAMdmoB,GAAuB,SAAC/wB,EAAMgxB,UACxBA,GAAejF,KACfA,GAAK,IAAIoE,GAAcnwB,IAEpB+rB,gBO9ICrjB,EAAaE,OA0CrB6f,EAzCEwI,WCtBKvoB,gCAEKprB,kBACH4zC,KAAO,QACPC,UAAY7zC,EAAQqD,cACpBywC,aAAe9zC,EAAQ+zC,iBACvBC,yBAA2Bh0C,EAAQi0C,wBACpCj0C,EAAQk0C,yBACHC,mBAAqBn0C,EAAQk0C,kBAAkBp0C,QAAQ,MAAO,WAElEs0C,gBAAkBp0C,EAAQq0C,oBAC1BC,aAAet0C,EAAQs0C,aACxBt0C,EAAQu0C,yBACHC,mBAAqBx0C,EAAQu0C,kBAAkBz0C,QAAQ,MAAO,MAEnEE,EAAQy0C,wBACHC,mBAAqB10C,EAAQy0C,kBAAkB30C,QAAQ,MAAO,KACQ,MAAvE0D,KAAKkxC,mBAAmB/qC,OAAOnG,KAAKkxC,mBAAmBhzC,OAAS,UAC3DgzC,oBAAsB,WAG1BA,mBAAqB,QAEzBC,mBAAqB30C,EAAQ40C,uBAC7BC,+BAAiCzpB,EAAY0pB,6BAE7CC,YAAc,OACdC,QAAU,mDAGJ3/B,UACP7R,KAAKgxC,oBAAgE,IAA1Cn/B,EAAKnO,QAAQ1D,KAAKgxC,sBAEtB,QADvBn/B,EAAOA,EAAKmS,UAAUhkB,KAAKgxC,mBAAmB9yC,SACrCiI,OAAO,IAAkC,MAAnB0L,EAAK1L,OAAO,KACvC0L,EAAOA,EAAKmS,UAAU,KAIvBnS,4CAGOvF,UACdA,EAAWA,EAAShQ,QAAQ,MAAO,KACnCgQ,EAAWtM,KAAKyxC,eAAenlC,IACvBtM,KAAKkxC,oBAAsB,IAAM5kC,8BAGzCpL,EAAOd,EAAUe,EAAO+N,MAEnBhO,OAID4L,EACA4kC,EACAC,EACAC,EACAvvC,KAEAjC,GAAYA,EAASkM,SAAU,KAC3BulC,EAAc7xC,KAAKswC,aAAalwC,EAASkM,aAGzCtM,KAAKwwC,yBAAyBpwC,EAASkM,aAEvCnL,GAASnB,KAAKwwC,yBAAyBpwC,EAASkM,WACpC,IAAKnL,EAAQ,GAEzB0wC,EAAcA,EAAY3sC,MAAMlF,KAAKwwC,yBAAyBpwC,EAASkM,iBAIvD3M,IAAhBkyC,SAMJD,GADAF,GADAG,EAAcA,EAAY7tB,UAAU,EAAG7iB,IACb4B,MAAM,OACJ2uC,EAAYxzC,OAAS,MAIrDyzC,GADA7kC,EAAQ5L,EAAM6B,MAAM,OACJ+J,EAAM5O,OAAS,GAE3BkC,GAAYA,EAASkM,YAChB4C,MAKI7M,EAAI,EAAGA,EAAIyK,EAAM5O,OAAQmE,SACrByvC,oBAAoBC,WAAW,CAAEC,UAAW,CAAEnnC,KAAM7K,KAAKuxC,YAAclvC,EAAI,EAAGyI,OAAc,IAANzI,EAAUrC,KAAKwxC,QAAU,GAChHngC,SAAU,CAAExG,KAAM6mC,EAAYxzC,OAASmE,EAAGyI,OAAc,IAANzI,EAAUuvC,EAAc1zC,OAAS,GACnFqK,OAAQvI,KAAKiyC,kBAAkB7xC,EAASkM,sBAP3CwlC,oBAAoBC,WAAW,CAAEC,UAAW,CAAEnnC,KAAM7K,KAAKuxC,YAAc,EAAGzmC,OAAQ9K,KAAKwxC,SACxFngC,SAAU,CAAExG,KAAM6mC,EAAYxzC,OAAQ4M,OAAQ8mC,EAAc1zC,QAC5DqK,OAAQvI,KAAKiyC,kBAAkB7xC,EAASkM,YAU/B,IAAjBQ,EAAM5O,YACDszC,SAAWG,EAAQzzC,aAEnBqzC,aAAezkC,EAAM5O,OAAS,OAC9BszC,QAAUG,EAAQzzC,aAGtBkyC,KAAKhvC,KAAKF,6CAIa,IAArBlB,KAAKowC,KAAKlyC,qCAGf4C,WACGgxC,oBAAsB,IAAI9xC,KAAKqxC,+BAA+B,CAAEa,KAAMlyC,KAAK4wC,gBAAiBuB,WAAY,OAEzGnyC,KAAKmxC,uBACA,IAAM7kC,KAAYtM,KAAKswC,gBACpBtwC,KAAKswC,aAAa1zC,eAAe0P,GAAW,KACxC/D,EAASvI,KAAKswC,aAAahkC,GAC3BtM,KAAKwwC,yBAAyBlkC,KAC9B/D,EAASA,EAAOrD,MAAMlF,KAAKwwC,yBAAyBlkC,UAEnDwlC,oBAAoBM,iBAAiBpyC,KAAKiyC,kBAAkB3lC,GAAW/D,WAKnF8nC,UAAUrvC,OAAOF,EAASd,MAE3BA,KAAKowC,KAAKlyC,OAAS,EAAG,KAClB4yC,EACEuB,EAAmBx1C,KAAKy1C,UAAUtyC,KAAK8xC,oBAAoBS,UAE7DvyC,KAAK8wC,aACLA,EAAe9wC,KAAK8wC,aACb9wC,KAAK2wC,qBACZG,EAAe9wC,KAAK2wC,yBAEnBG,aAAeA,OAEf0B,UAAYH,SAGdryC,KAAKowC,KAAK9uC,KAAK,aDzHNmxC,CAAgB7qB,GAClC8qB,WEvBMvC,EAAiBvoB,gCAEbprB,kBACHA,QAAUA,0CAGbqD,EAAUrD,EAAS6R,OACfokC,EAAkB,IAAItC,EACxB,CACIM,wBAAyBpiC,EAAQmwB,qBACjC3+B,SAAAA,EACA0wC,YAAaliC,EAAQ3B,SACrBgkC,kBAAmB1wC,KAAKxD,QAAQk0C,kBAChCI,aAAc9wC,KAAKxD,QAAQs0C,aAC3BD,eAAgB7wC,KAAKxD,QAAQm2C,wBAC7B5B,kBAAmB/wC,KAAKxD,QAAQu0C,kBAChCE,kBAAmBjxC,KAAKxD,QAAQy0C,kBAChCG,kBAAmBpxC,KAAKxD,QAAQ40C,kBAChCwB,mBAAoB5yC,KAAKxD,QAAQo2C,mBACjCC,oBAAqB7yC,KAAKxD,QAAQq2C,sBAGpC3xB,EAAMuxB,EAAgBtvC,MAAM3G,eAC7Bg2C,UAAYC,EAAgBD,eAC5B1B,aAAe2B,EAAgB3B,aAChC9wC,KAAKxD,QAAQs2C,8BACRA,uBAAyBL,EAAgBR,kBAAkBjyC,KAAKxD,QAAQs2C,8BAE1CnzC,IAAnCK,KAAKxD,QAAQu0C,wBAAyDpxC,IAAtBK,KAAK8wC,oBAChDA,aAAe2B,EAAgBhB,eAAezxC,KAAK8wC,eAErD5vB,EAAMlhB,KAAK+yC,gEAKdjC,EAAe9wC,KAAK8wC,gBACpB9wC,KAAKxD,QAAQq2C,oBAAqB,SACXlzC,IAAnBK,KAAKwyC,gBACE,GAEX1B,yCAA+ClpB,EAAYomB,aAAahuC,KAAKwyC,mBAG7E1B,iCAC+BA,SAE5B,yDAIA9wC,KAAKwyC,uDAGKA,QACZA,UAAYA,4CAIVxyC,KAAKxD,QAAQq2C,qEAIb7yC,KAAK8wC,gEAIL9wC,KAAKxD,QAAQm2C,0EAIb3yC,KAAK8yC,gCFhDKE,CAAiB7C,EAAiBvoB,GACrDqrB,WGpBKP,gCAEKx9B,EAAM7G,kBACT6G,KAAOA,OACP7G,QAAUA,0CAGb7R,OACEsyC,EAEAkE,EADEjnC,EAAS,OAGX+iC,EAAYoE,GAAclzC,KAAKkV,KAAM1Y,GACvC,MAAOqC,SACC,IAAIsN,EAAUtN,EAAGmB,KAAKqO,iBAItB9K,EAAW8L,QAAQ7S,EAAQ+G,UAC7BA,GACA6kB,GAAOf,KAAK,uIAGV8rB,EAAe,CACjB5vC,SAAAA,EACAiN,gBAAiBhU,EAAQgU,gBACzBiL,YAAapM,QAAQ7S,EAAQif,aAC7B1Z,aAAc,GAEdvF,EAAQg2C,WACRQ,EAAmB,IAAIN,EAAiBl2C,EAAQg2C,WAChDzmC,EAAOmV,IAAM8xB,EAAiB7vC,MAAM2rC,EAAWqE,EAAcnzC,KAAKqO,UAElEtC,EAAOmV,IAAM4tB,EAAU3rC,MAAMgwC,GAEnC,MAAOt0C,SACC,IAAIsN,EAAUtN,EAAGmB,KAAKqO,YAG5B7R,EAAQyiB,sBACFqwB,EAAiB9yC,EAAQyiB,cAAcm0B,oBACpC/wC,EAAI,EAAGA,EAAIitC,EAAepxC,OAAQmE,IACvC0J,EAAOmV,IAAMouB,EAAejtC,GAAGi8B,QAAQvyB,EAAOmV,IAAK,CAAEsxB,UAAWQ,EAAkBx2C,QAAAA,EAAS6R,QAASrO,KAAKqO,cAQ5G,IAAM6jC,KALP11C,EAAQg2C,YACRzmC,EAAOpJ,IAAMqwC,EAAiBK,wBAGlCtnC,EAAOsC,QAAU,GACErO,KAAKqO,QAAQilC,MACxBtzC,KAAKqO,QAAQilC,MAAM12C,eAAes1C,IAASA,IAASlyC,KAAKqO,QAAQklC,cACjExnC,EAAOsC,QAAQjN,KAAK8wC,UAGrBnmC,WHnCGynC,CAAUd,GACtBe,WInBK7rB,gCAWK1I,EAAMpe,EAAS4yC,kBAClBx0B,KAAOA,OACPq0B,aAAeG,EAAapnC,cAC5BoF,MAAQ5Q,EAAQ4Q,OAAS,QACzBhF,SAAW,QACX8xB,qBAAuB,QACvBmV,KAAO7yC,EAAQ6yC,UACfvmC,MAAQ,UACRtM,QAAUA,OAEV8yC,MAAQ,QACRN,MAAQ,0CAWZzhC,EAAM4W,EAAoB5iB,EAAiBg9B,EAAe/mB,OACrD+3B,EAAgB7zC,KAChB8zC,EAAe9zC,KAAKc,QAAQme,cAAcwwB,YAE3CmE,MAAMxyC,KAAKyQ,OAEVkiC,EAAiB,SAACl1C,EAAGqW,EAAMua,GAC7BokB,EAAcD,MAAM59B,OAAO69B,EAAcD,MAAMlwC,QAAQmO,GAAO,OAExDmiC,EAAqBvkB,IAAaokB,EAAcN,aAClD1Q,EAAcjT,UAAY/wB,GAC1Bid,EAAS,KAAM,CAAC3H,MAAM,KAAK,EAAO,MAClCiU,GAAOlmB,wBAAiButB,kFAMnBokB,EAAcP,MAAM7jB,IAAcoT,EAAclzB,SACjDkkC,EAAcP,MAAM7jB,GAAY,CAAEva,KAAAA,EAAM1Y,QAASqmC,IAEjDhkC,IAAMg1C,EAAczmC,QAASymC,EAAczmC,MAAQvO,GACvDid,EAASjd,EAAGqW,EAAM8+B,EAAoBvkB,KAIxCwkB,EAAc,CAChBpoC,YAAa7L,KAAKc,QAAQ+K,YAC1ByhC,UAAWznC,EAAgBynC,UAC3B16B,SAAU/M,EAAgB+M,SAC1B2gC,aAAc1tC,EAAgB0tC,cAG5BjrB,EAAcV,EAAY6lB,eAAe57B,EAAMhM,EAAgBqiB,iBAAkBloB,KAAKc,QAAS8mB,MAEhGU,OAkED4rB,EA7DEC,EAAmB,SAAAC,OACjBppB,EACEqpB,EAAmBD,EAAW9nC,SAC9BI,EAAW0nC,EAAW1nC,SAASpQ,QAAQ,UAAW,IAUxD23C,EAAY/rB,iBAAmBI,EAAYrH,QAAQozB,GAC/CJ,EAAYpoC,cACZooC,EAAYrhC,SAAW0V,EAAYhnB,KAC9BuyC,EAAc/yC,QAAQ8R,UAAY,GACnC0V,EAAYW,SAASgrB,EAAY/rB,iBAAkB+rB,EAAY3G,aAE9DhlB,EAAYQ,eAAemrB,EAAYrhC,WAAa0V,EAAYO,4BACjEorB,EAAYrhC,SAAW0V,EAAYhnB,KAAK2yC,EAAY3G,UAAW2G,EAAYrhC,YAGnFqhC,EAAY3nC,SAAW+nC,MAEjBC,EAAS,IAAInjC,EAASM,MAAMoiC,EAAc/yC,SAEhDwzC,EAAO3V,gBAAiB,EACxBkV,EAAcnnC,SAAS2nC,GAAoB3nC,GAEvC7G,EAAgBub,WAAayhB,EAAczhB,aAC3C6yB,EAAY7yB,WAAY,GAGxByhB,EAAc1hB,UACd6J,EAAS8oB,EAAaS,WAAW7nC,EAAU4nC,EAAQT,EAAehR,EAAcK,WAAY+Q,cACtE9nC,EAClB4nC,EAAe/oB,EAAQ,KAAMqpB,GAG7BN,EAAe,KAAM/oB,EAAQqpB,GAE1BxR,EAAclzB,OACrBokC,EAAe,KAAMrnC,EAAU2nC,IAK3BR,EAAcP,MAAMe,IAChBR,EAAcP,MAAMe,GAAkB73C,QAAQ2yB,UAC9C0T,EAAc1T,aAKdkO,GAAOiX,EAAQT,EAAeI,GAAan3C,MAAM4P,EAAU,SAAC7N,EAAGqW,GAC/D6+B,EAAel1C,EAAGqW,EAAMm/B,KAJ5BN,EAAe,KAAMF,EAAcP,MAAMe,GAAkBn/B,KAAMm/B,IAUvEvzC,EAAUxD,EAAY0C,KAAKc,SAE7B2nB,IACA3nB,EAAQ4nB,IAAMma,EAAc1hB,SAAW,MAAQ,SAG/C0hB,EAAc1hB,UACdrgB,EAAQ6yC,KAAO,yBACfO,EAAUJ,EAAaU,WAAW3iC,EAAMhM,EAAgBqiB,iBAAkBpnB,EAAS8mB,EAAaU,IAGhG4rB,EAAU5rB,EAAYmsB,SAAS5iC,EAAMhM,EAAgBqiB,iBAAkBpnB,EAAS8mB,EAC5E,SAACzf,EAAKisC,GACEjsC,EACA4rC,EAAe5rC,GAEfgsC,EAAiBC,KAI7BF,GACAA,EAAQhsC,KAAKisC,EAAkBJ,QAvF/BA,EAAe,CAAExnC,oDAA8CsF,cJlDrDgiC,CAAcjsB,GAC9B8sB,WKvBM9sB,EAAaqrB,EAAWQ,UACrB,SAATiB,EAAmBjoC,EAAOjQ,EAASsf,MACd,mBAAZtf,GACPsf,EAAWtf,EACXA,EAAUc,EAAkB0C,KAAKxD,QAAS,KAG1CA,EAAUc,EAAkB0C,KAAKxD,QAASA,GAAW,KAGpDsf,EAAU,KACL/b,EAAOC,YACN,IAAIoH,QAAQ,SAACY,EAASC,GACzBysC,EAAOzqC,KAAKlK,EAAM0M,EAAOjQ,EAAS,SAAC2L,EAAK5G,GAChC4G,EACAF,EAAOE,GAEPH,EAAQzG,YAKfzE,MAAM2P,EAAOjQ,EAAS,SAAC2L,EAAK+M,EAAM7G,EAAS7R,MACxC2L,SAAc2T,EAAS3T,OAEvB4D,MAGAA,EADkB,IAAIknC,EAAU/9B,EAAM7G,GACnBlL,MAAM3G,GAE7B,MAAO2L,UAAc2T,EAAS3T,GAE9B2T,EAAS,KAAM/P,MLTZ4oC,CAAO/sB,EAAaqrB,GAC7Bn2C,WMpBM8qB,EAAaqrB,EAAWQ,UACtB,SAAR32C,EAAkB2P,EAAOjQ,EAASsf,MAEb,mBAAZtf,GACPsf,EAAWtf,EACXA,EAAUc,EAAkB0C,KAAKxD,QAAS,KAG1CA,EAAUc,EAAkB0C,KAAKxD,QAASA,GAAW,KAGpDsf,EAAU,KACL/b,EAAOC,YACN,IAAIoH,QAAQ,SAACY,EAASC,GACzBnL,EAAMmN,KAAKlK,EAAM0M,EAAOjQ,EAAS,SAAC2L,EAAK5G,GAC/B4G,EACAF,EAAOE,GAEPH,EAAQzG,WAKhBT,EACA4yC,EACEz0B,EAAgB,IAAIowB,GAAcrvC,MAAOxD,EAAQo4C,uBAEvDp4C,EAAQyiB,cAAgBA,EAExBne,EAAU,IAAIqQ,EAASM,MAAMjV,GAEzBA,EAAQk3C,aACRA,EAAel3C,EAAQk3C,iBACpB,KACGpnC,EAAW9P,EAAQ8P,UAAY,QAC/BghC,EAAYhhC,EAAShQ,QAAQ,YAAa,KAChDo3C,EAAe,CACXpnC,SAAAA,EACAT,YAAa/K,EAAQ+K,YACrB+G,SAAU9R,EAAQ8R,UAAY,GAC9BsV,iBAAkBolB,EAClBA,UAAAA,EACAiG,aAAcjnC,IAGDsG,UAAgD,MAApC8gC,EAAa9gC,SAAS1N,OAAO,KACtDwuC,EAAa9gC,UAAY,SAI3BvE,EAAU,IAAIolC,EAAczzC,KAAMc,EAAS4yC,QAC5CG,cAAgBxlC,EAKjB7R,EAAQ+uB,SACR/uB,EAAQ+uB,QAAQ5qB,QAAQ,SAAAqqB,OAChB6pB,EACAnoC,KACAse,EAAO8pB,gBACPpoC,EAAWse,EAAO8pB,YAAYx4C,QAAQ,UAAW,KACjDu4C,EAAa51B,EAAcwwB,OAAO8E,WAAW7nC,EAAU5L,EAASuN,EAAS2c,EAAOxuB,QAASwuB,EAAO1e,qBACtEH,SACf2P,EAAS+4B,QAIpB51B,EAAc8L,UAAUC,SAKhCqS,GAAOv8B,EAASuN,EAASqlC,GACxB52C,MAAM2P,EAAO,SAAC5N,EAAGqW,MACVrW,SAAYid,EAASjd,GACzBid,EAAS,KAAM5G,EAAM7G,EAAS7R,IAC/BA,INzDDiV,CAAMmW,EAAaqrB,EAAWQ,GACtCsB,EAAU,IAAIC,GAAYptB,EAAaE,GACvCvU,EAAY0hC,GAAUrtB,GAEtBstB,EAAU,CACZhqB,QAAS,CAAC,EAAG,EAAG,GAChBiqB,KAAAA,EACAxqB,KAAAA,GACAqqB,YAAAA,GACAI,oBAAAA,GACAnrB,qBAAAA,GACArC,YAAamtB,EACb51B,SAAAA,GACAke,OAAAA,GACA9pB,UAAAA,EACApC,SAAAA,EACAg/B,gBAAAA,EACAuC,iBAAAA,EACAO,UAAAA,EACAQ,cAAAA,EACAiB,OAAAA,EACA53C,MAAAA,EACAqP,UAAAA,EACA+mC,cAAAA,GACA51C,MAAAA,EACA+xC,cAAAA,GACAjnB,OAAAA,IAKEitB,EAAO,SAAA1N,UAAM,mBACT7gC,EAAM7G,OAAO+I,OAAO2+B,EAAE9iC,8BADDrB,2BAAAA,yBAE3BmkC,EAAErwB,MAAMxQ,EAAKrG,MAAMoE,UAAUK,MAAM+E,KAAKzG,EAAM,IACvCsD,IAGLwuC,EAAMr1C,OAAO+I,OAAOksC,OACrB,IAAMtqC,KAAKsqC,EAAQvqB,QAGH,mBADjBgd,EAAIuN,EAAQvqB,KAAK/f,IAEb0qC,EAAI1qC,EAAE3F,eAAiBowC,EAAK1N,YAIvB,IAAM39B,KADXsrC,EAAI1qC,GAAK3K,OAAO+I,OAAO,MACP2+B,EAEZ2N,EAAI1qC,GAAGZ,EAAE/E,eAAiBowC,EAAK1N,EAAE39B,WAKtCsrC,eO5EK94C,EAAS4rB,OAEjBmtB,EAAY,GAGVhrB,EAAc,oBAGpBA,EAAY1lB,UAAY,IAAIuwC,IAENvsB,wBAA0B,kBACrC,GAEX0B,EAAY1lB,UAAUvD,KAAO,SAAcynB,EAAUC,UAC5CD,EAGE/oB,KAAKupB,gBAAgBP,EAAWD,GAAUlX,KAFtCmX,GAIfuB,EAAY1lB,UAAU2wC,MAAQ,SAAetsB,EAAK9mB,EAAM0Z,EAAU25B,OAExDC,EAAM,IAAIC,eACVC,GAAQp5C,EAAQq5C,gBAAiBr5C,EAAQs5C,mBAUtCC,EAAeL,EAAK55B,EAAU25B,GAC/BC,EAAIM,QAAU,KAAON,EAAIM,OAAS,IAClCl6B,EAAS45B,EAAIO,aACTP,EAAIQ,kBAAkB,kBACA,mBAAZT,GACdA,EAAQC,EAAIM,OAAQ9sB,GAbQ,mBAAzBwsB,EAAIS,kBACXT,EAAIS,iBAAiB,YAEzB/tB,EAAOd,8BAAuB4B,QAC9BwsB,EAAIU,KAAK,MAAOltB,EAAK0sB,GACrBF,EAAIW,iBAAiB,SAAUj0C,GAAQ,4CACvCszC,EAAIY,KAAK,MAWL95C,EAAQq5C,iBAAmBr5C,EAAQs5C,UAChB,IAAfJ,EAAIM,QAAiBN,EAAIM,QAAU,KAAON,EAAIM,OAAS,IACvDl6B,EAAS45B,EAAIO,cAEbR,EAAQC,EAAIM,OAAQ9sB,GAEjB0sB,EACPF,EAAIa,mBAAqB,WACC,GAAlBb,EAAIc,YACJT,EAAeL,EAAK55B,EAAU25B,IAItCM,EAAeL,EAAK55B,EAAU25B,IAGtClrB,EAAY1lB,UAAU4xC,SAAW,SAACnqC,EAAU4b,EAAkB1rB,EAASorB,UAAgB,GAEvF2C,EAAY1lB,UAAU6xC,eAAiB,WACnCnB,EAAY,IAGhBhrB,EAAY1lB,UAAU4vC,SAAW,SAAkBnoC,EAAU4b,EAAkB1rB,EAASorB,GAIhFM,IAAqBloB,KAAK8oB,eAAexc,KACzCA,EAAW4b,EAAmB5b,GAGlCA,EAAW9P,EAAQksB,IAAM1oB,KAAKyoB,mBAAmBnc,EAAU9P,EAAQksB,KAAOpc,EAE1E9P,EAAUA,GAAW,OAKfH,EADY2D,KAAKupB,gBAAgBjd,EAAUtN,OAAO23C,SAASt6C,MACrC6sB,IACtBnpB,EAAYC,YAEX,IAAIoH,QAAQ,SAACY,EAASC,MACrBzL,EAAQo6C,cAAgBrB,EAAUl5C,WAExBw6C,EAAWtB,EAAUl5C,UACpB2L,EAAQ,CAAE0E,SAAUmqC,EAAUvqC,SAAUjQ,EAAMy6C,QAAS,CAAEC,aAAc,IAAIpuC,QACpF,MAAO9J,UACEoJ,EAAO,CAAEqE,SAAUjQ,EAAMkQ,qCAA+BlQ,wBAAkBwC,EAAE0N,WAI3FxM,EAAKy1C,MAAMn5C,EAAMG,EAAQm3C,KAAM,SAAuBwB,EAAM4B,GAExDxB,EAAUl5C,GAAQ84C,EAGlBntC,EAAQ,CAAE0E,SAAUyoC,EAAM7oC,SAAUjQ,EAAMy6C,QAAS,CAAEC,aAAAA,MACtD,SAAoBf,EAAQ9sB,GAC3BjhB,EAAO,CAAE7F,KAAM,OAAQmK,mBAAa2c,6BAAsB8sB,OAAW35C,KAAAA,SAK1EkuB,GCnGLmlB,0BACUxwB,6BACHA,KAAOA,uBAFO+K,0CAMZ3d,EAAUyc,EAAUjoB,EAAS8mB,EAAaU,UAC1C,IAAIlhB,QAAQ,SAAC4vC,EAAS/uC,GACzBqgB,EAAYmsB,SAASnoC,EAAUyc,EAAUjoB,EAAS8mB,GAC7C1f,KAAK8uC,GAASC,MAAMhvC,0BCdrBjJ,EAAQkgB,EAAM1iB,SAiKnB,CACHyE,aAXWpC,EAAGq4C,GACT16C,EAAQ26C,gBAA6C,SAA3B36C,EAAQ26C,eAED,YAA3B36C,EAAQ26C,wBA7BDt4C,EAAGq4C,OAEf5qC,EAAWzN,EAAEyN,UAAY4qC,EACzBE,EAAS,GACX33B,YAAa5gB,EAAEuD,MAAQ,2BAAkBvD,EAAE0N,SAAW,sDAA6CD,GAEjG+qC,EAAY,SAACx4C,EAAGwD,EAAGi1C,QACA33C,IAAjBd,EAAEoO,QAAQ5K,IACV+0C,EAAOh2C,KAPE,mBAOY9E,QAAQ,YAAauG,SAAShE,EAAEgM,KAAM,KAAO,IAAMxI,EAAI,IACvE/F,QAAQ,YAAag7C,GACrBh7C,QAAQ,cAAeuC,EAAEoO,QAAQ5K,MAI1CxD,EAAEgM,OACFwsC,EAAUx4C,EAAG,EAAG,IAChBw4C,EAAUx4C,EAAG,EAAG,QAChBw4C,EAAUx4C,EAAG,EAAG,IAChB4gB,sBAAuB5gB,EAAEgM,yBAAgBhM,EAAEiM,OAAS,gBAAOssC,EAAO91C,KAAK,QAEvEzC,EAAE2N,QAAU3N,EAAEoO,SAAWzQ,EAAQ+6C,UAAY,KAC7C93B,4BAA6B5gB,EAAE2N,QAEnC0S,EAAKkJ,OAAOhb,MAAMqS,GAOd+3B,CAAa34C,EAAGq4C,GACyB,mBAA3B16C,EAAQ26C,gBACtB36C,EAAQ26C,eAAe,MAAOt4C,EAAGq4C,YA3JtBr4C,EAAGq4C,OAIdO,EACAh4B,EAJEriB,+BAA2BE,EAAgB45C,GAAY,KAEvD/V,EAAOniC,EAAO/B,SAASU,cAAc,OAGrCy5C,EAAS,GACT9qC,EAAWzN,EAAEyN,UAAY4qC,EACzBQ,EAAiBprC,EAAS5J,MAAM,oBAAoB,GAE1Dy+B,EAAK/jC,GAAYA,EACjB+jC,EAAKwW,UAAY,qBAEjBl4B,gBAAiB5gB,EAAEuD,MAAQ,2BAAkBvD,EAAE0N,SAAW,sEAA6DD,eAAaorC,eAE9HL,EAAY,SAACx4C,EAAGwD,EAAGi1C,QACA33C,IAAjBd,EAAEoO,QAAQ5K,IACV+0C,EAAOh2C,KAfE,qEAeY9E,QAAQ,YAAauG,SAAShE,EAAEgM,KAAM,KAAO,IAAMxI,EAAI,IACvE/F,QAAQ,YAAag7C,GACrBh7C,QAAQ,cAAeuC,EAAEoO,QAAQ5K,MAI1CxD,EAAEgM,OACFwsC,EAAUx4C,EAAG,EAAG,IAChBw4C,EAAUx4C,EAAG,EAAG,QAChBw4C,EAAUx4C,EAAG,EAAG,IAChB4gB,qBAAsB5gB,EAAEgM,yBAAgBhM,EAAEiM,OAAS,sBAAassC,EAAO91C,KAAK,cAE5EzC,EAAE2N,QAAU3N,EAAEoO,SAAWzQ,EAAQ+6C,UAAY,KAC7C93B,oCAAqC5gB,EAAE2N,MAAMzJ,MAAM,MAAMmC,MAAM,GAAG5D,KAAK,WAE3E6/B,EAAKyW,UAAYn4B,EAGjBo4B,EAAQ76C,UAAUgC,EAAO/B,SAAU,CAC/B,mDACA,yBACA,sBACA,kBACA,aACA,IACA,8BACA,mBACA,sBACA,kBACA,kBACA,IACA,4BACA,kBACA,kBACA,aACA,yBACA,IACA,iCACA,kBACA,IACA,2BACA,mBACA,qBACA,yBACA,aACA,IACA,0BACA,cACA,IACA,+BACA,cACA,qBACA,uBACA,iCACA,KACFqE,KAAK,MAAO,CAAEjE,MAAO,kBAEvB8jC,EAAK2W,MAAMl5C,QAAU,CACjB,iCACA,yBACA,yBACA,qBACA,6BACA,0BACA,cACA,gBACA,uBACF0C,KAAK,KAEa,gBAAhB9E,EAAQu7C,MACRN,EAAQO,YAAY,eACV/6C,EAAW+B,EAAO/B,SAClBmnC,EAAOnnC,EAASmnC,KAClBA,IACInnC,EAASO,eAAeJ,GACxBgnC,EAAK6T,aAAa9W,EAAMlkC,EAASO,eAAeJ,IAEhDgnC,EAAK1lC,aAAayiC,EAAMiD,EAAKjmC,YAEjC+5C,cAAcT,KAEnB,KAqDHU,CAAUt5C,EAAGq4C,IAUjBkB,gBAhDiBvmC,GACZrV,EAAQ26C,gBAA6C,SAA3B36C,EAAQ26C,eAED,YAA3B36C,EAAQ26C,gBAE0B,mBAA3B36C,EAAQ26C,gBACtB36C,EAAQ26C,eAAe,SAAUtlC,YAjBhBA,OACfrR,EAAOxB,EAAO/B,SAASO,4CAAqCF,EAAgBuU,KAC9ErR,GACAA,EAAK/B,WAAWE,YAAY6B,GAU5B63C,CAAgBxmC,MC7GtBrV,GCVgB,CAErB0lB,mBAAmB,EAGnBo2B,SAAS,EAKT/0C,UAAU,EAGVg1C,MAAM,EAON7mC,MAAO,GAGPrO,OAAO,EAKP+Q,eAAe,EAGfokC,UAAU,EAKV5lC,SAAU,GAMV/G,aAAa,EAIb4sC,UAAU,EAQV/sC,KAAM,EAGN+P,aAAa,EAKbsiB,WAAY,KAIZC,WAAY,KAGZ1d,QAAS,IDzDV,GAAIthB,OAAOkgB,SACF,IAAMla,MAAOhG,OAAOkgB,KACjBlgB,OAAOkgB,KAAKtiB,eAAeoI,MAC3BxI,GAAQwI,IAAOhG,OAAOkgB,KAAKla,eEbvBhG,EAAQxC,GAGpBD,EAAYC,EAASq7C,EAAQ94C,cAAcC,SAEZW,IAA3BnD,EAAQq5C,iBACRr5C,EAAQq5C,eAAiB,yDAAyD/kC,KAAK9R,EAAO23C,SAAS+B,WAS3Gl8C,EAAQo5C,MAAQp5C,EAAQo5C,QAAS,EACjCp5C,EAAQs5C,UAAYt5C,EAAQs5C,YAAa,EAGzCt5C,EAAQm8C,KAAOn8C,EAAQm8C,OAASn8C,EAAQq5C,eAAiB,IAAO,MAEhEr5C,EAAQu7C,IAAMv7C,EAAQu7C,MAAoC,aAA5B/4C,EAAO23C,SAASiC,UACd,WAA5B55C,EAAO23C,SAASiC,UACY,aAA5B55C,EAAO23C,SAASiC,UACf55C,EAAO23C,SAASkC,MACb75C,EAAO23C,SAASkC,KAAK36C,OAAS,GAClC1B,EAAQq5C,eAAmC,cACzC,kBAEArlC,EAAkB,6CAA6C8pB,KAAKt7B,EAAO23C,SAASlgC,MACtFjG,IACAhU,EAAQgU,gBAAkBA,EAAgB,SAGjB7Q,IAAzBnD,EAAQo6C,eACRp6C,EAAQo6C,cAAe,QAGHj3C,IAApBnD,EAAQs8C,UACRt8C,EAAQs8C,SAAU,GAGlBt8C,EAAQoP,eACRpP,EAAQqP,YAAc,OF1B9BktC,CAAkB/5C,OAAQxC,IAE1BA,GAAQ+uB,QAAU/uB,GAAQ+uB,SAAW,GAEjCvsB,OAAOg6C,eACPx8C,GAAQ+uB,QAAU/uB,GAAQ+uB,QAAQ1nB,OAAO7E,OAAOg6C,eAGpD,IAKI93B,GACA7iB,GACAy5C,GAPE54B,YGdUlgB,EAAQxC,OACdS,EAAW+B,EAAO/B,SAClBiiB,EAAO+5B,KAEb/5B,EAAK1iB,QAAUA,MACTorB,EAAc1I,EAAK0I,YACnB2C,EAAc2uB,GAAG18C,EAAS0iB,EAAKkJ,QAC/BE,EAAc,IAAIiC,EACxB3C,EAAYuxB,eAAe7wB,GAC3BpJ,EAAKqL,YAAcA,EACnBrL,EAAKwwB,aAAeA,YCxBRxwB,EAAM1iB,GAYlBA,EAAQ+6C,cAAuC,IAArB/6C,EAAQ+6C,SAA2B/6C,EAAQ+6C,SAA4B,gBAAhB/6C,EAAQu7C,IAVnE,EAEC,EAUlBv7C,EAAQ48C,UACT58C,EAAQ48C,QAAU,CAAC,CACf9xB,MAAO,SAASH,GACR3qB,EAAQ+6C,UAhBD,GAiBP8B,QAAQC,IAAInyB,IAGpBjlB,KAAM,SAASilB,GACP3qB,EAAQ+6C,UApBF,GAqBN8B,QAAQC,IAAInyB,IAGpBE,KAAM,SAASF,GACP3qB,EAAQ+6C,UAxBF,GAyBN8B,QAAQhyB,KAAKF,IAGrB/Z,MAAO,SAAS+Z,GACR3qB,EAAQ+6C,UA5BD,GA6BP8B,QAAQjsC,MAAM+Z,WAKzB,IAAI9kB,EAAI,EAAGA,EAAI7F,EAAQ48C,QAAQl7C,OAAQmE,IACxC6c,EAAKkJ,OAAOb,YAAY/qB,EAAQ48C,QAAQ/2C,IDb5Ck3C,CAAYr6B,EAAM1iB,OACZ46C,EAASoC,GAAex6C,EAAQkgB,EAAM1iB,GACtCi9C,EAAQv6B,EAAKu6B,MAAQj9C,EAAQi9C,gBE1BvBz6C,EAAQxC,EAAS4rB,OACzBqxB,EAAQ,QACQ,gBAAhBj9C,EAAQu7C,QAEJ0B,OAAwC,IAAxBz6C,EAAO06C,aAAgC,KAAO16C,EAAO06C,aACvE,MAAO38C,UAEN,CACH48C,OAAQ,SAAS9nC,EAAMklC,EAAc/Y,EAAY9gC,MACzCu8C,EAAO,CACPrxB,EAAOlmB,sBAAe2P,qBAElB4nC,EAAMG,QAAQ/nC,EAAM3U,GACpBu8C,EAAMG,kBAAW/nC,gBAAkBklC,GAC/B/Y,GACAyb,EAAMG,kBAAW/nC,WAAahV,KAAKy1C,UAAUtU,IAEnD,MAAOn/B,GAELupB,EAAOhb,gCAAyByE,yCAI5CgoC,OAAQ,SAAShoC,EAAMilC,EAAS9Y,OACtB9c,EAAYu4B,GAASA,EAAMK,QAAQjoC,GACnCkoC,EAAYN,GAASA,EAAMK,kBAAWjoC,iBACxC8E,EAAY8iC,GAASA,EAAMK,kBAAWjoC,eAE1CmsB,EAAaA,GAAc,GAC3BrnB,EAAOA,GAAQ,KAEXojC,GAAajD,EAAQC,cACpB,IAAIpuC,KAAKmuC,EAAQC,cAAciD,YAC5B,IAAIrxC,KAAKoxC,GAAWC,WACxBn9C,KAAKy1C,UAAUtU,KAAgBrnB,SAExBuK,IFVyB+4B,CAAMj7C,EAAQxC,EAAS0iB,EAAKkJ,6BGxB/D8xB,SACC,CACF93C,KAAM,UACNmK,QAAS,yEAIX4tC,EAAiB,cACL,SAAShN,UACnB+M,KACQ,iBAEG,SAAS/M,UACpB+M,KACQ,kBAEI,SAAS/M,UACrB+M,KACQ,IAIhB7kC,EAAiB/B,YAAY6mC,GHG7BC,CAAUl7B,EAAK0I,aAGXprB,EAAQ+W,WACR2L,EAAK3L,UAAU8B,iBAAiB/B,YAAY9W,EAAQ+W,eAGlD8mC,EAAc,6BAEXzzC,EAAME,OACLmE,EAAS,OACV,IAAMC,KAAQpE,EACXA,EAAIlK,eAAesO,KACnBD,EAAOC,GAAQpE,EAAIoE,WAGpBD,WAIF+I,EAAKX,EAAMinC,OACVC,EAAY95C,MAAMoE,UAAUK,MAAM+E,KAAKqb,UAAW,UACjD,eACG9hB,EAAO+2C,EAAU12C,OAAOpD,MAAMoE,UAAUK,MAAM+E,KAAKqb,UAAW,WAC7DjS,EAAKiE,MAAMgjC,EAAS92C,aAI1Bg3C,EAAWxc,WAEZ8Z,EADE56C,EAASD,EAASqB,qBAAqB,SAGpC+D,EAAI,EAAGA,EAAInF,EAAOgB,OAAQmE,QAC/By1C,EAAQ56C,EAAOmF,IACLD,KAAKM,MAAM23C,GAAc,KACzBI,EAAkB7zC,EAAMpK,GAC9Bi+C,EAAgBzc,WAAaA,MACvB6Y,EAAWiB,EAAMF,WAAa,GACpC6C,EAAgBnuC,SAAWrP,EAAS05C,SAASt6C,KAAKC,QAAQ,OAAQ,IAIlE4iB,EAAKw1B,OAAOmC,EAAU4D,EACdzmC,EAAK,SAAC8jC,EAAOj5C,EAAGkN,GACRlN,EACAu4C,EAAOn2C,IAAIpC,EAAG,WAEdi5C,EAAM11C,KAAO,WACT01C,EAAMh6C,WACNg6C,EAAMh6C,WAAWc,QAAUmN,EAAOmV,IAElC42B,EAAMF,UAAY7rC,EAAOmV,MAGlC,KAAM42B,cAKpB4C,EAAev9C,EAAO2e,EAAU6+B,EAAQC,EAAW5c,OAElDyc,EAAkB7zC,EAAMpK,GAC9BD,EAAYk+C,EAAiBt9C,GAC7Bs9C,EAAgB9G,KAAOx2C,EAAMiF,KAEzB47B,IACAyc,EAAgBzc,WAAaA,GA6CjC1V,EAAYmsB,SAASt3C,EAAMd,KAAM,KAAMo+C,EAAiB7yB,GACnD1f,KAAK,SAAAksC,aA3CuBA,OACvBe,EAAOf,EAAW1nC,SAClBmF,EAAOuiC,EAAW9nC,SAClBwqC,EAAU1C,EAAW0C,QAErB7C,EAAc,CAChB/rB,iBAAkBI,EAAYrH,QAAQpP,GACtCvF,SAAUuF,EACV0hC,aAAc1hC,EACdhG,YAAa4uC,EAAgB5uC,gBAGjCooC,EAAY3G,UAAY2G,EAAY/rB,iBACpC+rB,EAAYrhC,SAAW6nC,EAAgB7nC,UAAYqhC,EAAY/rB,iBAE3D4uB,EAAS,CACTA,EAAQ8D,UAAYA,MAEd15B,EAAMu4B,EAAMI,OAAOhoC,EAAMilC,EAAS2D,EAAgBzc,gBACnD2c,GAAUz5B,SACX41B,EAAQ+D,OAAQ,OAChB/+B,EAAS,KAAMoF,EAAKi0B,EAAMh4C,EAAO25C,EAASjlC,GAOlDulC,EAAOgB,OAAOvmC,GAEd4oC,EAAgB/G,aAAeO,EAC/B/0B,EAAKw1B,OAAOS,EAAMsF,EAAiB,SAAC57C,EAAGkN,GAC/BlN,GACAA,EAAExC,KAAOwV,EACTiK,EAASjd,KAET46C,EAAME,OAAOx8C,EAAMd,KAAMy6C,EAAQC,aAAc0D,EAAgBzc,WAAYjyB,EAAOmV,KAClFpF,EAAS,KAAM/P,EAAOmV,IAAKi0B,EAAMh4C,EAAO25C,EAASjlC,MAOrDipC,CAAwB1G,KACzB6C,MAAM,SAAA9uC,GACLkxC,QAAQC,IAAInxC,GACZ2T,EAAS3T,cAKZ4yC,EAAgBj/B,EAAU6+B,EAAQ3c,OAClC,IAAI37B,EAAI,EAAGA,EAAI6c,EAAK87B,OAAO98C,OAAQmE,IACpCq4C,EAAex7B,EAAK87B,OAAO34C,GAAIyZ,EAAU6+B,EAAQz7B,EAAK87B,OAAO98C,QAAUmE,EAAI,GAAI27B,UAwBvF9e,EAAK+7B,MAAU,kBACN/7B,EAAKg8B,YACNh8B,EAAK64B,IAAM,cArBE,gBAAb74B,EAAK64B,MACL74B,EAAKi8B,WAAanD,YAAY,WACtB94B,EAAKg8B,YACL5yB,EAAYouB,iBACZqE,EAAgB,SAACl8C,EAAGqiB,EAAKnkB,EAAGI,EAAO25C,GAC3Bj4C,EACAu4C,EAAOn2C,IAAIpC,EAAGA,EAAExC,MAAQc,EAAMd,MACvB6kB,GACP22B,EAAQ76C,UAAUgC,EAAO/B,SAAUikB,EAAK/jB,OAIrDX,EAAQm8C,aAYVuC,WAAY,GACV,GAGXh8B,EAAKk8B,QAAU,kBAAalD,cAAch5B,EAAKi8B,iBAAkBD,WAAY,GAAc,GAM3Fh8B,EAAKm8B,+BAAiC,eAC5BC,EAAQr+C,EAASqB,qBAAqB,QAC5C4gB,EAAK87B,OAAS,OAET,IAAI34C,EAAI,EAAGA,EAAIi5C,EAAMp9C,OAAQmE,KACT,oBAAjBi5C,EAAMj5C,GAAGk5C,KAA8BD,EAAMj5C,GAAGk5C,IAAI74C,MAAM,eACzD44C,EAAMj5C,GAAGD,KAAKM,MAAM23C,KACrBn7B,EAAK87B,OAAO55C,KAAKk6C,EAAMj5C,KASnC6c,EAAKs8B,oBAAsB,kBAAM,IAAIp0C,QAAQ,SAACY,EAASC,GACnDiX,EAAKm8B,iCACLrzC,OAOJkX,EAAK8e,WAAa,SAAAyd,UAAUv8B,EAAKw8B,SAAQ,EAAMD,GAAQ,IAEvDv8B,EAAKw8B,QAAU,SAACf,EAAQ3c,EAAY0Y,UAC3BiE,GAAUjE,KAAsC,IAAnBA,GAC9BpuB,EAAYouB,iBAET,IAAItvC,QAAQ,SAACY,EAASC,OACrB0zC,EACAC,EACAC,EACAC,EACJH,EAAYC,EAAU,IAAIjzC,KAKF,KAFxBmzC,EAAkB58B,EAAK87B,OAAO98C,SAI1B09C,EAAU,IAAIjzC,KACdkzC,EAAoBD,EAAUD,EAC9Bz8B,EAAKkJ,OAAOlmB,KAAK,gDACjB8F,EAAQ,CACJ2zC,UAAAA,EACAC,QAAAA,EACAC,kBAAAA,EACAb,OAAQ97B,EAAK87B,OAAO98C,UAKxB68C,EAAgB,SAACl8C,EAAGqiB,EAAKnkB,EAAGI,EAAO25C,MAC3Bj4C,SACAu4C,EAAOn2C,IAAIpC,EAAGA,EAAExC,MAAQc,EAAMd,WAC9B4L,EAAOpJ,GAGPi4C,EAAQ+D,MACR37B,EAAKkJ,OAAOlmB,uBAAgB/E,EAAMd,sBAElC6iB,EAAKkJ,OAAOlmB,wBAAiB/E,EAAMd,wBAEvCw7C,EAAQ76C,UAAUgC,EAAO/B,SAAUikB,EAAK/jB,GACxC+hB,EAAKkJ,OAAOlmB,uBAAgB/E,EAAMd,8BAAqB,IAAIsM,KAASizC,SAM5C,KAHxBE,IAIID,EAAoB,IAAIlzC,KAASgzC,EACjCz8B,EAAKkJ,OAAOlmB,mDAA4C25C,SACxD7zC,EAAQ,CACJ2zC,UAAAA,EACAC,QAAAA,EACAC,kBAAAA,EACAb,OAAQ97B,EAAK87B,OAAO98C,UAG5B09C,EAAU,IAAIjzC,MACfgyC,EAAQ3c,GAGfwc,EAAWxc,MAInB9e,EAAK68B,cAAgBvB,EACdt7B,EH/PEhK,CAAKlW,OAAQxC,IAU1B,SAASw/C,GAAgB7G,GACjBA,EAAK7oC,UACL+sC,QAAQhyB,KAAK8tB,GAEZ34C,GAAQo5C,OACTv3C,GAAKM,YAAYm5C,WAZzB94C,OAAOkgB,KAAOA,GAgBV1iB,GAAQs8C,UACJ,SAAShoC,KAAK9R,OAAO23C,SAASlgC,OAC9ByI,GAAK+7B,QAGJz+C,GAAQo5C,QACT10B,GAAM,oCACN7iB,GAAOpB,SAASoB,MAAQpB,SAASqB,qBAAqB,QAAQ,IAC9Dw5C,GAAQ76C,SAASU,cAAc,UAEzByE,KAAO,WACT01C,GAAMh6C,WACNg6C,GAAMh6C,WAAWc,QAAUsiB,GAE3B42B,GAAM/5C,YAAYd,SAASe,eAAekjB,KAG9C7iB,GAAKN,YAAY+5C,KAErB54B,GAAKm8B,iCACLn8B,GAAK+8B,iBAAmB/8B,GAAKw8B,QAAqB,gBAAbx8B,GAAK64B,KAAuB7vC,KAAK8zC,GAAiBA"}